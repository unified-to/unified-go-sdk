// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PropertyCalendarRecordingTranscriptAttendeeStatus string

const (
	PropertyCalendarRecordingTranscriptAttendeeStatusAccepted  PropertyCalendarRecordingTranscriptAttendeeStatus = "ACCEPTED"
	PropertyCalendarRecordingTranscriptAttendeeStatusRejected  PropertyCalendarRecordingTranscriptAttendeeStatus = "REJECTED"
	PropertyCalendarRecordingTranscriptAttendeeStatusTentative PropertyCalendarRecordingTranscriptAttendeeStatus = "TENTATIVE"
)

func (e PropertyCalendarRecordingTranscriptAttendeeStatus) ToPointer() *PropertyCalendarRecordingTranscriptAttendeeStatus {
	return &e
}
func (e *PropertyCalendarRecordingTranscriptAttendeeStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCEPTED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "TENTATIVE":
		*e = PropertyCalendarRecordingTranscriptAttendeeStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyCalendarRecordingTranscriptAttendeeStatus: %v", v)
	}
}

type PropertyCalendarRecordingTranscriptAttendee struct {
	Email    *string                                            `json:"email,omitempty"`
	Name     *string                                            `json:"name,omitempty"`
	Required *bool                                              `json:"required,omitempty"`
	Status   *PropertyCalendarRecordingTranscriptAttendeeStatus `json:"status,omitempty"`
	UserID   *string                                            `json:"user_id,omitempty"`
}

func (o *PropertyCalendarRecordingTranscriptAttendee) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *PropertyCalendarRecordingTranscriptAttendee) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PropertyCalendarRecordingTranscriptAttendee) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *PropertyCalendarRecordingTranscriptAttendee) GetStatus() *PropertyCalendarRecordingTranscriptAttendeeStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PropertyCalendarRecordingTranscriptAttendee) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}
