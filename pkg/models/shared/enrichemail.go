// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EnrichEmailType string

const (
	EnrichEmailTypeWork  EnrichEmailType = "WORK"
	EnrichEmailTypeHome  EnrichEmailType = "HOME"
	EnrichEmailTypeOther EnrichEmailType = "OTHER"
)

func (e EnrichEmailType) ToPointer() *EnrichEmailType {
	return &e
}

func (e *EnrichEmailType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WORK":
		fallthrough
	case "HOME":
		fallthrough
	case "OTHER":
		*e = EnrichEmailType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnrichEmailType: %v", v)
	}
}

type EnrichEmail struct {
	Email string           `json:"email"`
	Type  *EnrichEmailType `json:"type,omitempty"`
}

func (o *EnrichEmail) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *EnrichEmail) GetType() *EnrichEmailType {
	if o == nil {
		return nil
	}
	return o.Type
}
