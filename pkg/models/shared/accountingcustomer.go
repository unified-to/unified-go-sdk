// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type AccountingCustomerTaxExemption string

const (
	AccountingCustomerTaxExemptionFederalGov     AccountingCustomerTaxExemption = "FEDERAL_GOV"
	AccountingCustomerTaxExemptionRegionGov      AccountingCustomerTaxExemption = "REGION_GOV"
	AccountingCustomerTaxExemptionLocalGov       AccountingCustomerTaxExemption = "LOCAL_GOV"
	AccountingCustomerTaxExemptionTribalGov      AccountingCustomerTaxExemption = "TRIBAL_GOV"
	AccountingCustomerTaxExemptionCharitableOrg  AccountingCustomerTaxExemption = "CHARITABLE_ORG"
	AccountingCustomerTaxExemptionReligiousOrg   AccountingCustomerTaxExemption = "RELIGIOUS_ORG"
	AccountingCustomerTaxExemptionEducationalOrg AccountingCustomerTaxExemption = "EDUCATIONAL_ORG"
	AccountingCustomerTaxExemptionMedicalOrg     AccountingCustomerTaxExemption = "MEDICAL_ORG"
	AccountingCustomerTaxExemptionResale         AccountingCustomerTaxExemption = "RESALE"
	AccountingCustomerTaxExemptionForeign        AccountingCustomerTaxExemption = "FOREIGN"
	AccountingCustomerTaxExemptionOther          AccountingCustomerTaxExemption = "OTHER"
)

func (e AccountingCustomerTaxExemption) ToPointer() *AccountingCustomerTaxExemption {
	return &e
}

func (e *AccountingCustomerTaxExemption) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FEDERAL_GOV":
		fallthrough
	case "REGION_GOV":
		fallthrough
	case "LOCAL_GOV":
		fallthrough
	case "TRIBAL_GOV":
		fallthrough
	case "CHARITABLE_ORG":
		fallthrough
	case "RELIGIOUS_ORG":
		fallthrough
	case "EDUCATIONAL_ORG":
		fallthrough
	case "MEDICAL_ORG":
		fallthrough
	case "RESALE":
		fallthrough
	case "FOREIGN":
		fallthrough
	case "OTHER":
		*e = AccountingCustomerTaxExemption(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountingCustomerTaxExemption: %v", v)
	}
}

type AccountingCustomer struct {
	BillingAddress  *PropertyAccountingCustomerBillingAddress  `json:"billing_address,omitempty"`
	CreatedAt       *time.Time                                 `json:"created_at,omitempty"`
	Currency        *string                                    `default:"USD" json:"currency"`
	Emails          []AccountingEmail                          `json:"emails,omitempty"`
	ID              *string                                    `json:"id,omitempty"`
	IsActive        *bool                                      `json:"is_active,omitempty"`
	Name            *string                                    `json:"name,omitempty"`
	Raw             *PropertyAccountingCustomerRaw             `json:"raw,omitempty"`
	ShippingAddress *PropertyAccountingCustomerShippingAddress `json:"shipping_address,omitempty"`
	TaxExemption    *AccountingCustomerTaxExemption            `json:"tax_exemption,omitempty"`
	Telephones      []AccountingTelephone                      `json:"telephones,omitempty"`
	UpdatedAt       *time.Time                                 `json:"updated_at,omitempty"`
}

func (a AccountingCustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccountingCustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AccountingCustomer) GetBillingAddress() *PropertyAccountingCustomerBillingAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *AccountingCustomer) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AccountingCustomer) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *AccountingCustomer) GetEmails() []AccountingEmail {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *AccountingCustomer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccountingCustomer) GetIsActive() *bool {
	if o == nil {
		return nil
	}
	return o.IsActive
}

func (o *AccountingCustomer) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AccountingCustomer) GetRaw() *PropertyAccountingCustomerRaw {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *AccountingCustomer) GetShippingAddress() *PropertyAccountingCustomerShippingAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *AccountingCustomer) GetTaxExemption() *AccountingCustomerTaxExemption {
	if o == nil {
		return nil
	}
	return o.TaxExemption
}

func (o *AccountingCustomer) GetTelephones() []AccountingTelephone {
	if o == nil {
		return nil
	}
	return o.Telephones
}

func (o *AccountingCustomer) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
