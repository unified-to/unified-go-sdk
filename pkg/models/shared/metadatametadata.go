// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type MetadataMetadata struct {
	CreatedAt  *time.Time        `json:"created_at,omitempty"`
	ID         *string           `json:"id,omitempty"`
	Name       string            `json:"name"`
	ObjectType string            `json:"object_type"`
	Objects    map[string]string `json:"objects,omitempty"`
	Raw        map[string]any    `json:"raw,omitempty"`
	Type       *string           `json:"type,omitempty"`
	UpdatedAt  *time.Time        `json:"updated_at,omitempty"`
}

func (m MetadataMetadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MetadataMetadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MetadataMetadata) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *MetadataMetadata) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *MetadataMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *MetadataMetadata) GetObjectType() string {
	if o == nil {
		return ""
	}
	return o.ObjectType
}

func (o *MetadataMetadata) GetObjects() map[string]string {
	if o == nil {
		return nil
	}
	return o.Objects
}

func (o *MetadataMetadata) GetRaw() map[string]any {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *MetadataMetadata) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *MetadataMetadata) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
