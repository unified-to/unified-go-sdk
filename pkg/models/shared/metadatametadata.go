// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type Format string

const (
	FormatText           Format = "TEXT"
	FormatNumber         Format = "NUMBER"
	FormatDate           Format = "DATE"
	FormatBoolean        Format = "BOOLEAN"
	FormatFile           Format = "FILE"
	FormatTextarea       Format = "TEXTAREA"
	FormatSingleSelect   Format = "SINGLE_SELECT"
	FormatMultipleSelect Format = "MULTIPLE_SELECT"
	FormatMeasurement    Format = "MEASUREMENT"
	FormatPrice          Format = "PRICE"
	FormatYesNo          Format = "YES_NO"
	FormatCurrency       Format = "CURRENCY"
	FormatURL            Format = "URL"
)

func (e Format) ToPointer() *Format {
	return &e
}
func (e *Format) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		fallthrough
	case "NUMBER":
		fallthrough
	case "DATE":
		fallthrough
	case "BOOLEAN":
		fallthrough
	case "FILE":
		fallthrough
	case "TEXTAREA":
		fallthrough
	case "SINGLE_SELECT":
		fallthrough
	case "MULTIPLE_SELECT":
		fallthrough
	case "MEASUREMENT":
		fallthrough
	case "PRICE":
		fallthrough
	case "YES_NO":
		fallthrough
	case "CURRENCY":
		fallthrough
	case "URL":
		*e = Format(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Format: %v", v)
	}
}

type MetadataMetadataRaw struct {
}

type MetadataMetadata struct {
	CreatedAt      *time.Time           `json:"created_at,omitempty"`
	Format         *Format              `json:"format,omitempty"`
	ID             *string              `json:"id,omitempty"`
	Name           string               `json:"name"`
	ObjectType     string               `json:"object_type"`
	Objects        map[string]string    `json:"objects,omitempty"`
	Options        []string             `json:"options,omitempty"`
	OriginalFormat *string              `json:"original_format,omitempty"`
	Raw            *MetadataMetadataRaw `json:"raw,omitempty"`
	UpdatedAt      *time.Time           `json:"updated_at,omitempty"`
}

func (m MetadataMetadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MetadataMetadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MetadataMetadata) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *MetadataMetadata) GetFormat() *Format {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *MetadataMetadata) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *MetadataMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *MetadataMetadata) GetObjectType() string {
	if o == nil {
		return ""
	}
	return o.ObjectType
}

func (o *MetadataMetadata) GetObjects() map[string]string {
	if o == nil {
		return nil
	}
	return o.Objects
}

func (o *MetadataMetadata) GetOptions() []string {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *MetadataMetadata) GetOriginalFormat() *string {
	if o == nil {
		return nil
	}
	return o.OriginalFormat
}

func (o *MetadataMetadata) GetRaw() *MetadataMetadataRaw {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *MetadataMetadata) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
