// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PropertyUserSchemas string

const (
	PropertyUserSchemasUrnIetfParamsScimSchemasCore20User                       PropertyUserSchemas = "urn:ietf:params:scim:schemas:core:2.0:User"
	PropertyUserSchemasUrnIetfParamsScimSchemasExtensionEnterprise20User        PropertyUserSchemas = "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"
	PropertyUserSchemasUrnIetfParamsScimSchemasExtensionLatticeAttributes10User PropertyUserSchemas = "urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User"
	PropertyUserSchemasUrnIetfParamsScimSchemasExtensionPeakon20User            PropertyUserSchemas = "urn:ietf:params:scim:schemas:extension:peakon:2.0:User"
)

func (e PropertyUserSchemas) ToPointer() *PropertyUserSchemas {
	return &e
}
func (e *PropertyUserSchemas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:User":
		fallthrough
	case "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User":
		fallthrough
	case "urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User":
		fallthrough
	case "urn:ietf:params:scim:schemas:extension:peakon:2.0:User":
		*e = PropertyUserSchemas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyUserSchemas: %v", v)
	}
}
