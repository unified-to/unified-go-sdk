// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type DbType string

const (
	DbTypeMongodb  DbType = "mongodb"
	DbTypeMysql    DbType = "mysql"
	DbTypePostgres DbType = "postgres"
	DbTypeMssql    DbType = "mssql"
	DbTypeMariadb  DbType = "mariadb"
)

func (e DbType) ToPointer() *DbType {
	return &e
}

type Event string

const (
	EventUpdated Event = "updated"
	EventCreated Event = "created"
	EventDeleted Event = "deleted"
)

func (e Event) ToPointer() *Event {
	return &e
}

type ObjectType string

const (
	ObjectTypeAccountingAccount       ObjectType = "accounting_account"
	ObjectTypeAccountingTransaction   ObjectType = "accounting_transaction"
	ObjectTypeAccountingJournal       ObjectType = "accounting_journal"
	ObjectTypeAccountingContact       ObjectType = "accounting_contact"
	ObjectTypeAccountingInvoice       ObjectType = "accounting_invoice"
	ObjectTypeAccountingBill          ObjectType = "accounting_bill"
	ObjectTypeAccountingCreditmemo    ObjectType = "accounting_creditmemo"
	ObjectTypeAccountingTaxrate       ObjectType = "accounting_taxrate"
	ObjectTypeAccountingOrganization  ObjectType = "accounting_organization"
	ObjectTypeAccountingOrder         ObjectType = "accounting_order"
	ObjectTypeAccountingSalesorder    ObjectType = "accounting_salesorder"
	ObjectTypeAccountingPurchaseorder ObjectType = "accounting_purchaseorder"
	ObjectTypeAccountingReport        ObjectType = "accounting_report"
	ObjectTypeAccountingBalancesheet  ObjectType = "accounting_balancesheet"
	ObjectTypeAccountingProfitloss    ObjectType = "accounting_profitloss"
	ObjectTypeAccountingTrialbalance  ObjectType = "accounting_trialbalance"
	ObjectTypePaymentPayment          ObjectType = "payment_payment"
	ObjectTypePaymentLink             ObjectType = "payment_link"
	ObjectTypePaymentPayout           ObjectType = "payment_payout"
	ObjectTypePaymentRefund           ObjectType = "payment_refund"
	ObjectTypePaymentSubscription     ObjectType = "payment_subscription"
	ObjectTypeCommerceItem            ObjectType = "commerce_item"
	ObjectTypeCommerceCollection      ObjectType = "commerce_collection"
	ObjectTypeCommerceInventory       ObjectType = "commerce_inventory"
	ObjectTypeCommerceLocation        ObjectType = "commerce_location"
	ObjectTypeCommerceReview          ObjectType = "commerce_review"
	ObjectTypeAtsActivity             ObjectType = "ats_activity"
	ObjectTypeAtsApplication          ObjectType = "ats_application"
	ObjectTypeAtsApplicationstatus    ObjectType = "ats_applicationstatus"
	ObjectTypeAtsCandidate            ObjectType = "ats_candidate"
	ObjectTypeAtsDocument             ObjectType = "ats_document"
	ObjectTypeAtsInterview            ObjectType = "ats_interview"
	ObjectTypeAtsJob                  ObjectType = "ats_job"
	ObjectTypeAtsScorecard            ObjectType = "ats_scorecard"
	ObjectTypeAtsCompany              ObjectType = "ats_company"
	ObjectTypeCrmCompany              ObjectType = "crm_company"
	ObjectTypeCrmContact              ObjectType = "crm_contact"
	ObjectTypeCrmDeal                 ObjectType = "crm_deal"
	ObjectTypeCrmEvent                ObjectType = "crm_event"
	ObjectTypeCrmLead                 ObjectType = "crm_lead"
	ObjectTypeCrmPipeline             ObjectType = "crm_pipeline"
	ObjectTypeHrisEmployee            ObjectType = "hris_employee"
	ObjectTypeHrisGroup               ObjectType = "hris_group"
	ObjectTypeHrisPayslip             ObjectType = "hris_payslip"
	ObjectTypeHrisTimeoff             ObjectType = "hris_timeoff"
	ObjectTypeHrisCompany             ObjectType = "hris_company"
	ObjectTypeHrisLocation            ObjectType = "hris_location"
	ObjectTypeHrisDevice              ObjectType = "hris_device"
	ObjectTypeHrisTimeshift           ObjectType = "hris_timeshift"
	ObjectTypeMartechList             ObjectType = "martech_list"
	ObjectTypeMartechMember           ObjectType = "martech_member"
	ObjectTypePassthrough             ObjectType = "passthrough"
	ObjectTypeTicketingNote           ObjectType = "ticketing_note"
	ObjectTypeTicketingTicket         ObjectType = "ticketing_ticket"
	ObjectTypeTicketingCustomer       ObjectType = "ticketing_customer"
	ObjectTypeUcContact               ObjectType = "uc_contact"
	ObjectTypeUcCall                  ObjectType = "uc_call"
	ObjectTypeUcComment               ObjectType = "uc_comment"
	ObjectTypeUcRecording             ObjectType = "uc_recording"
	ObjectTypeEnrichPerson            ObjectType = "enrich_person"
	ObjectTypeEnrichCompany           ObjectType = "enrich_company"
	ObjectTypeStorageFile             ObjectType = "storage_file"
	ObjectTypeGenaiModel              ObjectType = "genai_model"
	ObjectTypeGenaiPrompt             ObjectType = "genai_prompt"
	ObjectTypeMessagingMessage        ObjectType = "messaging_message"
	ObjectTypeMessagingChannel        ObjectType = "messaging_channel"
	ObjectTypeKmsSpace                ObjectType = "kms_space"
	ObjectTypeKmsPage                 ObjectType = "kms_page"
	ObjectTypeKmsComment              ObjectType = "kms_comment"
	ObjectTypeTaskProject             ObjectType = "task_project"
	ObjectTypeTaskTask                ObjectType = "task_task"
	ObjectTypeTaskComment             ObjectType = "task_comment"
	ObjectTypeScimUsers               ObjectType = "scim_users"
	ObjectTypeScimGroups              ObjectType = "scim_groups"
	ObjectTypeLmsCourse               ObjectType = "lms_course"
	ObjectTypeLmsClass                ObjectType = "lms_class"
	ObjectTypeLmsStudent              ObjectType = "lms_student"
	ObjectTypeLmsInstructor           ObjectType = "lms_instructor"
	ObjectTypeRepoOrganization        ObjectType = "repo_organization"
	ObjectTypeRepoRepository          ObjectType = "repo_repository"
	ObjectTypeRepoBranch              ObjectType = "repo_branch"
	ObjectTypeRepoCommit              ObjectType = "repo_commit"
	ObjectTypeRepoPullrequest         ObjectType = "repo_pullrequest"
	ObjectTypeMetadataMetadata        ObjectType = "metadata_metadata"
	ObjectTypeCalendarCalendar        ObjectType = "calendar_calendar"
	ObjectTypeCalendarEvent           ObjectType = "calendar_event"
	ObjectTypeCalendarBusy            ObjectType = "calendar_busy"
	ObjectTypeCalendarLink            ObjectType = "calendar_link"
	ObjectTypeCalendarRecording       ObjectType = "calendar_recording"
)

func (e ObjectType) ToPointer() *ObjectType {
	return &e
}

type WebhookType string

const (
	WebhookTypeVirtual WebhookType = "virtual"
	WebhookTypeNative  WebhookType = "native"
)

func (e WebhookType) ToPointer() *WebhookType {
	return &e
}

// Webhook - A webhook is used to POST new/updated information to your server.
type Webhook struct {
	CheckedAt       *time.Time     `json:"checked_at,omitempty"`
	ConnectionID    string         `json:"connection_id"`
	CreatedAt       *time.Time     `json:"created_at,omitempty"`
	DbNamePrefix    *string        `json:"db_name_prefix,omitempty"`
	DbType          *DbType        `json:"db_type,omitempty"`
	DbURL           *string        `json:"db_url,omitempty"`
	Environment     *string        `default:"Production" json:"environment"`
	Event           Event          `json:"event"`
	Fields          *string        `json:"fields,omitempty"`
	Filters         map[string]any `json:"filters,omitempty"`
	HookURL         *string        `json:"hook_url,omitempty"`
	ID              *string        `json:"id,omitempty"`
	IntegrationType *string        `json:"integration_type,omitempty"`
	Interval        *float64       `json:"interval,omitempty"`
	IsHealthy       *bool          `json:"is_healthy,omitempty"`
	IsPaused        *bool          `json:"is_paused,omitempty"`
	Meta            map[string]any `json:"meta,omitempty"`
	ObjectType      ObjectType     `json:"object_type"`
	PageMaxLimit    *float64       `json:"page_max_limit,omitempty"`
	// An array of the most revent virtual webhook runs
	Runs        []string     `json:"runs,omitempty"`
	UpdatedAt   *time.Time   `json:"updated_at,omitempty"`
	WebhookType *WebhookType `json:"webhook_type,omitempty"`
	WorkspaceID *string      `json:"workspace_id,omitempty"`
}

func (w Webhook) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *Webhook) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Webhook) GetCheckedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CheckedAt
}

func (o *Webhook) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *Webhook) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Webhook) GetDbNamePrefix() *string {
	if o == nil {
		return nil
	}
	return o.DbNamePrefix
}

func (o *Webhook) GetDbType() *DbType {
	if o == nil {
		return nil
	}
	return o.DbType
}

func (o *Webhook) GetDbURL() *string {
	if o == nil {
		return nil
	}
	return o.DbURL
}

func (o *Webhook) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *Webhook) GetEvent() Event {
	if o == nil {
		return Event("")
	}
	return o.Event
}

func (o *Webhook) GetFields() *string {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *Webhook) GetFilters() map[string]any {
	if o == nil {
		return nil
	}
	return o.Filters
}

func (o *Webhook) GetHookURL() *string {
	if o == nil {
		return nil
	}
	return o.HookURL
}

func (o *Webhook) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Webhook) GetIntegrationType() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationType
}

func (o *Webhook) GetInterval() *float64 {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *Webhook) GetIsHealthy() *bool {
	if o == nil {
		return nil
	}
	return o.IsHealthy
}

func (o *Webhook) GetIsPaused() *bool {
	if o == nil {
		return nil
	}
	return o.IsPaused
}

func (o *Webhook) GetMeta() map[string]any {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *Webhook) GetObjectType() ObjectType {
	if o == nil {
		return ObjectType("")
	}
	return o.ObjectType
}

func (o *Webhook) GetPageMaxLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.PageMaxLimit
}

func (o *Webhook) GetRuns() []string {
	if o == nil {
		return nil
	}
	return o.Runs
}

func (o *Webhook) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Webhook) GetWebhookType() *WebhookType {
	if o == nil {
		return nil
	}
	return o.WebhookType
}

func (o *Webhook) GetWorkspaceID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceID
}
