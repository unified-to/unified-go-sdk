// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Type string

const (
	TypeWork  Type = "WORK"
	TypeHome  Type = "HOME"
	TypeOther Type = "OTHER"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WORK":
		fallthrough
	case "HOME":
		fallthrough
	case "OTHER":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type AccountingEmail struct {
	Email string `json:"email"`
	Type  *Type  `json:"type,omitempty"`
}

func (o *AccountingEmail) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *AccountingEmail) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}
