// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type Status string

const (
	StatusNew             Status = "NEW"
	StatusReviewing       Status = "REVIEWING"
	StatusScreening       Status = "SCREENING"
	StatusSubmitted       Status = "SUBMITTED"
	StatusFirstInterview  Status = "FIRST_INTERVIEW"
	StatusSecondInterview Status = "SECOND_INTERVIEW"
	StatusThirdInterview  Status = "THIRD_INTERVIEW"
	StatusBackgroundCheck Status = "BACKGROUND_CHECK"
	StatusOffered         Status = "OFFERED"
	StatusAccepted        Status = "ACCEPTED"
	StatusHired           Status = "HIRED"
	StatusRejected        Status = "REJECTED"
	StatusWithdrawn       Status = "WITHDRAWN"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEW":
		fallthrough
	case "REVIEWING":
		fallthrough
	case "SCREENING":
		fallthrough
	case "SUBMITTED":
		fallthrough
	case "FIRST_INTERVIEW":
		fallthrough
	case "SECOND_INTERVIEW":
		fallthrough
	case "THIRD_INTERVIEW":
		fallthrough
	case "BACKGROUND_CHECK":
		fallthrough
	case "OFFERED":
		fallthrough
	case "ACCEPTED":
		fallthrough
	case "HIRED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "WITHDRAWN":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type AtsApplication struct {
	AppliedAt      *time.Time                 `json:"applied_at,omitempty"`
	CandidateID    *string                    `json:"candidate_id,omitempty"`
	CreatedAt      *time.Time                 `json:"created_at,omitempty"`
	ID             *string                    `json:"id,omitempty"`
	JobID          *string                    `json:"job_id,omitempty"`
	Raw            *PropertyAtsApplicationRaw `json:"raw,omitempty"`
	RejectedAt     *time.Time                 `json:"rejected_at,omitempty"`
	RejectedReason *string                    `json:"rejected_reason,omitempty"`
	Source         *string                    `json:"source,omitempty"`
	Status         *Status                    `json:"status,omitempty"`
	UpdatedAt      *time.Time                 `json:"updated_at,omitempty"`
}

func (a AtsApplication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AtsApplication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AtsApplication) GetAppliedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.AppliedAt
}

func (o *AtsApplication) GetCandidateID() *string {
	if o == nil {
		return nil
	}
	return o.CandidateID
}

func (o *AtsApplication) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AtsApplication) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AtsApplication) GetJobID() *string {
	if o == nil {
		return nil
	}
	return o.JobID
}

func (o *AtsApplication) GetRaw() *PropertyAtsApplicationRaw {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *AtsApplication) GetRejectedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RejectedAt
}

func (o *AtsApplication) GetRejectedReason() *string {
	if o == nil {
		return nil
	}
	return o.RejectedReason
}

func (o *AtsApplication) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *AtsApplication) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *AtsApplication) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
