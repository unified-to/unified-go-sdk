// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type CommerceReviewStatus string

const (
	CommerceReviewStatusPending  CommerceReviewStatus = "PENDING"
	CommerceReviewStatusApproved CommerceReviewStatus = "APPROVED"
	CommerceReviewStatusRejected CommerceReviewStatus = "REJECTED"
	CommerceReviewStatusSpam     CommerceReviewStatus = "SPAM"
)

func (e CommerceReviewStatus) ToPointer() *CommerceReviewStatus {
	return &e
}
func (e *CommerceReviewStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "APPROVED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "SPAM":
		*e = CommerceReviewStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommerceReviewStatus: %v", v)
	}
}

type CommerceReview struct {
	AuthorAvatarURL *string                 `json:"author_avatar_url,omitempty"`
	AuthorEmail     *string                 `json:"author_email,omitempty"`
	AuthorLocation  *string                 `json:"author_location,omitempty"`
	AuthorName      *string                 `json:"author_name,omitempty"`
	Comments        []CommerceReviewComment `json:"comments,omitempty"`
	Content         *string                 `json:"content,omitempty"`
	CreatedAt       *time.Time              `json:"created_at,omitempty"`
	HelpfulVotes    *float64                `json:"helpful_votes,omitempty"`
	ID              *string                 `json:"id,omitempty"`
	IsFeatured      *bool                   `json:"is_featured,omitempty"`
	IsPublic        *bool                   `json:"is_public,omitempty"`
	IsVerified      *bool                   `json:"is_verified,omitempty"`
	ItemID          string                  `json:"item_id"`
	ItemVariantID   *string                 `json:"item_variant_id,omitempty"`
	// Photosvideos attached to the review
	Media            []CommerceItemMedia   `json:"media,omitempty"`
	Metadata         []CommerceMetadata    `json:"metadata,omitempty"`
	Rating           *float64              `json:"rating,omitempty"`
	Raw              map[string]any        `json:"raw,omitempty"`
	Status           *CommerceReviewStatus `json:"status,omitempty"`
	Title            *string               `json:"title,omitempty"`
	UnhelpfulVotes   *float64              `json:"unhelpful_votes,omitempty"`
	UpdatedAt        *time.Time            `json:"updated_at,omitempty"`
	VerifiedPurchase *bool                 `json:"verified_purchase,omitempty"`
}

func (c CommerceReview) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CommerceReview) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CommerceReview) GetAuthorAvatarURL() *string {
	if o == nil {
		return nil
	}
	return o.AuthorAvatarURL
}

func (o *CommerceReview) GetAuthorEmail() *string {
	if o == nil {
		return nil
	}
	return o.AuthorEmail
}

func (o *CommerceReview) GetAuthorLocation() *string {
	if o == nil {
		return nil
	}
	return o.AuthorLocation
}

func (o *CommerceReview) GetAuthorName() *string {
	if o == nil {
		return nil
	}
	return o.AuthorName
}

func (o *CommerceReview) GetComments() []CommerceReviewComment {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *CommerceReview) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *CommerceReview) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CommerceReview) GetHelpfulVotes() *float64 {
	if o == nil {
		return nil
	}
	return o.HelpfulVotes
}

func (o *CommerceReview) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CommerceReview) GetIsFeatured() *bool {
	if o == nil {
		return nil
	}
	return o.IsFeatured
}

func (o *CommerceReview) GetIsPublic() *bool {
	if o == nil {
		return nil
	}
	return o.IsPublic
}

func (o *CommerceReview) GetIsVerified() *bool {
	if o == nil {
		return nil
	}
	return o.IsVerified
}

func (o *CommerceReview) GetItemID() string {
	if o == nil {
		return ""
	}
	return o.ItemID
}

func (o *CommerceReview) GetItemVariantID() *string {
	if o == nil {
		return nil
	}
	return o.ItemVariantID
}

func (o *CommerceReview) GetMedia() []CommerceItemMedia {
	if o == nil {
		return nil
	}
	return o.Media
}

func (o *CommerceReview) GetMetadata() []CommerceMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CommerceReview) GetRating() *float64 {
	if o == nil {
		return nil
	}
	return o.Rating
}

func (o *CommerceReview) GetRaw() map[string]any {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *CommerceReview) GetStatus() *CommerceReviewStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CommerceReview) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CommerceReview) GetUnhelpfulVotes() *float64 {
	if o == nil {
		return nil
	}
	return o.UnhelpfulVotes
}

func (o *CommerceReview) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CommerceReview) GetVerifiedPurchase() *bool {
	if o == nil {
		return nil
	}
	return o.VerifiedPurchase
}
