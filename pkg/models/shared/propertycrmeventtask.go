// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type Priority string

const (
	PriorityHigh   Priority = "HIGH"
	PriorityMedium Priority = "MEDIUM"
	PriorityLow    Priority = "LOW"
)

func (e Priority) ToPointer() *Priority {
	return &e
}

type PropertyCrmEventTaskStatus string

const (
	PropertyCrmEventTaskStatusCompleted      PropertyCrmEventTaskStatus = "COMPLETED"
	PropertyCrmEventTaskStatusNotStarted     PropertyCrmEventTaskStatus = "NOT_STARTED"
	PropertyCrmEventTaskStatusWorkInProgress PropertyCrmEventTaskStatus = "WORK_IN_PROGRESS"
	PropertyCrmEventTaskStatusDeferred       PropertyCrmEventTaskStatus = "DEFERRED"
)

func (e PropertyCrmEventTaskStatus) ToPointer() *PropertyCrmEventTaskStatus {
	return &e
}

// PropertyCrmEventTask - The task object, when type = task
type PropertyCrmEventTask struct {
	Description *string                     `json:"description,omitempty"`
	DueAt       *time.Time                  `json:"due_at,omitempty"`
	Name        *string                     `json:"name,omitempty"`
	Priority    *Priority                   `json:"priority,omitempty"`
	Status      *PropertyCrmEventTaskStatus `json:"status,omitempty"`
}

func (p PropertyCrmEventTask) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PropertyCrmEventTask) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *PropertyCrmEventTask) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PropertyCrmEventTask) GetDueAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DueAt
}

func (o *PropertyCrmEventTask) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PropertyCrmEventTask) GetPriority() *Priority {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *PropertyCrmEventTask) GetStatus() *PropertyCrmEventTaskStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
