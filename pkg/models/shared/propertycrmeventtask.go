// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type PropertyCrmEventTaskStatus string

const (
	PropertyCrmEventTaskStatusCompleted      PropertyCrmEventTaskStatus = "COMPLETED"
	PropertyCrmEventTaskStatusNotStarted     PropertyCrmEventTaskStatus = "NOT_STARTED"
	PropertyCrmEventTaskStatusWorkInProgress PropertyCrmEventTaskStatus = "WORK_IN_PROGRESS"
	PropertyCrmEventTaskStatusDeferred       PropertyCrmEventTaskStatus = "DEFERRED"
)

func (e PropertyCrmEventTaskStatus) ToPointer() *PropertyCrmEventTaskStatus {
	return &e
}

func (e *PropertyCrmEventTaskStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPLETED":
		fallthrough
	case "NOT_STARTED":
		fallthrough
	case "WORK_IN_PROGRESS":
		fallthrough
	case "DEFERRED":
		*e = PropertyCrmEventTaskStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyCrmEventTaskStatus: %v", v)
	}
}

// PropertyCrmEventTask - The task object, when type = task
type PropertyCrmEventTask struct {
	Description *string                     `json:"description,omitempty"`
	DueAt       *time.Time                  `json:"due_at,omitempty"`
	Name        *string                     `json:"name,omitempty"`
	Status      *PropertyCrmEventTaskStatus `json:"status,omitempty"`
}

func (p PropertyCrmEventTask) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PropertyCrmEventTask) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PropertyCrmEventTask) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PropertyCrmEventTask) GetDueAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DueAt
}

func (o *PropertyCrmEventTask) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PropertyCrmEventTask) GetStatus() *PropertyCrmEventTaskStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
