// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
)

type KmsPageMetadata1 struct {
}

func (k KmsPageMetadata1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KmsPageMetadata1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, nil); err != nil {
		return err
	}
	return nil
}

type KmsPageMetadata5Type string

const (
	KmsPageMetadata5TypeKmsPageMetadata1 KmsPageMetadata5Type = "KmsPageMetadata_1"
	KmsPageMetadata5TypeStr              KmsPageMetadata5Type = "str"
	KmsPageMetadata5TypeNumber           KmsPageMetadata5Type = "number"
	KmsPageMetadata5TypeBoolean          KmsPageMetadata5Type = "boolean"
)

type KmsPageMetadata5 struct {
	KmsPageMetadata1 *KmsPageMetadata1 `queryParam:"inline" name:"five"`
	Str              *string           `queryParam:"inline" name:"five"`
	Number           *float64          `queryParam:"inline" name:"five"`
	Boolean          *bool             `queryParam:"inline" name:"five"`

	Type KmsPageMetadata5Type
}

func CreateKmsPageMetadata5KmsPageMetadata1(kmsPageMetadata1 KmsPageMetadata1) KmsPageMetadata5 {
	typ := KmsPageMetadata5TypeKmsPageMetadata1

	return KmsPageMetadata5{
		KmsPageMetadata1: &kmsPageMetadata1,
		Type:             typ,
	}
}

func CreateKmsPageMetadata5Str(str string) KmsPageMetadata5 {
	typ := KmsPageMetadata5TypeStr

	return KmsPageMetadata5{
		Str:  &str,
		Type: typ,
	}
}

func CreateKmsPageMetadata5Number(number float64) KmsPageMetadata5 {
	typ := KmsPageMetadata5TypeNumber

	return KmsPageMetadata5{
		Number: &number,
		Type:   typ,
	}
}

func CreateKmsPageMetadata5Boolean(boolean bool) KmsPageMetadata5 {
	typ := KmsPageMetadata5TypeBoolean

	return KmsPageMetadata5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *KmsPageMetadata5) UnmarshalJSON(data []byte) error {

	var kmsPageMetadata1 KmsPageMetadata1 = KmsPageMetadata1{}
	if err := utils.UnmarshalJSON(data, &kmsPageMetadata1, "", true, nil); err == nil {
		u.KmsPageMetadata1 = &kmsPageMetadata1
		u.Type = KmsPageMetadata5TypeKmsPageMetadata1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = KmsPageMetadata5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = KmsPageMetadata5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = KmsPageMetadata5TypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for KmsPageMetadata5", string(data))
}

func (u KmsPageMetadata5) MarshalJSON() ([]byte, error) {
	if u.KmsPageMetadata1 != nil {
		return utils.MarshalJSON(u.KmsPageMetadata1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type KmsPageMetadata5: all fields are null")
}

type KmsPageMetadataExtraDataType string

const (
	KmsPageMetadataExtraDataTypeMapOfAny                KmsPageMetadataExtraDataType = "mapOfAny"
	KmsPageMetadataExtraDataTypeStr                     KmsPageMetadataExtraDataType = "str"
	KmsPageMetadataExtraDataTypeNumber                  KmsPageMetadataExtraDataType = "number"
	KmsPageMetadataExtraDataTypeBoolean                 KmsPageMetadataExtraDataType = "boolean"
	KmsPageMetadataExtraDataTypeArrayOfKmsPageMetadata5 KmsPageMetadataExtraDataType = "arrayOfKmsPageMetadata5"
)

type KmsPageMetadataExtraData struct {
	MapOfAny                map[string]any     `queryParam:"inline" name:"extra_data"`
	Str                     *string            `queryParam:"inline" name:"extra_data"`
	Number                  *float64           `queryParam:"inline" name:"extra_data"`
	Boolean                 *bool              `queryParam:"inline" name:"extra_data"`
	ArrayOfKmsPageMetadata5 []KmsPageMetadata5 `queryParam:"inline" name:"extra_data"`

	Type KmsPageMetadataExtraDataType
}

func CreateKmsPageMetadataExtraDataMapOfAny(mapOfAny map[string]any) KmsPageMetadataExtraData {
	typ := KmsPageMetadataExtraDataTypeMapOfAny

	return KmsPageMetadataExtraData{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateKmsPageMetadataExtraDataStr(str string) KmsPageMetadataExtraData {
	typ := KmsPageMetadataExtraDataTypeStr

	return KmsPageMetadataExtraData{
		Str:  &str,
		Type: typ,
	}
}

func CreateKmsPageMetadataExtraDataNumber(number float64) KmsPageMetadataExtraData {
	typ := KmsPageMetadataExtraDataTypeNumber

	return KmsPageMetadataExtraData{
		Number: &number,
		Type:   typ,
	}
}

func CreateKmsPageMetadataExtraDataBoolean(boolean bool) KmsPageMetadataExtraData {
	typ := KmsPageMetadataExtraDataTypeBoolean

	return KmsPageMetadataExtraData{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateKmsPageMetadataExtraDataArrayOfKmsPageMetadata5(arrayOfKmsPageMetadata5 []KmsPageMetadata5) KmsPageMetadataExtraData {
	typ := KmsPageMetadataExtraDataTypeArrayOfKmsPageMetadata5

	return KmsPageMetadataExtraData{
		ArrayOfKmsPageMetadata5: arrayOfKmsPageMetadata5,
		Type:                    typ,
	}
}

func (u *KmsPageMetadataExtraData) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = KmsPageMetadataExtraDataTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = KmsPageMetadataExtraDataTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = KmsPageMetadataExtraDataTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = KmsPageMetadataExtraDataTypeBoolean
		return nil
	}

	var arrayOfKmsPageMetadata5 []KmsPageMetadata5 = []KmsPageMetadata5{}
	if err := utils.UnmarshalJSON(data, &arrayOfKmsPageMetadata5, "", true, nil); err == nil {
		u.ArrayOfKmsPageMetadata5 = arrayOfKmsPageMetadata5
		u.Type = KmsPageMetadataExtraDataTypeArrayOfKmsPageMetadata5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for KmsPageMetadataExtraData", string(data))
}

func (u KmsPageMetadataExtraData) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfKmsPageMetadata5 != nil {
		return utils.MarshalJSON(u.ArrayOfKmsPageMetadata5, "", true)
	}

	return nil, errors.New("could not marshal union type KmsPageMetadataExtraData: all fields are null")
}

type KmsPageMetadataFormat string

const (
	KmsPageMetadataFormatText           KmsPageMetadataFormat = "TEXT"
	KmsPageMetadataFormatNumber         KmsPageMetadataFormat = "NUMBER"
	KmsPageMetadataFormatDate           KmsPageMetadataFormat = "DATE"
	KmsPageMetadataFormatBoolean        KmsPageMetadataFormat = "BOOLEAN"
	KmsPageMetadataFormatFile           KmsPageMetadataFormat = "FILE"
	KmsPageMetadataFormatTextarea       KmsPageMetadataFormat = "TEXTAREA"
	KmsPageMetadataFormatSingleSelect   KmsPageMetadataFormat = "SINGLE_SELECT"
	KmsPageMetadataFormatMultipleSelect KmsPageMetadataFormat = "MULTIPLE_SELECT"
	KmsPageMetadataFormatMeasurement    KmsPageMetadataFormat = "MEASUREMENT"
	KmsPageMetadataFormatPrice          KmsPageMetadataFormat = "PRICE"
	KmsPageMetadataFormatYesNo          KmsPageMetadataFormat = "YES_NO"
	KmsPageMetadataFormatCurrency       KmsPageMetadataFormat = "CURRENCY"
	KmsPageMetadataFormatURL            KmsPageMetadataFormat = "URL"
)

func (e KmsPageMetadataFormat) ToPointer() *KmsPageMetadataFormat {
	return &e
}

type KmsPageMetadataSchemas1 struct {
}

func (k KmsPageMetadataSchemas1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KmsPageMetadataSchemas1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, nil); err != nil {
		return err
	}
	return nil
}

type KmsPageMetadataSchemas5Type string

const (
	KmsPageMetadataSchemas5TypeKmsPageMetadataSchemas1 KmsPageMetadataSchemas5Type = "KmsPageMetadata_Schemas_1"
	KmsPageMetadataSchemas5TypeStr                     KmsPageMetadataSchemas5Type = "str"
	KmsPageMetadataSchemas5TypeNumber                  KmsPageMetadataSchemas5Type = "number"
	KmsPageMetadataSchemas5TypeBoolean                 KmsPageMetadataSchemas5Type = "boolean"
)

type KmsPageMetadataSchemas5 struct {
	KmsPageMetadataSchemas1 *KmsPageMetadataSchemas1 `queryParam:"inline" name:"five"`
	Str                     *string                  `queryParam:"inline" name:"five"`
	Number                  *float64                 `queryParam:"inline" name:"five"`
	Boolean                 *bool                    `queryParam:"inline" name:"five"`

	Type KmsPageMetadataSchemas5Type
}

func CreateKmsPageMetadataSchemas5KmsPageMetadataSchemas1(kmsPageMetadataSchemas1 KmsPageMetadataSchemas1) KmsPageMetadataSchemas5 {
	typ := KmsPageMetadataSchemas5TypeKmsPageMetadataSchemas1

	return KmsPageMetadataSchemas5{
		KmsPageMetadataSchemas1: &kmsPageMetadataSchemas1,
		Type:                    typ,
	}
}

func CreateKmsPageMetadataSchemas5Str(str string) KmsPageMetadataSchemas5 {
	typ := KmsPageMetadataSchemas5TypeStr

	return KmsPageMetadataSchemas5{
		Str:  &str,
		Type: typ,
	}
}

func CreateKmsPageMetadataSchemas5Number(number float64) KmsPageMetadataSchemas5 {
	typ := KmsPageMetadataSchemas5TypeNumber

	return KmsPageMetadataSchemas5{
		Number: &number,
		Type:   typ,
	}
}

func CreateKmsPageMetadataSchemas5Boolean(boolean bool) KmsPageMetadataSchemas5 {
	typ := KmsPageMetadataSchemas5TypeBoolean

	return KmsPageMetadataSchemas5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *KmsPageMetadataSchemas5) UnmarshalJSON(data []byte) error {

	var kmsPageMetadataSchemas1 KmsPageMetadataSchemas1 = KmsPageMetadataSchemas1{}
	if err := utils.UnmarshalJSON(data, &kmsPageMetadataSchemas1, "", true, nil); err == nil {
		u.KmsPageMetadataSchemas1 = &kmsPageMetadataSchemas1
		u.Type = KmsPageMetadataSchemas5TypeKmsPageMetadataSchemas1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = KmsPageMetadataSchemas5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = KmsPageMetadataSchemas5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = KmsPageMetadataSchemas5TypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for KmsPageMetadataSchemas5", string(data))
}

func (u KmsPageMetadataSchemas5) MarshalJSON() ([]byte, error) {
	if u.KmsPageMetadataSchemas1 != nil {
		return utils.MarshalJSON(u.KmsPageMetadataSchemas1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type KmsPageMetadataSchemas5: all fields are null")
}

type KmsPageMetadataValueType string

const (
	KmsPageMetadataValueTypeMapOfAny                       KmsPageMetadataValueType = "mapOfAny"
	KmsPageMetadataValueTypeStr                            KmsPageMetadataValueType = "str"
	KmsPageMetadataValueTypeNumber                         KmsPageMetadataValueType = "number"
	KmsPageMetadataValueTypeBoolean                        KmsPageMetadataValueType = "boolean"
	KmsPageMetadataValueTypeArrayOfKmsPageMetadataSchemas5 KmsPageMetadataValueType = "arrayOfKmsPageMetadataSchemas5"
)

type KmsPageMetadataValue struct {
	MapOfAny                       map[string]any            `queryParam:"inline" name:"value"`
	Str                            *string                   `queryParam:"inline" name:"value"`
	Number                         *float64                  `queryParam:"inline" name:"value"`
	Boolean                        *bool                     `queryParam:"inline" name:"value"`
	ArrayOfKmsPageMetadataSchemas5 []KmsPageMetadataSchemas5 `queryParam:"inline" name:"value"`

	Type KmsPageMetadataValueType
}

func CreateKmsPageMetadataValueMapOfAny(mapOfAny map[string]any) KmsPageMetadataValue {
	typ := KmsPageMetadataValueTypeMapOfAny

	return KmsPageMetadataValue{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateKmsPageMetadataValueStr(str string) KmsPageMetadataValue {
	typ := KmsPageMetadataValueTypeStr

	return KmsPageMetadataValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateKmsPageMetadataValueNumber(number float64) KmsPageMetadataValue {
	typ := KmsPageMetadataValueTypeNumber

	return KmsPageMetadataValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateKmsPageMetadataValueBoolean(boolean bool) KmsPageMetadataValue {
	typ := KmsPageMetadataValueTypeBoolean

	return KmsPageMetadataValue{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateKmsPageMetadataValueArrayOfKmsPageMetadataSchemas5(arrayOfKmsPageMetadataSchemas5 []KmsPageMetadataSchemas5) KmsPageMetadataValue {
	typ := KmsPageMetadataValueTypeArrayOfKmsPageMetadataSchemas5

	return KmsPageMetadataValue{
		ArrayOfKmsPageMetadataSchemas5: arrayOfKmsPageMetadataSchemas5,
		Type:                           typ,
	}
}

func (u *KmsPageMetadataValue) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = KmsPageMetadataValueTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = KmsPageMetadataValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = KmsPageMetadataValueTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = KmsPageMetadataValueTypeBoolean
		return nil
	}

	var arrayOfKmsPageMetadataSchemas5 []KmsPageMetadataSchemas5 = []KmsPageMetadataSchemas5{}
	if err := utils.UnmarshalJSON(data, &arrayOfKmsPageMetadataSchemas5, "", true, nil); err == nil {
		u.ArrayOfKmsPageMetadataSchemas5 = arrayOfKmsPageMetadataSchemas5
		u.Type = KmsPageMetadataValueTypeArrayOfKmsPageMetadataSchemas5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for KmsPageMetadataValue", string(data))
}

func (u KmsPageMetadataValue) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfKmsPageMetadataSchemas5 != nil {
		return utils.MarshalJSON(u.ArrayOfKmsPageMetadataSchemas5, "", true)
	}

	return nil, errors.New("could not marshal union type KmsPageMetadataValue: all fields are null")
}

type KmsPageMetadata struct {
	ExtraData *KmsPageMetadataExtraData `json:"extra_data,omitempty"`
	Format    *KmsPageMetadataFormat    `json:"format,omitempty"`
	ID        *string                   `json:"id,omitempty"`
	Key       *string                   `json:"key,omitempty"`
	Namespace *string                   `json:"namespace,omitempty"`
	Slug      *string                   `json:"slug,omitempty"`
	Type      *string                   `json:"type,omitempty"`
	Value     *KmsPageMetadataValue     `json:"value,omitempty"`
}

func (k *KmsPageMetadata) GetExtraData() *KmsPageMetadataExtraData {
	if k == nil {
		return nil
	}
	return k.ExtraData
}

func (k *KmsPageMetadata) GetFormat() *KmsPageMetadataFormat {
	if k == nil {
		return nil
	}
	return k.Format
}

func (k *KmsPageMetadata) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

func (k *KmsPageMetadata) GetKey() *string {
	if k == nil {
		return nil
	}
	return k.Key
}

func (k *KmsPageMetadata) GetNamespace() *string {
	if k == nil {
		return nil
	}
	return k.Namespace
}

func (k *KmsPageMetadata) GetSlug() *string {
	if k == nil {
		return nil
	}
	return k.Slug
}

func (k *KmsPageMetadata) GetType() *string {
	if k == nil {
		return nil
	}
	return k.Type
}

func (k *KmsPageMetadata) GetValue() *KmsPageMetadataValue {
	if k == nil {
		return nil
	}
	return k.Value
}
