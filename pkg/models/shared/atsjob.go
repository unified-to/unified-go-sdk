// Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type EmploymentType string

const (
	EmploymentTypeFullTime   EmploymentType = "FULL_TIME"
	EmploymentTypePartTime   EmploymentType = "PART_TIME"
	EmploymentTypeContractor EmploymentType = "CONTRACTOR"
	EmploymentTypeIntern     EmploymentType = "INTERN"
	EmploymentTypeConsultant EmploymentType = "CONSULTANT"
	EmploymentTypeVolunteer  EmploymentType = "VOLUNTEER"
	EmploymentTypeCasual     EmploymentType = "CASUAL"
	EmploymentTypeSeasonal   EmploymentType = "SEASONAL"
	EmploymentTypeFreelance  EmploymentType = "FREELANCE"
	EmploymentTypeOther      EmploymentType = "OTHER"
)

func (e EmploymentType) ToPointer() *EmploymentType {
	return &e
}
func (e *EmploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FULL_TIME":
		fallthrough
	case "PART_TIME":
		fallthrough
	case "CONTRACTOR":
		fallthrough
	case "INTERN":
		fallthrough
	case "CONSULTANT":
		fallthrough
	case "VOLUNTEER":
		fallthrough
	case "CASUAL":
		fallthrough
	case "SEASONAL":
		fallthrough
	case "FREELANCE":
		fallthrough
	case "OTHER":
		*e = EmploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmploymentType: %v", v)
	}
}

type AtsJobStatus string

const (
	AtsJobStatusArchived AtsJobStatus = "ARCHIVED"
	AtsJobStatusPending  AtsJobStatus = "PENDING"
	AtsJobStatusDraft    AtsJobStatus = "DRAFT"
	AtsJobStatusOpen     AtsJobStatus = "OPEN"
	AtsJobStatusClosed   AtsJobStatus = "CLOSED"
)

func (e AtsJobStatus) ToPointer() *AtsJobStatus {
	return &e
}
func (e *AtsJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ARCHIVED":
		fallthrough
	case "PENDING":
		fallthrough
	case "DRAFT":
		fallthrough
	case "OPEN":
		fallthrough
	case "CLOSED":
		*e = AtsJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AtsJobStatus: %v", v)
	}
}

type AtsJob struct {
	Addresses        []AtsAddress      `json:"addresses,omitempty"`
	ClosedAt         *time.Time        `json:"closed_at,omitempty"`
	CompanyID        *string           `json:"company_id,omitempty"`
	Compensation     []AtsCompensation `json:"compensation,omitempty"`
	CreatedAt        *time.Time        `json:"created_at,omitempty"`
	Departments      []string          `json:"departments,omitempty"`
	Description      *string           `json:"description,omitempty"`
	EmploymentType   *EmploymentType   `json:"employment_type,omitempty"`
	HiringManagerIds []string          `json:"hiring_manager_ids,omitempty"`
	ID               *string           `json:"id,omitempty"`
	LanguageLocale   *string           `json:"language_locale,omitempty"`
	Name             *string           `json:"name,omitempty"`
	NumberOfOpenings *float64          `json:"number_of_openings,omitempty"`
	// URLs for pages containing public listings for the job
	PublicJobUrls []string         `json:"public_job_urls,omitempty"`
	Questions     []AtsJobQuestion `json:"questions,omitempty"`
	Raw           map[string]any   `json:"raw,omitempty"`
	RecruiterIds  []string         `json:"recruiter_ids,omitempty"`
	Remote        *bool            `json:"remote,omitempty"`
	Status        *AtsJobStatus    `json:"status,omitempty"`
	UpdatedAt     *time.Time       `json:"updated_at,omitempty"`
}

func (a AtsJob) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AtsJob) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AtsJob) GetAddresses() []AtsAddress {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *AtsJob) GetClosedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ClosedAt
}

func (o *AtsJob) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *AtsJob) GetCompensation() []AtsCompensation {
	if o == nil {
		return nil
	}
	return o.Compensation
}

func (o *AtsJob) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AtsJob) GetDepartments() []string {
	if o == nil {
		return nil
	}
	return o.Departments
}

func (o *AtsJob) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *AtsJob) GetEmploymentType() *EmploymentType {
	if o == nil {
		return nil
	}
	return o.EmploymentType
}

func (o *AtsJob) GetHiringManagerIds() []string {
	if o == nil {
		return nil
	}
	return o.HiringManagerIds
}

func (o *AtsJob) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AtsJob) GetLanguageLocale() *string {
	if o == nil {
		return nil
	}
	return o.LanguageLocale
}

func (o *AtsJob) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AtsJob) GetNumberOfOpenings() *float64 {
	if o == nil {
		return nil
	}
	return o.NumberOfOpenings
}

func (o *AtsJob) GetPublicJobUrls() []string {
	if o == nil {
		return nil
	}
	return o.PublicJobUrls
}

func (o *AtsJob) GetQuestions() []AtsJobQuestion {
	if o == nil {
		return nil
	}
	return o.Questions
}

func (o *AtsJob) GetRaw() map[string]any {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *AtsJob) GetRecruiterIds() []string {
	if o == nil {
		return nil
	}
	return o.RecruiterIds
}

func (o *AtsJob) GetRemote() *bool {
	if o == nil {
		return nil
	}
	return o.Remote
}

func (o *AtsJob) GetStatus() *AtsJobStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *AtsJob) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
