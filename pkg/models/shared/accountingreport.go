// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type AccountingReportType string

const (
	AccountingReportTypeTrialBalance  AccountingReportType = "TRIAL_BALANCE"
	AccountingReportTypeBalanceSheet  AccountingReportType = "BALANCE_SHEET"
	AccountingReportTypeProfitAndLoss AccountingReportType = "PROFIT_AND_LOSS"
)

func (e AccountingReportType) ToPointer() *AccountingReportType {
	return &e
}
func (e *AccountingReportType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TRIAL_BALANCE":
		fallthrough
	case "BALANCE_SHEET":
		fallthrough
	case "PROFIT_AND_LOSS":
		*e = AccountingReportType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountingReportType: %v", v)
	}
}

type AccountingReport struct {
	AccountID *string               `json:"account_id,omitempty"`
	Amount    *float64              `json:"amount,omitempty"`
	ContactID *string               `json:"contact_id,omitempty"`
	CreatedAt *time.Time            `json:"created_at,omitempty"`
	Group     *string               `json:"group,omitempty"`
	ID        *string               `json:"id,omitempty"`
	Raw       map[string]any        `json:"raw,omitempty"`
	Subgroup  *string               `json:"subgroup,omitempty"`
	Type      *AccountingReportType `json:"type,omitempty"`
	UpdatedAt *time.Time            `json:"updated_at,omitempty"`
}

func (a AccountingReport) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccountingReport) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AccountingReport) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *AccountingReport) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *AccountingReport) GetContactID() *string {
	if o == nil {
		return nil
	}
	return o.ContactID
}

func (o *AccountingReport) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AccountingReport) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *AccountingReport) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccountingReport) GetRaw() map[string]any {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *AccountingReport) GetSubgroup() *string {
	if o == nil {
		return nil
	}
	return o.Subgroup
}

func (o *AccountingReport) GetType() *AccountingReportType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AccountingReport) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
