// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
)

type CommerceMetadata1 struct {
}

func (c CommerceMetadata1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CommerceMetadata1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

type CommerceMetadata5Type string

const (
	CommerceMetadata5TypeCommerceMetadata1 CommerceMetadata5Type = "CommerceMetadata_1"
	CommerceMetadata5TypeStr               CommerceMetadata5Type = "str"
	CommerceMetadata5TypeNumber            CommerceMetadata5Type = "number"
	CommerceMetadata5TypeBoolean           CommerceMetadata5Type = "boolean"
)

type CommerceMetadata5 struct {
	CommerceMetadata1 *CommerceMetadata1 `queryParam:"inline" name:"five"`
	Str               *string            `queryParam:"inline" name:"five"`
	Number            *float64           `queryParam:"inline" name:"five"`
	Boolean           *bool              `queryParam:"inline" name:"five"`

	Type CommerceMetadata5Type
}

func CreateCommerceMetadata5CommerceMetadata1(commerceMetadata1 CommerceMetadata1) CommerceMetadata5 {
	typ := CommerceMetadata5TypeCommerceMetadata1

	return CommerceMetadata5{
		CommerceMetadata1: &commerceMetadata1,
		Type:              typ,
	}
}

func CreateCommerceMetadata5Str(str string) CommerceMetadata5 {
	typ := CommerceMetadata5TypeStr

	return CommerceMetadata5{
		Str:  &str,
		Type: typ,
	}
}

func CreateCommerceMetadata5Number(number float64) CommerceMetadata5 {
	typ := CommerceMetadata5TypeNumber

	return CommerceMetadata5{
		Number: &number,
		Type:   typ,
	}
}

func CreateCommerceMetadata5Boolean(boolean bool) CommerceMetadata5 {
	typ := CommerceMetadata5TypeBoolean

	return CommerceMetadata5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CommerceMetadata5) UnmarshalJSON(data []byte) error {

	var commerceMetadata1 CommerceMetadata1 = CommerceMetadata1{}
	if err := utils.UnmarshalJSON(data, &commerceMetadata1, "", true, nil); err == nil {
		u.CommerceMetadata1 = &commerceMetadata1
		u.Type = CommerceMetadata5TypeCommerceMetadata1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CommerceMetadata5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = CommerceMetadata5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = CommerceMetadata5TypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CommerceMetadata5", string(data))
}

func (u CommerceMetadata5) MarshalJSON() ([]byte, error) {
	if u.CommerceMetadata1 != nil {
		return utils.MarshalJSON(u.CommerceMetadata1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CommerceMetadata5: all fields are null")
}

type CommerceMetadataExtraDataType string

const (
	CommerceMetadataExtraDataTypeMapOfAny                 CommerceMetadataExtraDataType = "mapOfAny"
	CommerceMetadataExtraDataTypeStr                      CommerceMetadataExtraDataType = "str"
	CommerceMetadataExtraDataTypeNumber                   CommerceMetadataExtraDataType = "number"
	CommerceMetadataExtraDataTypeBoolean                  CommerceMetadataExtraDataType = "boolean"
	CommerceMetadataExtraDataTypeArrayOfCommerceMetadata5 CommerceMetadataExtraDataType = "arrayOfCommerceMetadata5"
)

type CommerceMetadataExtraData struct {
	MapOfAny                 map[string]any      `queryParam:"inline" name:"extra_data"`
	Str                      *string             `queryParam:"inline" name:"extra_data"`
	Number                   *float64            `queryParam:"inline" name:"extra_data"`
	Boolean                  *bool               `queryParam:"inline" name:"extra_data"`
	ArrayOfCommerceMetadata5 []CommerceMetadata5 `queryParam:"inline" name:"extra_data"`

	Type CommerceMetadataExtraDataType
}

func CreateCommerceMetadataExtraDataMapOfAny(mapOfAny map[string]any) CommerceMetadataExtraData {
	typ := CommerceMetadataExtraDataTypeMapOfAny

	return CommerceMetadataExtraData{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCommerceMetadataExtraDataStr(str string) CommerceMetadataExtraData {
	typ := CommerceMetadataExtraDataTypeStr

	return CommerceMetadataExtraData{
		Str:  &str,
		Type: typ,
	}
}

func CreateCommerceMetadataExtraDataNumber(number float64) CommerceMetadataExtraData {
	typ := CommerceMetadataExtraDataTypeNumber

	return CommerceMetadataExtraData{
		Number: &number,
		Type:   typ,
	}
}

func CreateCommerceMetadataExtraDataBoolean(boolean bool) CommerceMetadataExtraData {
	typ := CommerceMetadataExtraDataTypeBoolean

	return CommerceMetadataExtraData{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateCommerceMetadataExtraDataArrayOfCommerceMetadata5(arrayOfCommerceMetadata5 []CommerceMetadata5) CommerceMetadataExtraData {
	typ := CommerceMetadataExtraDataTypeArrayOfCommerceMetadata5

	return CommerceMetadataExtraData{
		ArrayOfCommerceMetadata5: arrayOfCommerceMetadata5,
		Type:                     typ,
	}
}

func (u *CommerceMetadataExtraData) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CommerceMetadataExtraDataTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CommerceMetadataExtraDataTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = CommerceMetadataExtraDataTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = CommerceMetadataExtraDataTypeBoolean
		return nil
	}

	var arrayOfCommerceMetadata5 []CommerceMetadata5 = []CommerceMetadata5{}
	if err := utils.UnmarshalJSON(data, &arrayOfCommerceMetadata5, "", true, nil); err == nil {
		u.ArrayOfCommerceMetadata5 = arrayOfCommerceMetadata5
		u.Type = CommerceMetadataExtraDataTypeArrayOfCommerceMetadata5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CommerceMetadataExtraData", string(data))
}

func (u CommerceMetadataExtraData) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfCommerceMetadata5 != nil {
		return utils.MarshalJSON(u.ArrayOfCommerceMetadata5, "", true)
	}

	return nil, errors.New("could not marshal union type CommerceMetadataExtraData: all fields are null")
}

type CommerceMetadataFormat string

const (
	CommerceMetadataFormatText           CommerceMetadataFormat = "TEXT"
	CommerceMetadataFormatNumber         CommerceMetadataFormat = "NUMBER"
	CommerceMetadataFormatDate           CommerceMetadataFormat = "DATE"
	CommerceMetadataFormatBoolean        CommerceMetadataFormat = "BOOLEAN"
	CommerceMetadataFormatFile           CommerceMetadataFormat = "FILE"
	CommerceMetadataFormatTextarea       CommerceMetadataFormat = "TEXTAREA"
	CommerceMetadataFormatSingleSelect   CommerceMetadataFormat = "SINGLE_SELECT"
	CommerceMetadataFormatMultipleSelect CommerceMetadataFormat = "MULTIPLE_SELECT"
	CommerceMetadataFormatMeasurement    CommerceMetadataFormat = "MEASUREMENT"
	CommerceMetadataFormatPrice          CommerceMetadataFormat = "PRICE"
	CommerceMetadataFormatYesNo          CommerceMetadataFormat = "YES_NO"
	CommerceMetadataFormatCurrency       CommerceMetadataFormat = "CURRENCY"
	CommerceMetadataFormatURL            CommerceMetadataFormat = "URL"
)

func (e CommerceMetadataFormat) ToPointer() *CommerceMetadataFormat {
	return &e
}

type CommerceMetadataSchemas1 struct {
}

func (c CommerceMetadataSchemas1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CommerceMetadataSchemas1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

type CommerceMetadataSchemas5Type string

const (
	CommerceMetadataSchemas5TypeCommerceMetadataSchemas1 CommerceMetadataSchemas5Type = "CommerceMetadata_Schemas_1"
	CommerceMetadataSchemas5TypeStr                      CommerceMetadataSchemas5Type = "str"
	CommerceMetadataSchemas5TypeNumber                   CommerceMetadataSchemas5Type = "number"
	CommerceMetadataSchemas5TypeBoolean                  CommerceMetadataSchemas5Type = "boolean"
)

type CommerceMetadataSchemas5 struct {
	CommerceMetadataSchemas1 *CommerceMetadataSchemas1 `queryParam:"inline" name:"five"`
	Str                      *string                   `queryParam:"inline" name:"five"`
	Number                   *float64                  `queryParam:"inline" name:"five"`
	Boolean                  *bool                     `queryParam:"inline" name:"five"`

	Type CommerceMetadataSchemas5Type
}

func CreateCommerceMetadataSchemas5CommerceMetadataSchemas1(commerceMetadataSchemas1 CommerceMetadataSchemas1) CommerceMetadataSchemas5 {
	typ := CommerceMetadataSchemas5TypeCommerceMetadataSchemas1

	return CommerceMetadataSchemas5{
		CommerceMetadataSchemas1: &commerceMetadataSchemas1,
		Type:                     typ,
	}
}

func CreateCommerceMetadataSchemas5Str(str string) CommerceMetadataSchemas5 {
	typ := CommerceMetadataSchemas5TypeStr

	return CommerceMetadataSchemas5{
		Str:  &str,
		Type: typ,
	}
}

func CreateCommerceMetadataSchemas5Number(number float64) CommerceMetadataSchemas5 {
	typ := CommerceMetadataSchemas5TypeNumber

	return CommerceMetadataSchemas5{
		Number: &number,
		Type:   typ,
	}
}

func CreateCommerceMetadataSchemas5Boolean(boolean bool) CommerceMetadataSchemas5 {
	typ := CommerceMetadataSchemas5TypeBoolean

	return CommerceMetadataSchemas5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CommerceMetadataSchemas5) UnmarshalJSON(data []byte) error {

	var commerceMetadataSchemas1 CommerceMetadataSchemas1 = CommerceMetadataSchemas1{}
	if err := utils.UnmarshalJSON(data, &commerceMetadataSchemas1, "", true, nil); err == nil {
		u.CommerceMetadataSchemas1 = &commerceMetadataSchemas1
		u.Type = CommerceMetadataSchemas5TypeCommerceMetadataSchemas1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CommerceMetadataSchemas5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = CommerceMetadataSchemas5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = CommerceMetadataSchemas5TypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CommerceMetadataSchemas5", string(data))
}

func (u CommerceMetadataSchemas5) MarshalJSON() ([]byte, error) {
	if u.CommerceMetadataSchemas1 != nil {
		return utils.MarshalJSON(u.CommerceMetadataSchemas1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CommerceMetadataSchemas5: all fields are null")
}

type CommerceMetadataValueType string

const (
	CommerceMetadataValueTypeMapOfAny                        CommerceMetadataValueType = "mapOfAny"
	CommerceMetadataValueTypeStr                             CommerceMetadataValueType = "str"
	CommerceMetadataValueTypeNumber                          CommerceMetadataValueType = "number"
	CommerceMetadataValueTypeBoolean                         CommerceMetadataValueType = "boolean"
	CommerceMetadataValueTypeArrayOfCommerceMetadataSchemas5 CommerceMetadataValueType = "arrayOfCommerceMetadataSchemas5"
)

type CommerceMetadataValue struct {
	MapOfAny                        map[string]any             `queryParam:"inline" name:"value"`
	Str                             *string                    `queryParam:"inline" name:"value"`
	Number                          *float64                   `queryParam:"inline" name:"value"`
	Boolean                         *bool                      `queryParam:"inline" name:"value"`
	ArrayOfCommerceMetadataSchemas5 []CommerceMetadataSchemas5 `queryParam:"inline" name:"value"`

	Type CommerceMetadataValueType
}

func CreateCommerceMetadataValueMapOfAny(mapOfAny map[string]any) CommerceMetadataValue {
	typ := CommerceMetadataValueTypeMapOfAny

	return CommerceMetadataValue{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCommerceMetadataValueStr(str string) CommerceMetadataValue {
	typ := CommerceMetadataValueTypeStr

	return CommerceMetadataValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateCommerceMetadataValueNumber(number float64) CommerceMetadataValue {
	typ := CommerceMetadataValueTypeNumber

	return CommerceMetadataValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateCommerceMetadataValueBoolean(boolean bool) CommerceMetadataValue {
	typ := CommerceMetadataValueTypeBoolean

	return CommerceMetadataValue{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateCommerceMetadataValueArrayOfCommerceMetadataSchemas5(arrayOfCommerceMetadataSchemas5 []CommerceMetadataSchemas5) CommerceMetadataValue {
	typ := CommerceMetadataValueTypeArrayOfCommerceMetadataSchemas5

	return CommerceMetadataValue{
		ArrayOfCommerceMetadataSchemas5: arrayOfCommerceMetadataSchemas5,
		Type:                            typ,
	}
}

func (u *CommerceMetadataValue) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CommerceMetadataValueTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CommerceMetadataValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = CommerceMetadataValueTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = CommerceMetadataValueTypeBoolean
		return nil
	}

	var arrayOfCommerceMetadataSchemas5 []CommerceMetadataSchemas5 = []CommerceMetadataSchemas5{}
	if err := utils.UnmarshalJSON(data, &arrayOfCommerceMetadataSchemas5, "", true, nil); err == nil {
		u.ArrayOfCommerceMetadataSchemas5 = arrayOfCommerceMetadataSchemas5
		u.Type = CommerceMetadataValueTypeArrayOfCommerceMetadataSchemas5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CommerceMetadataValue", string(data))
}

func (u CommerceMetadataValue) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfCommerceMetadataSchemas5 != nil {
		return utils.MarshalJSON(u.ArrayOfCommerceMetadataSchemas5, "", true)
	}

	return nil, errors.New("could not marshal union type CommerceMetadataValue: all fields are null")
}

type CommerceMetadata struct {
	ExtraData *CommerceMetadataExtraData `json:"extra_data,omitempty"`
	Format    *CommerceMetadataFormat    `json:"format,omitempty"`
	ID        *string                    `json:"id,omitempty"`
	Key       *string                    `json:"key,omitempty"`
	Namespace *string                    `json:"namespace,omitempty"`
	Slug      *string                    `json:"slug,omitempty"`
	Type      *string                    `json:"type,omitempty"`
	Value     *CommerceMetadataValue     `json:"value,omitempty"`
}

func (c *CommerceMetadata) GetExtraData() *CommerceMetadataExtraData {
	if c == nil {
		return nil
	}
	return c.ExtraData
}

func (c *CommerceMetadata) GetFormat() *CommerceMetadataFormat {
	if c == nil {
		return nil
	}
	return c.Format
}

func (c *CommerceMetadata) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CommerceMetadata) GetKey() *string {
	if c == nil {
		return nil
	}
	return c.Key
}

func (c *CommerceMetadata) GetNamespace() *string {
	if c == nil {
		return nil
	}
	return c.Namespace
}

func (c *CommerceMetadata) GetSlug() *string {
	if c == nil {
		return nil
	}
	return c.Slug
}

func (c *CommerceMetadata) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *CommerceMetadata) GetValue() *CommerceMetadataValue {
	if c == nil {
		return nil
	}
	return c.Value
}
