// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type Status string

const (
	StatusActive   Status = "ACTIVE"
	StatusArchived Status = "ARCHIVED"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "ARCHIVED":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type Type string

const (
	TypeAccountsPayable    Type = "ACCOUNTS_PAYABLE"
	TypeAccountsReceivable Type = "ACCOUNTS_RECEIVABLE"
	TypeBank               Type = "BANK"
	TypeCreditCard         Type = "CREDIT_CARD"
	TypeFixedAsset         Type = "FIXED_ASSET"
	TypeLiability          Type = "LIABILITY"
	TypeEquity             Type = "EQUITY"
	TypeExpense            Type = "EXPENSE"
	TypeRevenue            Type = "REVENUE"
	TypeOther              Type = "OTHER"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNTS_PAYABLE":
		fallthrough
	case "ACCOUNTS_RECEIVABLE":
		fallthrough
	case "BANK":
		fallthrough
	case "CREDIT_CARD":
		fallthrough
	case "FIXED_ASSET":
		fallthrough
	case "LIABILITY":
		fallthrough
	case "EQUITY":
		fallthrough
	case "EXPENSE":
		fallthrough
	case "REVENUE":
		fallthrough
	case "OTHER":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

// AccountingAccount - Chart of accounts
type AccountingAccount struct {
	Balance             *float64   `json:"balance,omitempty"`
	CreatedAt           *time.Time `json:"created_at,omitempty"`
	Currency            *string    `json:"currency,omitempty"`
	CustomerDefinedCode *string    `json:"customer_defined_code,omitempty"`
	Description         *string    `json:"description,omitempty"`
	ID                  *string    `json:"id,omitempty"`
	IsPayable           *bool      `json:"is_payable,omitempty"`
	Name                *string    `json:"name,omitempty"`
	ParentAccountID     *string    `json:"parent_account_id,omitempty"`
	// The original data from the integration's API
	Raw       map[string]any `json:"raw,omitempty"`
	Status    *Status        `json:"status,omitempty"`
	Type      *Type          `json:"type,omitempty"`
	UpdatedAt *time.Time     `json:"updated_at,omitempty"`
}

func (a AccountingAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccountingAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AccountingAccount) GetBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.Balance
}

func (o *AccountingAccount) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AccountingAccount) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *AccountingAccount) GetCustomerDefinedCode() *string {
	if o == nil {
		return nil
	}
	return o.CustomerDefinedCode
}

func (o *AccountingAccount) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *AccountingAccount) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccountingAccount) GetIsPayable() *bool {
	if o == nil {
		return nil
	}
	return o.IsPayable
}

func (o *AccountingAccount) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AccountingAccount) GetParentAccountID() *string {
	if o == nil {
		return nil
	}
	return o.ParentAccountID
}

func (o *AccountingAccount) GetRaw() map[string]any {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *AccountingAccount) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *AccountingAccount) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AccountingAccount) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
