// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CrmEmailType string

const (
	CrmEmailTypeWork  CrmEmailType = "WORK"
	CrmEmailTypeHome  CrmEmailType = "HOME"
	CrmEmailTypeOther CrmEmailType = "OTHER"
)

func (e CrmEmailType) ToPointer() *CrmEmailType {
	return &e
}
func (e *CrmEmailType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WORK":
		fallthrough
	case "HOME":
		fallthrough
	case "OTHER":
		*e = CrmEmailType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CrmEmailType: %v", v)
	}
}

type CrmEmail struct {
	Email *string       `json:"email,omitempty"`
	Type  *CrmEmailType `json:"type,omitempty"`
}

func (o *CrmEmail) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CrmEmail) GetType() *CrmEmailType {
	if o == nil {
		return nil
	}
	return o.Type
}
