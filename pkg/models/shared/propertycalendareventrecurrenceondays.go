// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PropertyCalendarEventRecurrenceOnDays string

const (
	PropertyCalendarEventRecurrenceOnDaysSu PropertyCalendarEventRecurrenceOnDays = "SU"
	PropertyCalendarEventRecurrenceOnDaysMo PropertyCalendarEventRecurrenceOnDays = "MO"
	PropertyCalendarEventRecurrenceOnDaysTu PropertyCalendarEventRecurrenceOnDays = "TU"
	PropertyCalendarEventRecurrenceOnDaysWe PropertyCalendarEventRecurrenceOnDays = "WE"
	PropertyCalendarEventRecurrenceOnDaysTh PropertyCalendarEventRecurrenceOnDays = "TH"
	PropertyCalendarEventRecurrenceOnDaysFr PropertyCalendarEventRecurrenceOnDays = "FR"
	PropertyCalendarEventRecurrenceOnDaysSa PropertyCalendarEventRecurrenceOnDays = "SA"
)

func (e PropertyCalendarEventRecurrenceOnDays) ToPointer() *PropertyCalendarEventRecurrenceOnDays {
	return &e
}
func (e *PropertyCalendarEventRecurrenceOnDays) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SU":
		fallthrough
	case "MO":
		fallthrough
	case "TU":
		fallthrough
	case "WE":
		fallthrough
	case "TH":
		fallthrough
	case "FR":
		fallthrough
	case "SA":
		*e = PropertyCalendarEventRecurrenceOnDays(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyCalendarEventRecurrenceOnDays: %v", v)
	}
}
