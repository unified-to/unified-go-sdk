// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type AccountingExpense struct {
	ApprovedAt       *time.Time           `json:"approved_at,omitempty"`
	ApproverUserID   *string              `json:"approver_user_id,omitempty"`
	CreatedAt        *time.Time           `json:"created_at,omitempty"`
	Currency         *string              `json:"currency,omitempty"`
	ID               *string              `json:"id,omitempty"`
	Lineitems        []AccountingLineitem `json:"lineitems,omitempty"`
	Name             *string              `json:"name,omitempty"`
	Raw              map[string]any       `json:"raw,omitempty"`
	ReimbursedAmount *float64             `json:"reimbursed_amount,omitempty"`
	ReimbursedAt     *time.Time           `json:"reimbursed_at,omitempty"`
	TaxAmount        *float64             `json:"tax_amount,omitempty"`
	TotalAmount      *float64             `json:"total_amount,omitempty"`
	UpdatedAt        *time.Time           `json:"updated_at,omitempty"`
	UserID           *string              `json:"user_id,omitempty"`
}

func (a AccountingExpense) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccountingExpense) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AccountingExpense) GetApprovedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ApprovedAt
}

func (a *AccountingExpense) GetApproverUserID() *string {
	if a == nil {
		return nil
	}
	return a.ApproverUserID
}

func (a *AccountingExpense) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AccountingExpense) GetCurrency() *string {
	if a == nil {
		return nil
	}
	return a.Currency
}

func (a *AccountingExpense) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AccountingExpense) GetLineitems() []AccountingLineitem {
	if a == nil {
		return nil
	}
	return a.Lineitems
}

func (a *AccountingExpense) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AccountingExpense) GetRaw() map[string]any {
	if a == nil {
		return nil
	}
	return a.Raw
}

func (a *AccountingExpense) GetReimbursedAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.ReimbursedAmount
}

func (a *AccountingExpense) GetReimbursedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ReimbursedAt
}

func (a *AccountingExpense) GetTaxAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.TaxAmount
}

func (a *AccountingExpense) GetTotalAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.TotalAmount
}

func (a *AccountingExpense) GetUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AccountingExpense) GetUserID() *string {
	if a == nil {
		return nil
	}
	return a.UserID
}
