// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type IntervalUnit string

const (
	IntervalUnitYear  IntervalUnit = "YEAR"
	IntervalUnitMonth IntervalUnit = "MONTH"
	IntervalUnitWeek  IntervalUnit = "WEEK"
	IntervalUnitDay   IntervalUnit = "DAY"
)

func (e IntervalUnit) ToPointer() *IntervalUnit {
	return &e
}
func (e *IntervalUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "YEAR":
		fallthrough
	case "MONTH":
		fallthrough
	case "WEEK":
		fallthrough
	case "DAY":
		*e = IntervalUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IntervalUnit: %v", v)
	}
}

type PaymentSubscriptionStatus string

const (
	PaymentSubscriptionStatusActive   PaymentSubscriptionStatus = "ACTIVE"
	PaymentSubscriptionStatusInactive PaymentSubscriptionStatus = "INACTIVE"
	PaymentSubscriptionStatusCanceled PaymentSubscriptionStatus = "CANCELED"
	PaymentSubscriptionStatusPaused   PaymentSubscriptionStatus = "PAUSED"
)

func (e PaymentSubscriptionStatus) ToPointer() *PaymentSubscriptionStatus {
	return &e
}
func (e *PaymentSubscriptionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "CANCELED":
		fallthrough
	case "PAUSED":
		*e = PaymentSubscriptionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentSubscriptionStatus: %v", v)
	}
}

type PaymentSubscription struct {
	CanceledAt           *time.Time                 `json:"canceled_at,omitempty"`
	ContactID            *string                    `json:"contact_id,omitempty"`
	CreatedAt            *time.Time                 `json:"created_at,omitempty"`
	Currency             *string                    `json:"currency,omitempty"`
	CurrentPeriodEndAt   *time.Time                 `json:"current_period_end_at,omitempty"`
	CurrentPeriodStartAt *time.Time                 `json:"current_period_start_at,omitempty"`
	DayOfMonth           *float64                   `json:"day_of_month,omitempty"`
	DayOfWeek            *float64                   `json:"day_of_week,omitempty"`
	Description          *string                    `json:"description,omitempty"`
	EndAt                *time.Time                 `json:"end_at,omitempty"`
	ID                   *string                    `json:"id,omitempty"`
	Interval             *float64                   `json:"interval,omitempty"`
	IntervalUnit         *IntervalUnit              `json:"interval_unit,omitempty"`
	InvoiceID            *string                    `json:"invoice_id,omitempty"`
	Lineitems            []PaymentLineitem          `json:"lineitems,omitempty"`
	Month                *float64                   `json:"month,omitempty"`
	Raw                  map[string]any             `json:"raw,omitempty"`
	StartAt              *time.Time                 `json:"start_at,omitempty"`
	Status               *PaymentSubscriptionStatus `json:"status,omitempty"`
	UpdatedAt            *time.Time                 `json:"updated_at,omitempty"`
}

func (p PaymentSubscription) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentSubscription) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PaymentSubscription) GetCanceledAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *PaymentSubscription) GetContactID() *string {
	if o == nil {
		return nil
	}
	return o.ContactID
}

func (o *PaymentSubscription) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *PaymentSubscription) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *PaymentSubscription) GetCurrentPeriodEndAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CurrentPeriodEndAt
}

func (o *PaymentSubscription) GetCurrentPeriodStartAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CurrentPeriodStartAt
}

func (o *PaymentSubscription) GetDayOfMonth() *float64 {
	if o == nil {
		return nil
	}
	return o.DayOfMonth
}

func (o *PaymentSubscription) GetDayOfWeek() *float64 {
	if o == nil {
		return nil
	}
	return o.DayOfWeek
}

func (o *PaymentSubscription) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PaymentSubscription) GetEndAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndAt
}

func (o *PaymentSubscription) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PaymentSubscription) GetInterval() *float64 {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *PaymentSubscription) GetIntervalUnit() *IntervalUnit {
	if o == nil {
		return nil
	}
	return o.IntervalUnit
}

func (o *PaymentSubscription) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *PaymentSubscription) GetLineitems() []PaymentLineitem {
	if o == nil {
		return nil
	}
	return o.Lineitems
}

func (o *PaymentSubscription) GetMonth() *float64 {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *PaymentSubscription) GetRaw() map[string]any {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *PaymentSubscription) GetStartAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartAt
}

func (o *PaymentSubscription) GetStatus() *PaymentSubscriptionStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PaymentSubscription) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
