// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
)

type One struct {
}

type FiveType string

const (
	FiveTypeOne     FiveType = "1"
	FiveTypeStr     FiveType = "str"
	FiveTypeNumber  FiveType = "number"
	FiveTypeBoolean FiveType = "boolean"
)

type Five struct {
	One     *One     `queryParam:"inline"`
	Str     *string  `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`

	Type FiveType
}

func CreateFiveOne(one One) Five {
	typ := FiveTypeOne

	return Five{
		One:  &one,
		Type: typ,
	}
}

func CreateFiveStr(str string) Five {
	typ := FiveTypeStr

	return Five{
		Str:  &str,
		Type: typ,
	}
}

func CreateFiveNumber(number float64) Five {
	typ := FiveTypeNumber

	return Five{
		Number: &number,
		Type:   typ,
	}
}

func CreateFiveBoolean(boolean bool) Five {
	typ := FiveTypeBoolean

	return Five{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *Five) UnmarshalJSON(data []byte) error {

	var one One = One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = FiveTypeOne
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = FiveTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = FiveTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = FiveTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Five", string(data))
}

func (u Five) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type Five: all fields are null")
}

type ExtraDataType string

const (
	ExtraDataTypeMapOfAny ExtraDataType = "mapOfAny"
	ExtraDataTypeStr      ExtraDataType = "str"
	ExtraDataTypeNumber   ExtraDataType = "number"
	ExtraDataTypeBoolean  ExtraDataType = "boolean"
	ExtraDataTypeArrayOf5 ExtraDataType = "arrayOf5"
)

type ExtraData struct {
	MapOfAny map[string]any `queryParam:"inline"`
	Str      *string        `queryParam:"inline"`
	Number   *float64       `queryParam:"inline"`
	Boolean  *bool          `queryParam:"inline"`
	ArrayOf5 []Five         `queryParam:"inline"`

	Type ExtraDataType
}

func CreateExtraDataMapOfAny(mapOfAny map[string]any) ExtraData {
	typ := ExtraDataTypeMapOfAny

	return ExtraData{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateExtraDataStr(str string) ExtraData {
	typ := ExtraDataTypeStr

	return ExtraData{
		Str:  &str,
		Type: typ,
	}
}

func CreateExtraDataNumber(number float64) ExtraData {
	typ := ExtraDataTypeNumber

	return ExtraData{
		Number: &number,
		Type:   typ,
	}
}

func CreateExtraDataBoolean(boolean bool) ExtraData {
	typ := ExtraDataTypeBoolean

	return ExtraData{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateExtraDataArrayOf5(arrayOf5 []Five) ExtraData {
	typ := ExtraDataTypeArrayOf5

	return ExtraData{
		ArrayOf5: arrayOf5,
		Type:     typ,
	}
}

func (u *ExtraData) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ExtraDataTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ExtraDataTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ExtraDataTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ExtraDataTypeBoolean
		return nil
	}

	var arrayOf5 []Five = []Five{}
	if err := utils.UnmarshalJSON(data, &arrayOf5, "", true, true); err == nil {
		u.ArrayOf5 = arrayOf5
		u.Type = ExtraDataTypeArrayOf5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ExtraData", string(data))
}

func (u ExtraData) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOf5 != nil {
		return utils.MarshalJSON(u.ArrayOf5, "", true)
	}

	return nil, errors.New("could not marshal union type ExtraData: all fields are null")
}

type Format string

const (
	FormatText           Format = "TEXT"
	FormatNumber         Format = "NUMBER"
	FormatDate           Format = "DATE"
	FormatBoolean        Format = "BOOLEAN"
	FormatFile           Format = "FILE"
	FormatTextarea       Format = "TEXTAREA"
	FormatSingleSelect   Format = "SINGLE_SELECT"
	FormatMultipleSelect Format = "MULTIPLE_SELECT"
	FormatMeasurement    Format = "MEASUREMENT"
	FormatPrice          Format = "PRICE"
	FormatYesNo          Format = "YES_NO"
	FormatCurrency       Format = "CURRENCY"
	FormatURL            Format = "URL"
)

func (e Format) ToPointer() *Format {
	return &e
}

type AtsMetadata1 struct {
}

type AtsMetadata5Type string

const (
	AtsMetadata5TypeAtsMetadata1 AtsMetadata5Type = "AtsMetadata_1"
	AtsMetadata5TypeStr          AtsMetadata5Type = "str"
	AtsMetadata5TypeNumber       AtsMetadata5Type = "number"
	AtsMetadata5TypeBoolean      AtsMetadata5Type = "boolean"
)

type AtsMetadata5 struct {
	AtsMetadata1 *AtsMetadata1 `queryParam:"inline"`
	Str          *string       `queryParam:"inline"`
	Number       *float64      `queryParam:"inline"`
	Boolean      *bool         `queryParam:"inline"`

	Type AtsMetadata5Type
}

func CreateAtsMetadata5AtsMetadata1(atsMetadata1 AtsMetadata1) AtsMetadata5 {
	typ := AtsMetadata5TypeAtsMetadata1

	return AtsMetadata5{
		AtsMetadata1: &atsMetadata1,
		Type:         typ,
	}
}

func CreateAtsMetadata5Str(str string) AtsMetadata5 {
	typ := AtsMetadata5TypeStr

	return AtsMetadata5{
		Str:  &str,
		Type: typ,
	}
}

func CreateAtsMetadata5Number(number float64) AtsMetadata5 {
	typ := AtsMetadata5TypeNumber

	return AtsMetadata5{
		Number: &number,
		Type:   typ,
	}
}

func CreateAtsMetadata5Boolean(boolean bool) AtsMetadata5 {
	typ := AtsMetadata5TypeBoolean

	return AtsMetadata5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *AtsMetadata5) UnmarshalJSON(data []byte) error {

	var atsMetadata1 AtsMetadata1 = AtsMetadata1{}
	if err := utils.UnmarshalJSON(data, &atsMetadata1, "", true, true); err == nil {
		u.AtsMetadata1 = &atsMetadata1
		u.Type = AtsMetadata5TypeAtsMetadata1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = AtsMetadata5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = AtsMetadata5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = AtsMetadata5TypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AtsMetadata5", string(data))
}

func (u AtsMetadata5) MarshalJSON() ([]byte, error) {
	if u.AtsMetadata1 != nil {
		return utils.MarshalJSON(u.AtsMetadata1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type AtsMetadata5: all fields are null")
}

type ValueType string

const (
	ValueTypeMapOfAny            ValueType = "mapOfAny"
	ValueTypeStr                 ValueType = "str"
	ValueTypeNumber              ValueType = "number"
	ValueTypeBoolean             ValueType = "boolean"
	ValueTypeArrayOfAtsMetadata5 ValueType = "arrayOfAtsMetadata5"
)

type Value struct {
	MapOfAny            map[string]any `queryParam:"inline"`
	Str                 *string        `queryParam:"inline"`
	Number              *float64       `queryParam:"inline"`
	Boolean             *bool          `queryParam:"inline"`
	ArrayOfAtsMetadata5 []AtsMetadata5 `queryParam:"inline"`

	Type ValueType
}

func CreateValueMapOfAny(mapOfAny map[string]any) Value {
	typ := ValueTypeMapOfAny

	return Value{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateValueStr(str string) Value {
	typ := ValueTypeStr

	return Value{
		Str:  &str,
		Type: typ,
	}
}

func CreateValueNumber(number float64) Value {
	typ := ValueTypeNumber

	return Value{
		Number: &number,
		Type:   typ,
	}
}

func CreateValueBoolean(boolean bool) Value {
	typ := ValueTypeBoolean

	return Value{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateValueArrayOfAtsMetadata5(arrayOfAtsMetadata5 []AtsMetadata5) Value {
	typ := ValueTypeArrayOfAtsMetadata5

	return Value{
		ArrayOfAtsMetadata5: arrayOfAtsMetadata5,
		Type:                typ,
	}
}

func (u *Value) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = ValueTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ValueTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ValueTypeBoolean
		return nil
	}

	var arrayOfAtsMetadata5 []AtsMetadata5 = []AtsMetadata5{}
	if err := utils.UnmarshalJSON(data, &arrayOfAtsMetadata5, "", true, true); err == nil {
		u.ArrayOfAtsMetadata5 = arrayOfAtsMetadata5
		u.Type = ValueTypeArrayOfAtsMetadata5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Value", string(data))
}

func (u Value) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfAtsMetadata5 != nil {
		return utils.MarshalJSON(u.ArrayOfAtsMetadata5, "", true)
	}

	return nil, errors.New("could not marshal union type Value: all fields are null")
}

type AtsMetadata struct {
	ExtraData *ExtraData `json:"extra_data,omitempty"`
	Format    *Format    `json:"format,omitempty"`
	ID        *string    `json:"id,omitempty"`
	Key       *string    `json:"key,omitempty"`
	Namespace *string    `json:"namespace,omitempty"`
	Slug      *string    `json:"slug,omitempty"`
	Type      *string    `json:"type,omitempty"`
	Value     *Value     `json:"value,omitempty"`
}

func (o *AtsMetadata) GetExtraData() *ExtraData {
	if o == nil {
		return nil
	}
	return o.ExtraData
}

func (o *AtsMetadata) GetFormat() *Format {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *AtsMetadata) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AtsMetadata) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *AtsMetadata) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *AtsMetadata) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *AtsMetadata) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AtsMetadata) GetValue() *Value {
	if o == nil {
		return nil
	}
	return o.Value
}
