// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AccountingRefundStatus string

const (
	AccountingRefundStatusSucceeded AccountingRefundStatus = "SUCCEEDED"
	AccountingRefundStatusPending   AccountingRefundStatus = "PENDING"
	AccountingRefundStatusFailed    AccountingRefundStatus = "FAILED"
	AccountingRefundStatusCanceled  AccountingRefundStatus = "CANCELED"
)

func (e AccountingRefundStatus) ToPointer() *AccountingRefundStatus {
	return &e
}

func (e *AccountingRefundStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUCCEEDED":
		fallthrough
	case "PENDING":
		fallthrough
	case "FAILED":
		fallthrough
	case "CANCELED":
		*e = AccountingRefundStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountingRefundStatus: %v", v)
	}
}

type AccountingRefund struct {
	CreatedAt   *string                 `json:"created_at,omitempty"`
	Currency    *string                 `json:"currency,omitempty"`
	ID          *string                 `json:"id,omitempty"`
	Notes       *string                 `json:"notes,omitempty"`
	PaymentID   string                  `json:"payment_id"`
	Raw         map[string]interface{}  `json:"raw,omitempty"`
	Reference   *string                 `json:"reference,omitempty"`
	Status      *AccountingRefundStatus `json:"status,omitempty"`
	TotalAmount float64                 `json:"total_amount"`
	UpdatedAt   *string                 `json:"updated_at,omitempty"`
}

func (o *AccountingRefund) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AccountingRefund) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *AccountingRefund) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccountingRefund) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *AccountingRefund) GetPaymentID() string {
	if o == nil {
		return ""
	}
	return o.PaymentID
}

func (o *AccountingRefund) GetRaw() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *AccountingRefund) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *AccountingRefund) GetStatus() *AccountingRefundStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *AccountingRefund) GetTotalAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalAmount
}

func (o *AccountingRefund) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
