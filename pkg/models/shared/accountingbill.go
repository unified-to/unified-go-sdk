// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type PaymentCollectionMethod string

const (
	PaymentCollectionMethodSendInvoice         PaymentCollectionMethod = "send_invoice"
	PaymentCollectionMethodChargeAutomatically PaymentCollectionMethod = "charge_automatically"
)

func (e PaymentCollectionMethod) ToPointer() *PaymentCollectionMethod {
	return &e
}

type AccountingBillStatus string

const (
	AccountingBillStatusDraft             AccountingBillStatus = "DRAFT"
	AccountingBillStatusVoided            AccountingBillStatus = "VOIDED"
	AccountingBillStatusAuthorized        AccountingBillStatus = "AUTHORIZED"
	AccountingBillStatusPaid              AccountingBillStatus = "PAID"
	AccountingBillStatusPartiallyPaid     AccountingBillStatus = "PARTIALLY_PAID"
	AccountingBillStatusPartiallyRefunded AccountingBillStatus = "PARTIALLY_REFUNDED"
	AccountingBillStatusRefunded          AccountingBillStatus = "REFUNDED"
)

func (e AccountingBillStatus) ToPointer() *AccountingBillStatus {
	return &e
}

type AccountingBill struct {
	Attachments             []AccountingAttachment   `json:"attachments,omitempty"`
	BalanceAmount           *float64                 `json:"balance_amount,omitempty"`
	BillNumber              *string                  `json:"bill_number,omitempty"`
	CancelledAt             *time.Time               `json:"cancelled_at,omitempty"`
	ContactID               *string                  `json:"contact_id,omitempty"`
	CreatedAt               *time.Time               `json:"created_at,omitempty"`
	Currency                *string                  `json:"currency,omitempty"`
	DiscountAmount          *float64                 `json:"discount_amount,omitempty"`
	DueAt                   *time.Time               `json:"due_at,omitempty"`
	ID                      *string                  `json:"id,omitempty"`
	Lineitems               []AccountingLineitem     `json:"lineitems,omitempty"`
	Notes                   *string                  `json:"notes,omitempty"`
	PaidAmount              *float64                 `json:"paid_amount,omitempty"`
	PaidAt                  *time.Time               `json:"paid_at,omitempty"`
	PaymentCollectionMethod *PaymentCollectionMethod `json:"payment_collection_method,omitempty"`
	PostedAt                *time.Time               `json:"posted_at,omitempty"`
	Raw                     map[string]any           `json:"raw,omitempty"`
	RefundAmount            *float64                 `json:"refund_amount,omitempty"`
	RefundReason            *string                  `json:"refund_reason,omitempty"`
	RefundedAt              *time.Time               `json:"refunded_at,omitempty"`
	Send                    *bool                    `json:"send,omitempty"`
	Status                  *AccountingBillStatus    `json:"status,omitempty"`
	TaxAmount               *float64                 `json:"tax_amount,omitempty"`
	TotalAmount             *float64                 `json:"total_amount,omitempty"`
	UpdatedAt               *time.Time               `json:"updated_at,omitempty"`
	URL                     *string                  `json:"url,omitempty"`
}

func (a AccountingBill) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccountingBill) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AccountingBill) GetAttachments() []AccountingAttachment {
	if a == nil {
		return nil
	}
	return a.Attachments
}

func (a *AccountingBill) GetBalanceAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.BalanceAmount
}

func (a *AccountingBill) GetBillNumber() *string {
	if a == nil {
		return nil
	}
	return a.BillNumber
}

func (a *AccountingBill) GetCancelledAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CancelledAt
}

func (a *AccountingBill) GetContactID() *string {
	if a == nil {
		return nil
	}
	return a.ContactID
}

func (a *AccountingBill) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AccountingBill) GetCurrency() *string {
	if a == nil {
		return nil
	}
	return a.Currency
}

func (a *AccountingBill) GetDiscountAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.DiscountAmount
}

func (a *AccountingBill) GetDueAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.DueAt
}

func (a *AccountingBill) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AccountingBill) GetLineitems() []AccountingLineitem {
	if a == nil {
		return nil
	}
	return a.Lineitems
}

func (a *AccountingBill) GetNotes() *string {
	if a == nil {
		return nil
	}
	return a.Notes
}

func (a *AccountingBill) GetPaidAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.PaidAmount
}

func (a *AccountingBill) GetPaidAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.PaidAt
}

func (a *AccountingBill) GetPaymentCollectionMethod() *PaymentCollectionMethod {
	if a == nil {
		return nil
	}
	return a.PaymentCollectionMethod
}

func (a *AccountingBill) GetPostedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.PostedAt
}

func (a *AccountingBill) GetRaw() map[string]any {
	if a == nil {
		return nil
	}
	return a.Raw
}

func (a *AccountingBill) GetRefundAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.RefundAmount
}

func (a *AccountingBill) GetRefundReason() *string {
	if a == nil {
		return nil
	}
	return a.RefundReason
}

func (a *AccountingBill) GetRefundedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.RefundedAt
}

func (a *AccountingBill) GetSend() *bool {
	if a == nil {
		return nil
	}
	return a.Send
}

func (a *AccountingBill) GetStatus() *AccountingBillStatus {
	if a == nil {
		return nil
	}
	return a.Status
}

func (a *AccountingBill) GetTaxAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.TaxAmount
}

func (a *AccountingBill) GetTotalAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.TotalAmount
}

func (a *AccountingBill) GetUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AccountingBill) GetURL() *string {
	if a == nil {
		return nil
	}
	return a.URL
}
