// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type VerificationPackageType string

const (
	VerificationPackageTypeIdentityVerification   VerificationPackageType = "IDENTITY_VERIFICATION"
	VerificationPackageTypeScreening              VerificationPackageType = "SCREENING"
	VerificationPackageTypeBackgroundCheck        VerificationPackageType = "BACKGROUND_CHECK"
	VerificationPackageTypeEmploymentVerification VerificationPackageType = "EMPLOYMENT_VERIFICATION"
	VerificationPackageTypeEducationVerification  VerificationPackageType = "EDUCATION_VERIFICATION"
	VerificationPackageTypeCreditCheck            VerificationPackageType = "CREDIT_CHECK"
	VerificationPackageTypeFraudPrevention        VerificationPackageType = "FRAUD_PREVENTION"
	VerificationPackageTypeOther                  VerificationPackageType = "OTHER"
)

func (e VerificationPackageType) ToPointer() *VerificationPackageType {
	return &e
}

type VerificationPackage struct {
	Aliases []string `json:"aliases,omitempty"`
	// average processing time in minutes
	AverageProcessingTimes []VerificationTime `json:"average_processing_times,omitempty"`
	CostAmount             *float64           `json:"cost_amount,omitempty"`
	CreatedAt              *time.Time         `json:"created_at,omitempty"`
	Currency               *string            `json:"currency,omitempty"`
	Description            *string            `json:"description,omitempty"`
	HasRedirectURL         *bool              `json:"has_redirect_url,omitempty"`
	HasTargetURL           *bool              `json:"has_target_url,omitempty"`
	ID                     string             `json:"id"`
	InfoURL                *string            `json:"info_url,omitempty"`
	MaxScore               *float64           `json:"max_score,omitempty"`
	Name                   string             `json:"name"`
	NeedsIPAddress         *bool              `json:"needs_ip_address,omitempty"`
	// Questions that need to be answered for this verification
	Parameters []VerificationParameter `json:"parameters,omitempty"`
	Raw        map[string]any          `json:"raw,omitempty"`
	// Category (Verification, Validation, Background Check)
	Tags      []string                `json:"tags,omitempty"`
	Type      VerificationPackageType `json:"type"`
	UpdatedAt *time.Time              `json:"updated_at,omitempty"`
}

func (v VerificationPackage) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VerificationPackage) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"id", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *VerificationPackage) GetAliases() []string {
	if o == nil {
		return nil
	}
	return o.Aliases
}

func (o *VerificationPackage) GetAverageProcessingTimes() []VerificationTime {
	if o == nil {
		return nil
	}
	return o.AverageProcessingTimes
}

func (o *VerificationPackage) GetCostAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.CostAmount
}

func (o *VerificationPackage) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *VerificationPackage) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *VerificationPackage) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *VerificationPackage) GetHasRedirectURL() *bool {
	if o == nil {
		return nil
	}
	return o.HasRedirectURL
}

func (o *VerificationPackage) GetHasTargetURL() *bool {
	if o == nil {
		return nil
	}
	return o.HasTargetURL
}

func (o *VerificationPackage) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *VerificationPackage) GetInfoURL() *string {
	if o == nil {
		return nil
	}
	return o.InfoURL
}

func (o *VerificationPackage) GetMaxScore() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxScore
}

func (o *VerificationPackage) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *VerificationPackage) GetNeedsIPAddress() *bool {
	if o == nil {
		return nil
	}
	return o.NeedsIPAddress
}

func (o *VerificationPackage) GetParameters() []VerificationParameter {
	if o == nil {
		return nil
	}
	return o.Parameters
}

func (o *VerificationPackage) GetRaw() map[string]any {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *VerificationPackage) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *VerificationPackage) GetType() VerificationPackageType {
	if o == nil {
		return VerificationPackageType("")
	}
	return o.Type
}

func (o *VerificationPackage) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
