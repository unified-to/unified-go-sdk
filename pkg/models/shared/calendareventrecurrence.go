// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type CalendarEventRecurrenceFrequency string

const (
	CalendarEventRecurrenceFrequencyDaily   CalendarEventRecurrenceFrequency = "DAILY"
	CalendarEventRecurrenceFrequencyWeekly  CalendarEventRecurrenceFrequency = "WEEKLY"
	CalendarEventRecurrenceFrequencyMonthly CalendarEventRecurrenceFrequency = "MONTHLY"
	CalendarEventRecurrenceFrequencyYearly  CalendarEventRecurrenceFrequency = "YEARLY"
)

func (e CalendarEventRecurrenceFrequency) ToPointer() *CalendarEventRecurrenceFrequency {
	return &e
}

type WeekStart string

const (
	WeekStartSu WeekStart = "SU"
	WeekStartMo WeekStart = "MO"
	WeekStartTu WeekStart = "TU"
	WeekStartWe WeekStart = "WE"
	WeekStartTh WeekStart = "TH"
	WeekStartFr WeekStart = "FR"
	WeekStartSa WeekStart = "SA"
)

func (e WeekStart) ToPointer() *WeekStart {
	return &e
}

type CalendarEventRecurrence struct {
	Count *float64   `json:"count,omitempty"`
	EndAt *time.Time `json:"end_at,omitempty"`
	// dates to exclude from the recurrence, defaults to undefined (no exclusions)
	ExcludedDates []string                         `json:"excluded_dates,omitempty"`
	Frequency     CalendarEventRecurrenceFrequency `json:"frequency"`
	Interval      *float64                         `json:"interval,omitempty"`
	// days of the week to repeat on, defaults to undefined (every day), only used if frequency is WEEKLY
	OnDays []PropertyCalendarEventRecurrenceOnDays `json:"on_days,omitempty"`
	// days of the month to repeat on, defaults to undefined (every day), only used if frequency is MONTHLY
	OnMonthDays []float64 `json:"on_month_days,omitempty"`
	// months of the year to repeat on, defaults to undefined (every month), only used if frequency is YEARLY, January is 1
	OnMonths []float64 `json:"on_months,omitempty"`
	// week ordinals for BYDAY (e.g., -1 for last, -2 for second-to-last, 1 for first, 2 for second), only used with on_days. 0 is used for days without week ordinals.
	OnWeeks []float64 `json:"on_weeks,omitempty"`
	// days of the year to repeat on, defaults to undefined (every day), only used if frequency is YEARLY
	OnYearDays []float64  `json:"on_year_days,omitempty"`
	Timezone   *string    `json:"timezone,omitempty"`
	WeekStart  *WeekStart `json:"week_start,omitempty"`
}

func (c CalendarEventRecurrence) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CalendarEventRecurrence) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"frequency"}); err != nil {
		return err
	}
	return nil
}

func (c *CalendarEventRecurrence) GetCount() *float64 {
	if c == nil {
		return nil
	}
	return c.Count
}

func (c *CalendarEventRecurrence) GetEndAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.EndAt
}

func (c *CalendarEventRecurrence) GetExcludedDates() []string {
	if c == nil {
		return nil
	}
	return c.ExcludedDates
}

func (c *CalendarEventRecurrence) GetFrequency() CalendarEventRecurrenceFrequency {
	if c == nil {
		return CalendarEventRecurrenceFrequency("")
	}
	return c.Frequency
}

func (c *CalendarEventRecurrence) GetInterval() *float64 {
	if c == nil {
		return nil
	}
	return c.Interval
}

func (c *CalendarEventRecurrence) GetOnDays() []PropertyCalendarEventRecurrenceOnDays {
	if c == nil {
		return nil
	}
	return c.OnDays
}

func (c *CalendarEventRecurrence) GetOnMonthDays() []float64 {
	if c == nil {
		return nil
	}
	return c.OnMonthDays
}

func (c *CalendarEventRecurrence) GetOnMonths() []float64 {
	if c == nil {
		return nil
	}
	return c.OnMonths
}

func (c *CalendarEventRecurrence) GetOnWeeks() []float64 {
	if c == nil {
		return nil
	}
	return c.OnWeeks
}

func (c *CalendarEventRecurrence) GetOnYearDays() []float64 {
	if c == nil {
		return nil
	}
	return c.OnYearDays
}

func (c *CalendarEventRecurrence) GetTimezone() *string {
	if c == nil {
		return nil
	}
	return c.Timezone
}

func (c *CalendarEventRecurrence) GetWeekStart() *WeekStart {
	if c == nil {
		return nil
	}
	return c.WeekStart
}
