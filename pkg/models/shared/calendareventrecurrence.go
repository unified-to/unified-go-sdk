// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type CalendarEventRecurrenceFrequency string

const (
	CalendarEventRecurrenceFrequencyDaily   CalendarEventRecurrenceFrequency = "DAILY"
	CalendarEventRecurrenceFrequencyWeekly  CalendarEventRecurrenceFrequency = "WEEKLY"
	CalendarEventRecurrenceFrequencyMonthly CalendarEventRecurrenceFrequency = "MONTHLY"
	CalendarEventRecurrenceFrequencyYearly  CalendarEventRecurrenceFrequency = "YEARLY"
)

func (e CalendarEventRecurrenceFrequency) ToPointer() *CalendarEventRecurrenceFrequency {
	return &e
}

type CalendarEventRecurrence struct {
	Count *float64   `json:"count,omitempty"`
	EndAt *time.Time `json:"end_at,omitempty"`
	// dates to exclude from the recurrence, defaults to undefined (no exclusions)
	ExcludedDates []string                         `json:"excluded_dates,omitempty"`
	Frequency     CalendarEventRecurrenceFrequency `json:"frequency"`
	Interval      *float64                         `json:"interval,omitempty"`
	// days of the week to repeat on, defaults to undefined (every day), only used if frequency is WEEKLY
	OnDays []PropertyCalendarEventRecurrenceOnDays `json:"on_days,omitempty"`
	// days of the month to repeat on, defaults to undefined (every day), only used if frequency is MONTHLY
	OnMonthDays []float64 `json:"on_month_days,omitempty"`
	// months of the year to repeat on, defaults to undefined (every month), only used if frequency is YEARLY, January is 1
	OnMonths []float64 `json:"on_months,omitempty"`
}

func (c CalendarEventRecurrence) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CalendarEventRecurrence) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CalendarEventRecurrence) GetCount() *float64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CalendarEventRecurrence) GetEndAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndAt
}

func (o *CalendarEventRecurrence) GetExcludedDates() []string {
	if o == nil {
		return nil
	}
	return o.ExcludedDates
}

func (o *CalendarEventRecurrence) GetFrequency() CalendarEventRecurrenceFrequency {
	if o == nil {
		return CalendarEventRecurrenceFrequency("")
	}
	return o.Frequency
}

func (o *CalendarEventRecurrence) GetInterval() *float64 {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *CalendarEventRecurrence) GetOnDays() []PropertyCalendarEventRecurrenceOnDays {
	if o == nil {
		return nil
	}
	return o.OnDays
}

func (o *CalendarEventRecurrence) GetOnMonthDays() []float64 {
	if o == nil {
		return nil
	}
	return o.OnMonthDays
}

func (o *CalendarEventRecurrence) GetOnMonths() []float64 {
	if o == nil {
		return nil
	}
	return o.OnMonths
}
