// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type PropertyAccountingReportProfitAndLoss struct {
	// @deprecated – use cost_of_goods_sold_sections instead
	CostOfGoodsSold            []AccountingProfitlossCategory `json:"cost_of_goods_sold,omitempty"`
	CostOfGoodsSoldSections    []AccountingProfitlossSection  `json:"cost_of_goods_sold_sections,omitempty"`
	CostOfGoodsSoldTotalAmount *float64                       `json:"cost_of_goods_sold_total_amount,omitempty"`
	CreatedAt                  *time.Time                     `json:"created_at,omitempty"`
	Currency                   *string                        `json:"currency,omitempty"`
	EndAt                      *time.Time                     `json:"end_at,omitempty"`
	// @deprecated – use expenses_sections instead
	Expenses            []AccountingProfitlossCategory `json:"expenses,omitempty"`
	ExpensesSections    []AccountingProfitlossSection  `json:"expenses_sections,omitempty"`
	ExpensesTotalAmount *float64                       `json:"expenses_total_amount,omitempty"`
	GrossProfitAmount   *float64                       `json:"gross_profit_amount,omitempty"`
	ID                  *string                        `json:"id,omitempty"`
	// @deprecated – use income_sections instead
	Income            []AccountingProfitlossCategory `json:"income,omitempty"`
	IncomeSections    []AccountingProfitlossSection  `json:"income_sections,omitempty"`
	IncomeTotalAmount *float64                       `json:"income_total_amount,omitempty"`
	Name              *string                        `json:"name,omitempty"`
	NetIncomeAmount   *float64                       `json:"net_income_amount,omitempty"`
	NetProfitAmount   *float64                       `json:"net_profit_amount,omitempty"`
	Raw               map[string]any                 `json:"raw,omitempty"`
	StartAt           *time.Time                     `json:"start_at,omitempty"`
	UpdatedAt         *time.Time                     `json:"updated_at,omitempty"`
}

func (p PropertyAccountingReportProfitAndLoss) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PropertyAccountingReportProfitAndLoss) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *PropertyAccountingReportProfitAndLoss) GetCostOfGoodsSold() []AccountingProfitlossCategory {
	if p == nil {
		return nil
	}
	return p.CostOfGoodsSold
}

func (p *PropertyAccountingReportProfitAndLoss) GetCostOfGoodsSoldSections() []AccountingProfitlossSection {
	if p == nil {
		return nil
	}
	return p.CostOfGoodsSoldSections
}

func (p *PropertyAccountingReportProfitAndLoss) GetCostOfGoodsSoldTotalAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.CostOfGoodsSoldTotalAmount
}

func (p *PropertyAccountingReportProfitAndLoss) GetCreatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *PropertyAccountingReportProfitAndLoss) GetCurrency() *string {
	if p == nil {
		return nil
	}
	return p.Currency
}

func (p *PropertyAccountingReportProfitAndLoss) GetEndAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.EndAt
}

func (p *PropertyAccountingReportProfitAndLoss) GetExpenses() []AccountingProfitlossCategory {
	if p == nil {
		return nil
	}
	return p.Expenses
}

func (p *PropertyAccountingReportProfitAndLoss) GetExpensesSections() []AccountingProfitlossSection {
	if p == nil {
		return nil
	}
	return p.ExpensesSections
}

func (p *PropertyAccountingReportProfitAndLoss) GetExpensesTotalAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.ExpensesTotalAmount
}

func (p *PropertyAccountingReportProfitAndLoss) GetGrossProfitAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.GrossProfitAmount
}

func (p *PropertyAccountingReportProfitAndLoss) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PropertyAccountingReportProfitAndLoss) GetIncome() []AccountingProfitlossCategory {
	if p == nil {
		return nil
	}
	return p.Income
}

func (p *PropertyAccountingReportProfitAndLoss) GetIncomeSections() []AccountingProfitlossSection {
	if p == nil {
		return nil
	}
	return p.IncomeSections
}

func (p *PropertyAccountingReportProfitAndLoss) GetIncomeTotalAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.IncomeTotalAmount
}

func (p *PropertyAccountingReportProfitAndLoss) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PropertyAccountingReportProfitAndLoss) GetNetIncomeAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.NetIncomeAmount
}

func (p *PropertyAccountingReportProfitAndLoss) GetNetProfitAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.NetProfitAmount
}

func (p *PropertyAccountingReportProfitAndLoss) GetRaw() map[string]any {
	if p == nil {
		return nil
	}
	return p.Raw
}

func (p *PropertyAccountingReportProfitAndLoss) GetStartAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.StartAt
}

func (p *PropertyAccountingReportProfitAndLoss) GetUpdatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}
