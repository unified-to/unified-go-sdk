// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type RepoBranch struct {
	CreatedAt *time.Time     `json:"created_at,omitempty"`
	ID        *string        `json:"id,omitempty"`
	Name      string         `json:"name"`
	Raw       map[string]any `json:"raw,omitempty"`
	RepoID    string         `json:"repo_id"`
	UpdatedAt *time.Time     `json:"updated_at,omitempty"`
}

func (r RepoBranch) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RepoBranch) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"name", "repo_id"}); err != nil {
		return err
	}
	return nil
}

func (o *RepoBranch) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RepoBranch) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RepoBranch) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RepoBranch) GetRaw() map[string]any {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *RepoBranch) GetRepoID() string {
	if o == nil {
		return ""
	}
	return o.RepoID
}

func (o *RepoBranch) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
