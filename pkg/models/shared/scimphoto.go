// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ScimPhotoType string

const (
	ScimPhotoTypePhoto     ScimPhotoType = "photo"
	ScimPhotoTypeThumbnail ScimPhotoType = "thumbnail"
)

func (e ScimPhotoType) ToPointer() *ScimPhotoType {
	return &e
}
func (e *ScimPhotoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "photo":
		fallthrough
	case "thumbnail":
		*e = ScimPhotoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScimPhotoType: %v", v)
	}
}

type ScimPhoto struct {
	Display *string        `json:"display,omitempty"`
	Primary *bool          `json:"primary,omitempty"`
	Type    *ScimPhotoType `json:"type,omitempty"`
	Value   *string        `json:"value,omitempty"`
}

func (o *ScimPhoto) GetDisplay() *string {
	if o == nil {
		return nil
	}
	return o.Display
}

func (o *ScimPhoto) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

func (o *ScimPhoto) GetType() *ScimPhotoType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ScimPhoto) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}
