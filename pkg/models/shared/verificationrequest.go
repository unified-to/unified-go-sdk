// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type ProfileGender string

const (
	ProfileGenderMale      ProfileGender = "MALE"
	ProfileGenderFemale    ProfileGender = "FEMALE"
	ProfileGenderIntersex  ProfileGender = "INTERSEX"
	ProfileGenderTrans     ProfileGender = "TRANS"
	ProfileGenderNonBinary ProfileGender = "NON_BINARY"
)

func (e ProfileGender) ToPointer() *ProfileGender {
	return &e
}

type ResponseStatus string

const (
	ResponseStatusCompleted ResponseStatus = "COMPLETED"
	ResponseStatusFailed    ResponseStatus = "FAILED"
	ResponseStatusPassed    ResponseStatus = "PASSED"
	ResponseStatusPending   ResponseStatus = "PENDING"
)

func (e ResponseStatus) ToPointer() *ResponseStatus {
	return &e
}

type VerificationRequest struct {
	CandidateID               *string                      `json:"candidate_id,omitempty"`
	CreatedAt                 *time.Time                   `json:"created_at,omitempty"`
	ID                        *string                      `json:"id,omitempty"`
	PackageID                 *string                      `json:"package_id,omitempty"`
	Parameters                []VerificationParameterInput `json:"parameters,omitempty"`
	ProfileAddresses          []VerificationAddress        `json:"profile_addresses,omitempty"`
	ProfileDateOfBirth        *string                      `json:"profile_date_of_birth,omitempty"`
	ProfileEmails             []string                     `json:"profile_emails,omitempty"`
	ProfileGender             *ProfileGender               `json:"profile_gender,omitempty"`
	ProfileIPAddress          *string                      `json:"profile_ip_address,omitempty"`
	ProfileName               *string                      `json:"profile_name,omitempty"`
	ProfileNationalIdentifier *string                      `json:"profile_national_identifier,omitempty"`
	ProfileTelephones         []string                     `json:"profile_telephones,omitempty"`
	Raw                       map[string]any               `json:"raw,omitempty"`
	ResponseCompletedAt       *time.Time                   `json:"response_completed_at,omitempty"`
	ResponseDetails           []VerificationResponseDetail `json:"response_details,omitempty"`
	// report download
	ResponseDownloadUrls []string        `json:"response_download_urls,omitempty"`
	ResponseExpiresAt    *time.Time      `json:"response_expires_at,omitempty"`
	ResponseIssuedAt     *time.Time      `json:"response_issued_at,omitempty"`
	ResponseRedirectURL  *string         `json:"response_redirect_url,omitempty"`
	ResponseScore        *float64        `json:"response_score,omitempty"`
	ResponseSource       *string         `json:"response_source,omitempty"`
	ResponseStatus       *ResponseStatus `json:"response_status,omitempty"`
	TargetURL            *string         `json:"target_url,omitempty"`
	UpdatedAt            *time.Time      `json:"updated_at,omitempty"`
}

func (v VerificationRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VerificationRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (v *VerificationRequest) GetCandidateID() *string {
	if v == nil {
		return nil
	}
	return v.CandidateID
}

func (v *VerificationRequest) GetCreatedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.CreatedAt
}

func (v *VerificationRequest) GetID() *string {
	if v == nil {
		return nil
	}
	return v.ID
}

func (v *VerificationRequest) GetPackageID() *string {
	if v == nil {
		return nil
	}
	return v.PackageID
}

func (v *VerificationRequest) GetParameters() []VerificationParameterInput {
	if v == nil {
		return nil
	}
	return v.Parameters
}

func (v *VerificationRequest) GetProfileAddresses() []VerificationAddress {
	if v == nil {
		return nil
	}
	return v.ProfileAddresses
}

func (v *VerificationRequest) GetProfileDateOfBirth() *string {
	if v == nil {
		return nil
	}
	return v.ProfileDateOfBirth
}

func (v *VerificationRequest) GetProfileEmails() []string {
	if v == nil {
		return nil
	}
	return v.ProfileEmails
}

func (v *VerificationRequest) GetProfileGender() *ProfileGender {
	if v == nil {
		return nil
	}
	return v.ProfileGender
}

func (v *VerificationRequest) GetProfileIPAddress() *string {
	if v == nil {
		return nil
	}
	return v.ProfileIPAddress
}

func (v *VerificationRequest) GetProfileName() *string {
	if v == nil {
		return nil
	}
	return v.ProfileName
}

func (v *VerificationRequest) GetProfileNationalIdentifier() *string {
	if v == nil {
		return nil
	}
	return v.ProfileNationalIdentifier
}

func (v *VerificationRequest) GetProfileTelephones() []string {
	if v == nil {
		return nil
	}
	return v.ProfileTelephones
}

func (v *VerificationRequest) GetRaw() map[string]any {
	if v == nil {
		return nil
	}
	return v.Raw
}

func (v *VerificationRequest) GetResponseCompletedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.ResponseCompletedAt
}

func (v *VerificationRequest) GetResponseDetails() []VerificationResponseDetail {
	if v == nil {
		return nil
	}
	return v.ResponseDetails
}

func (v *VerificationRequest) GetResponseDownloadUrls() []string {
	if v == nil {
		return nil
	}
	return v.ResponseDownloadUrls
}

func (v *VerificationRequest) GetResponseExpiresAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.ResponseExpiresAt
}

func (v *VerificationRequest) GetResponseIssuedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.ResponseIssuedAt
}

func (v *VerificationRequest) GetResponseRedirectURL() *string {
	if v == nil {
		return nil
	}
	return v.ResponseRedirectURL
}

func (v *VerificationRequest) GetResponseScore() *float64 {
	if v == nil {
		return nil
	}
	return v.ResponseScore
}

func (v *VerificationRequest) GetResponseSource() *string {
	if v == nil {
		return nil
	}
	return v.ResponseSource
}

func (v *VerificationRequest) GetResponseStatus() *ResponseStatus {
	if v == nil {
		return nil
	}
	return v.ResponseStatus
}

func (v *VerificationRequest) GetTargetURL() *string {
	if v == nil {
		return nil
	}
	return v.TargetURL
}

func (v *VerificationRequest) GetUpdatedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.UpdatedAt
}
