// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type AccountingTransaction struct {
	AccountID       *string                         `json:"account_id,omitempty"`
	ContactID       *string                         `json:"contact_id,omitempty"`
	Contacts        []AccountingTransactionContact  `json:"contacts,omitempty"`
	CreatedAt       *time.Time                      `json:"created_at,omitempty"`
	Currency        *string                         `json:"currency,omitempty"`
	CustomerMessage *string                         `json:"customer_message,omitempty"`
	ID              *string                         `json:"id,omitempty"`
	Lineitems       []AccountingTransactionLineItem `json:"lineitems,omitempty"`
	Memo            *string                         `json:"memo,omitempty"`
	PaymentMethod   *string                         `json:"payment_method,omitempty"`
	PaymentTerms    *string                         `json:"payment_terms,omitempty"`
	Raw             map[string]any                  `json:"raw,omitempty"`
	Reference       *string                         `json:"reference,omitempty"`
	SplitAccountID  *string                         `json:"split_account_id,omitempty"`
	SubTotalAmount  *float64                        `json:"sub_total_amount,omitempty"`
	TaxAmount       *float64                        `json:"tax_amount,omitempty"`
	TotalAmount     *float64                        `json:"total_amount,omitempty"`
	Type            *string                         `json:"type,omitempty"`
	UpdatedAt       *time.Time                      `json:"updated_at,omitempty"`
}

func (a AccountingTransaction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccountingTransaction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AccountingTransaction) GetAccountID() *string {
	if a == nil {
		return nil
	}
	return a.AccountID
}

func (a *AccountingTransaction) GetContactID() *string {
	if a == nil {
		return nil
	}
	return a.ContactID
}

func (a *AccountingTransaction) GetContacts() []AccountingTransactionContact {
	if a == nil {
		return nil
	}
	return a.Contacts
}

func (a *AccountingTransaction) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AccountingTransaction) GetCurrency() *string {
	if a == nil {
		return nil
	}
	return a.Currency
}

func (a *AccountingTransaction) GetCustomerMessage() *string {
	if a == nil {
		return nil
	}
	return a.CustomerMessage
}

func (a *AccountingTransaction) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AccountingTransaction) GetLineitems() []AccountingTransactionLineItem {
	if a == nil {
		return nil
	}
	return a.Lineitems
}

func (a *AccountingTransaction) GetMemo() *string {
	if a == nil {
		return nil
	}
	return a.Memo
}

func (a *AccountingTransaction) GetPaymentMethod() *string {
	if a == nil {
		return nil
	}
	return a.PaymentMethod
}

func (a *AccountingTransaction) GetPaymentTerms() *string {
	if a == nil {
		return nil
	}
	return a.PaymentTerms
}

func (a *AccountingTransaction) GetRaw() map[string]any {
	if a == nil {
		return nil
	}
	return a.Raw
}

func (a *AccountingTransaction) GetReference() *string {
	if a == nil {
		return nil
	}
	return a.Reference
}

func (a *AccountingTransaction) GetSplitAccountID() *string {
	if a == nil {
		return nil
	}
	return a.SplitAccountID
}

func (a *AccountingTransaction) GetSubTotalAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.SubTotalAmount
}

func (a *AccountingTransaction) GetTaxAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.TaxAmount
}

func (a *AccountingTransaction) GetTotalAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.TotalAmount
}

func (a *AccountingTransaction) GetType() *string {
	if a == nil {
		return nil
	}
	return a.Type
}

func (a *AccountingTransaction) GetUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}
