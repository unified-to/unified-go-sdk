// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type TaxExemption string

const (
	TaxExemptionFederalGov     TaxExemption = "FEDERAL_GOV"
	TaxExemptionRegionGov      TaxExemption = "REGION_GOV"
	TaxExemptionLocalGov       TaxExemption = "LOCAL_GOV"
	TaxExemptionTribalGov      TaxExemption = "TRIBAL_GOV"
	TaxExemptionCharitableOrg  TaxExemption = "CHARITABLE_ORG"
	TaxExemptionReligiousOrg   TaxExemption = "RELIGIOUS_ORG"
	TaxExemptionEducationalOrg TaxExemption = "EDUCATIONAL_ORG"
	TaxExemptionMedicalOrg     TaxExemption = "MEDICAL_ORG"
	TaxExemptionResale         TaxExemption = "RESALE"
	TaxExemptionForeign        TaxExemption = "FOREIGN"
	TaxExemptionOther          TaxExemption = "OTHER"
)

func (e TaxExemption) ToPointer() *TaxExemption {
	return &e
}
func (e *TaxExemption) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FEDERAL_GOV":
		fallthrough
	case "REGION_GOV":
		fallthrough
	case "LOCAL_GOV":
		fallthrough
	case "TRIBAL_GOV":
		fallthrough
	case "CHARITABLE_ORG":
		fallthrough
	case "RELIGIOUS_ORG":
		fallthrough
	case "EDUCATIONAL_ORG":
		fallthrough
	case "MEDICAL_ORG":
		fallthrough
	case "RESALE":
		fallthrough
	case "FOREIGN":
		fallthrough
	case "OTHER":
		*e = TaxExemption(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxExemption: %v", v)
	}
}

type AccountingContact struct {
	BillingAddress  *PropertyAccountingContactBillingAddress  `json:"billing_address,omitempty"`
	CompanyName     *string                                   `json:"company_name,omitempty"`
	CreatedAt       *time.Time                                `json:"created_at,omitempty"`
	Currency        *string                                   `default:"USD" json:"currency"`
	Emails          []AccountingEmail                         `json:"emails,omitempty"`
	ID              *string                                   `json:"id,omitempty"`
	Identification  *string                                   `json:"identification,omitempty"`
	IsActive        *bool                                     `json:"is_active,omitempty"`
	IsCustomer      *bool                                     `json:"is_customer,omitempty"`
	IsSupplier      *bool                                     `json:"is_supplier,omitempty"`
	Name            *string                                   `json:"name,omitempty"`
	PaymentMethods  []AccountingContactPaymentMethod          `json:"payment_methods,omitempty"`
	PortalURL       *string                                   `json:"portal_url,omitempty"`
	Raw             map[string]any                            `json:"raw,omitempty"`
	ShippingAddress *PropertyAccountingContactShippingAddress `json:"shipping_address,omitempty"`
	TaxExemption    *TaxExemption                             `json:"tax_exemption,omitempty"`
	TaxNumber       *string                                   `json:"tax_number,omitempty"`
	Telephones      []AccountingTelephone                     `json:"telephones,omitempty"`
	UpdatedAt       *time.Time                                `json:"updated_at,omitempty"`
}

func (a AccountingContact) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccountingContact) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AccountingContact) GetBillingAddress() *PropertyAccountingContactBillingAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *AccountingContact) GetCompanyName() *string {
	if o == nil {
		return nil
	}
	return o.CompanyName
}

func (o *AccountingContact) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AccountingContact) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *AccountingContact) GetEmails() []AccountingEmail {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *AccountingContact) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccountingContact) GetIdentification() *string {
	if o == nil {
		return nil
	}
	return o.Identification
}

func (o *AccountingContact) GetIsActive() *bool {
	if o == nil {
		return nil
	}
	return o.IsActive
}

func (o *AccountingContact) GetIsCustomer() *bool {
	if o == nil {
		return nil
	}
	return o.IsCustomer
}

func (o *AccountingContact) GetIsSupplier() *bool {
	if o == nil {
		return nil
	}
	return o.IsSupplier
}

func (o *AccountingContact) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AccountingContact) GetPaymentMethods() []AccountingContactPaymentMethod {
	if o == nil {
		return nil
	}
	return o.PaymentMethods
}

func (o *AccountingContact) GetPortalURL() *string {
	if o == nil {
		return nil
	}
	return o.PortalURL
}

func (o *AccountingContact) GetRaw() map[string]any {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *AccountingContact) GetShippingAddress() *PropertyAccountingContactShippingAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *AccountingContact) GetTaxExemption() *TaxExemption {
	if o == nil {
		return nil
	}
	return o.TaxExemption
}

func (o *AccountingContact) GetTaxNumber() *string {
	if o == nil {
		return nil
	}
	return o.TaxNumber
}

func (o *AccountingContact) GetTelephones() []AccountingTelephone {
	if o == nil {
		return nil
	}
	return o.Telephones
}

func (o *AccountingContact) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
