// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
)

type HrisMetadata1 struct {
}

func (h HrisMetadata1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HrisMetadata1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, nil); err != nil {
		return err
	}
	return nil
}

type HrisMetadata5Type string

const (
	HrisMetadata5TypeHrisMetadata1 HrisMetadata5Type = "HrisMetadata_1"
	HrisMetadata5TypeStr           HrisMetadata5Type = "str"
	HrisMetadata5TypeNumber        HrisMetadata5Type = "number"
	HrisMetadata5TypeBoolean       HrisMetadata5Type = "boolean"
)

type HrisMetadata5 struct {
	HrisMetadata1 *HrisMetadata1 `queryParam:"inline" name:"five"`
	Str           *string        `queryParam:"inline" name:"five"`
	Number        *float64       `queryParam:"inline" name:"five"`
	Boolean       *bool          `queryParam:"inline" name:"five"`

	Type HrisMetadata5Type
}

func CreateHrisMetadata5HrisMetadata1(hrisMetadata1 HrisMetadata1) HrisMetadata5 {
	typ := HrisMetadata5TypeHrisMetadata1

	return HrisMetadata5{
		HrisMetadata1: &hrisMetadata1,
		Type:          typ,
	}
}

func CreateHrisMetadata5Str(str string) HrisMetadata5 {
	typ := HrisMetadata5TypeStr

	return HrisMetadata5{
		Str:  &str,
		Type: typ,
	}
}

func CreateHrisMetadata5Number(number float64) HrisMetadata5 {
	typ := HrisMetadata5TypeNumber

	return HrisMetadata5{
		Number: &number,
		Type:   typ,
	}
}

func CreateHrisMetadata5Boolean(boolean bool) HrisMetadata5 {
	typ := HrisMetadata5TypeBoolean

	return HrisMetadata5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *HrisMetadata5) UnmarshalJSON(data []byte) error {

	var hrisMetadata1 HrisMetadata1 = HrisMetadata1{}
	if err := utils.UnmarshalJSON(data, &hrisMetadata1, "", true, nil); err == nil {
		u.HrisMetadata1 = &hrisMetadata1
		u.Type = HrisMetadata5TypeHrisMetadata1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = HrisMetadata5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = HrisMetadata5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = HrisMetadata5TypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for HrisMetadata5", string(data))
}

func (u HrisMetadata5) MarshalJSON() ([]byte, error) {
	if u.HrisMetadata1 != nil {
		return utils.MarshalJSON(u.HrisMetadata1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type HrisMetadata5: all fields are null")
}

type HrisMetadataExtraDataType string

const (
	HrisMetadataExtraDataTypeMapOfAny             HrisMetadataExtraDataType = "mapOfAny"
	HrisMetadataExtraDataTypeStr                  HrisMetadataExtraDataType = "str"
	HrisMetadataExtraDataTypeNumber               HrisMetadataExtraDataType = "number"
	HrisMetadataExtraDataTypeBoolean              HrisMetadataExtraDataType = "boolean"
	HrisMetadataExtraDataTypeArrayOfHrisMetadata5 HrisMetadataExtraDataType = "arrayOfHrisMetadata5"
)

type HrisMetadataExtraData struct {
	MapOfAny             map[string]any  `queryParam:"inline" name:"extra_data"`
	Str                  *string         `queryParam:"inline" name:"extra_data"`
	Number               *float64        `queryParam:"inline" name:"extra_data"`
	Boolean              *bool           `queryParam:"inline" name:"extra_data"`
	ArrayOfHrisMetadata5 []HrisMetadata5 `queryParam:"inline" name:"extra_data"`

	Type HrisMetadataExtraDataType
}

func CreateHrisMetadataExtraDataMapOfAny(mapOfAny map[string]any) HrisMetadataExtraData {
	typ := HrisMetadataExtraDataTypeMapOfAny

	return HrisMetadataExtraData{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateHrisMetadataExtraDataStr(str string) HrisMetadataExtraData {
	typ := HrisMetadataExtraDataTypeStr

	return HrisMetadataExtraData{
		Str:  &str,
		Type: typ,
	}
}

func CreateHrisMetadataExtraDataNumber(number float64) HrisMetadataExtraData {
	typ := HrisMetadataExtraDataTypeNumber

	return HrisMetadataExtraData{
		Number: &number,
		Type:   typ,
	}
}

func CreateHrisMetadataExtraDataBoolean(boolean bool) HrisMetadataExtraData {
	typ := HrisMetadataExtraDataTypeBoolean

	return HrisMetadataExtraData{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateHrisMetadataExtraDataArrayOfHrisMetadata5(arrayOfHrisMetadata5 []HrisMetadata5) HrisMetadataExtraData {
	typ := HrisMetadataExtraDataTypeArrayOfHrisMetadata5

	return HrisMetadataExtraData{
		ArrayOfHrisMetadata5: arrayOfHrisMetadata5,
		Type:                 typ,
	}
}

func (u *HrisMetadataExtraData) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = HrisMetadataExtraDataTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = HrisMetadataExtraDataTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = HrisMetadataExtraDataTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = HrisMetadataExtraDataTypeBoolean
		return nil
	}

	var arrayOfHrisMetadata5 []HrisMetadata5 = []HrisMetadata5{}
	if err := utils.UnmarshalJSON(data, &arrayOfHrisMetadata5, "", true, nil); err == nil {
		u.ArrayOfHrisMetadata5 = arrayOfHrisMetadata5
		u.Type = HrisMetadataExtraDataTypeArrayOfHrisMetadata5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for HrisMetadataExtraData", string(data))
}

func (u HrisMetadataExtraData) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfHrisMetadata5 != nil {
		return utils.MarshalJSON(u.ArrayOfHrisMetadata5, "", true)
	}

	return nil, errors.New("could not marshal union type HrisMetadataExtraData: all fields are null")
}

type HrisMetadataFormat string

const (
	HrisMetadataFormatText           HrisMetadataFormat = "TEXT"
	HrisMetadataFormatNumber         HrisMetadataFormat = "NUMBER"
	HrisMetadataFormatDate           HrisMetadataFormat = "DATE"
	HrisMetadataFormatBoolean        HrisMetadataFormat = "BOOLEAN"
	HrisMetadataFormatFile           HrisMetadataFormat = "FILE"
	HrisMetadataFormatTextarea       HrisMetadataFormat = "TEXTAREA"
	HrisMetadataFormatSingleSelect   HrisMetadataFormat = "SINGLE_SELECT"
	HrisMetadataFormatMultipleSelect HrisMetadataFormat = "MULTIPLE_SELECT"
	HrisMetadataFormatMeasurement    HrisMetadataFormat = "MEASUREMENT"
	HrisMetadataFormatPrice          HrisMetadataFormat = "PRICE"
	HrisMetadataFormatYesNo          HrisMetadataFormat = "YES_NO"
	HrisMetadataFormatCurrency       HrisMetadataFormat = "CURRENCY"
	HrisMetadataFormatURL            HrisMetadataFormat = "URL"
)

func (e HrisMetadataFormat) ToPointer() *HrisMetadataFormat {
	return &e
}

type HrisMetadataSchemas1 struct {
}

func (h HrisMetadataSchemas1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HrisMetadataSchemas1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, nil); err != nil {
		return err
	}
	return nil
}

type HrisMetadataSchemas5Type string

const (
	HrisMetadataSchemas5TypeHrisMetadataSchemas1 HrisMetadataSchemas5Type = "HrisMetadata_Schemas_1"
	HrisMetadataSchemas5TypeStr                  HrisMetadataSchemas5Type = "str"
	HrisMetadataSchemas5TypeNumber               HrisMetadataSchemas5Type = "number"
	HrisMetadataSchemas5TypeBoolean              HrisMetadataSchemas5Type = "boolean"
)

type HrisMetadataSchemas5 struct {
	HrisMetadataSchemas1 *HrisMetadataSchemas1 `queryParam:"inline" name:"five"`
	Str                  *string               `queryParam:"inline" name:"five"`
	Number               *float64              `queryParam:"inline" name:"five"`
	Boolean              *bool                 `queryParam:"inline" name:"five"`

	Type HrisMetadataSchemas5Type
}

func CreateHrisMetadataSchemas5HrisMetadataSchemas1(hrisMetadataSchemas1 HrisMetadataSchemas1) HrisMetadataSchemas5 {
	typ := HrisMetadataSchemas5TypeHrisMetadataSchemas1

	return HrisMetadataSchemas5{
		HrisMetadataSchemas1: &hrisMetadataSchemas1,
		Type:                 typ,
	}
}

func CreateHrisMetadataSchemas5Str(str string) HrisMetadataSchemas5 {
	typ := HrisMetadataSchemas5TypeStr

	return HrisMetadataSchemas5{
		Str:  &str,
		Type: typ,
	}
}

func CreateHrisMetadataSchemas5Number(number float64) HrisMetadataSchemas5 {
	typ := HrisMetadataSchemas5TypeNumber

	return HrisMetadataSchemas5{
		Number: &number,
		Type:   typ,
	}
}

func CreateHrisMetadataSchemas5Boolean(boolean bool) HrisMetadataSchemas5 {
	typ := HrisMetadataSchemas5TypeBoolean

	return HrisMetadataSchemas5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *HrisMetadataSchemas5) UnmarshalJSON(data []byte) error {

	var hrisMetadataSchemas1 HrisMetadataSchemas1 = HrisMetadataSchemas1{}
	if err := utils.UnmarshalJSON(data, &hrisMetadataSchemas1, "", true, nil); err == nil {
		u.HrisMetadataSchemas1 = &hrisMetadataSchemas1
		u.Type = HrisMetadataSchemas5TypeHrisMetadataSchemas1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = HrisMetadataSchemas5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = HrisMetadataSchemas5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = HrisMetadataSchemas5TypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for HrisMetadataSchemas5", string(data))
}

func (u HrisMetadataSchemas5) MarshalJSON() ([]byte, error) {
	if u.HrisMetadataSchemas1 != nil {
		return utils.MarshalJSON(u.HrisMetadataSchemas1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type HrisMetadataSchemas5: all fields are null")
}

type HrisMetadataValueType string

const (
	HrisMetadataValueTypeMapOfAny                    HrisMetadataValueType = "mapOfAny"
	HrisMetadataValueTypeStr                         HrisMetadataValueType = "str"
	HrisMetadataValueTypeNumber                      HrisMetadataValueType = "number"
	HrisMetadataValueTypeBoolean                     HrisMetadataValueType = "boolean"
	HrisMetadataValueTypeArrayOfHrisMetadataSchemas5 HrisMetadataValueType = "arrayOfHrisMetadataSchemas5"
)

type HrisMetadataValue struct {
	MapOfAny                    map[string]any         `queryParam:"inline" name:"value"`
	Str                         *string                `queryParam:"inline" name:"value"`
	Number                      *float64               `queryParam:"inline" name:"value"`
	Boolean                     *bool                  `queryParam:"inline" name:"value"`
	ArrayOfHrisMetadataSchemas5 []HrisMetadataSchemas5 `queryParam:"inline" name:"value"`

	Type HrisMetadataValueType
}

func CreateHrisMetadataValueMapOfAny(mapOfAny map[string]any) HrisMetadataValue {
	typ := HrisMetadataValueTypeMapOfAny

	return HrisMetadataValue{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateHrisMetadataValueStr(str string) HrisMetadataValue {
	typ := HrisMetadataValueTypeStr

	return HrisMetadataValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateHrisMetadataValueNumber(number float64) HrisMetadataValue {
	typ := HrisMetadataValueTypeNumber

	return HrisMetadataValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateHrisMetadataValueBoolean(boolean bool) HrisMetadataValue {
	typ := HrisMetadataValueTypeBoolean

	return HrisMetadataValue{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateHrisMetadataValueArrayOfHrisMetadataSchemas5(arrayOfHrisMetadataSchemas5 []HrisMetadataSchemas5) HrisMetadataValue {
	typ := HrisMetadataValueTypeArrayOfHrisMetadataSchemas5

	return HrisMetadataValue{
		ArrayOfHrisMetadataSchemas5: arrayOfHrisMetadataSchemas5,
		Type:                        typ,
	}
}

func (u *HrisMetadataValue) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = HrisMetadataValueTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = HrisMetadataValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = HrisMetadataValueTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = HrisMetadataValueTypeBoolean
		return nil
	}

	var arrayOfHrisMetadataSchemas5 []HrisMetadataSchemas5 = []HrisMetadataSchemas5{}
	if err := utils.UnmarshalJSON(data, &arrayOfHrisMetadataSchemas5, "", true, nil); err == nil {
		u.ArrayOfHrisMetadataSchemas5 = arrayOfHrisMetadataSchemas5
		u.Type = HrisMetadataValueTypeArrayOfHrisMetadataSchemas5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for HrisMetadataValue", string(data))
}

func (u HrisMetadataValue) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfHrisMetadataSchemas5 != nil {
		return utils.MarshalJSON(u.ArrayOfHrisMetadataSchemas5, "", true)
	}

	return nil, errors.New("could not marshal union type HrisMetadataValue: all fields are null")
}

type HrisMetadata struct {
	ExtraData *HrisMetadataExtraData `json:"extra_data,omitempty"`
	Format    *HrisMetadataFormat    `json:"format,omitempty"`
	ID        *string                `json:"id,omitempty"`
	Key       *string                `json:"key,omitempty"`
	Namespace *string                `json:"namespace,omitempty"`
	Slug      *string                `json:"slug,omitempty"`
	Type      *string                `json:"type,omitempty"`
	Value     *HrisMetadataValue     `json:"value,omitempty"`
}

func (h *HrisMetadata) GetExtraData() *HrisMetadataExtraData {
	if h == nil {
		return nil
	}
	return h.ExtraData
}

func (h *HrisMetadata) GetFormat() *HrisMetadataFormat {
	if h == nil {
		return nil
	}
	return h.Format
}

func (h *HrisMetadata) GetID() *string {
	if h == nil {
		return nil
	}
	return h.ID
}

func (h *HrisMetadata) GetKey() *string {
	if h == nil {
		return nil
	}
	return h.Key
}

func (h *HrisMetadata) GetNamespace() *string {
	if h == nil {
		return nil
	}
	return h.Namespace
}

func (h *HrisMetadata) GetSlug() *string {
	if h == nil {
		return nil
	}
	return h.Slug
}

func (h *HrisMetadata) GetType() *string {
	if h == nil {
		return nil
	}
	return h.Type
}

func (h *HrisMetadata) GetValue() *HrisMetadataValue {
	if h == nil {
		return nil
	}
	return h.Value
}
