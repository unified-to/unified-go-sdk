// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
)

type CrmMetadata1 struct {
}

func (c CrmMetadata1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CrmMetadata1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

type CrmMetadata5Type string

const (
	CrmMetadata5TypeCrmMetadata1 CrmMetadata5Type = "CrmMetadata_1"
	CrmMetadata5TypeStr          CrmMetadata5Type = "str"
	CrmMetadata5TypeNumber       CrmMetadata5Type = "number"
	CrmMetadata5TypeBoolean      CrmMetadata5Type = "boolean"
)

type CrmMetadata5 struct {
	CrmMetadata1 *CrmMetadata1 `queryParam:"inline,name=five"`
	Str          *string       `queryParam:"inline,name=five"`
	Number       *float64      `queryParam:"inline,name=five"`
	Boolean      *bool         `queryParam:"inline,name=five"`

	Type CrmMetadata5Type
}

func CreateCrmMetadata5CrmMetadata1(crmMetadata1 CrmMetadata1) CrmMetadata5 {
	typ := CrmMetadata5TypeCrmMetadata1

	return CrmMetadata5{
		CrmMetadata1: &crmMetadata1,
		Type:         typ,
	}
}

func CreateCrmMetadata5Str(str string) CrmMetadata5 {
	typ := CrmMetadata5TypeStr

	return CrmMetadata5{
		Str:  &str,
		Type: typ,
	}
}

func CreateCrmMetadata5Number(number float64) CrmMetadata5 {
	typ := CrmMetadata5TypeNumber

	return CrmMetadata5{
		Number: &number,
		Type:   typ,
	}
}

func CreateCrmMetadata5Boolean(boolean bool) CrmMetadata5 {
	typ := CrmMetadata5TypeBoolean

	return CrmMetadata5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CrmMetadata5) UnmarshalJSON(data []byte) error {

	var crmMetadata1 CrmMetadata1 = CrmMetadata1{}
	if err := utils.UnmarshalJSON(data, &crmMetadata1, "", true, nil); err == nil {
		u.CrmMetadata1 = &crmMetadata1
		u.Type = CrmMetadata5TypeCrmMetadata1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CrmMetadata5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = CrmMetadata5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = CrmMetadata5TypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CrmMetadata5", string(data))
}

func (u CrmMetadata5) MarshalJSON() ([]byte, error) {
	if u.CrmMetadata1 != nil {
		return utils.MarshalJSON(u.CrmMetadata1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CrmMetadata5: all fields are null")
}

type CrmMetadataExtraDataType string

const (
	CrmMetadataExtraDataTypeMapOfAny            CrmMetadataExtraDataType = "mapOfAny"
	CrmMetadataExtraDataTypeStr                 CrmMetadataExtraDataType = "str"
	CrmMetadataExtraDataTypeNumber              CrmMetadataExtraDataType = "number"
	CrmMetadataExtraDataTypeBoolean             CrmMetadataExtraDataType = "boolean"
	CrmMetadataExtraDataTypeArrayOfCrmMetadata5 CrmMetadataExtraDataType = "arrayOfCrmMetadata5"
)

type CrmMetadataExtraData struct {
	MapOfAny            map[string]any `queryParam:"inline,name=extra_data"`
	Str                 *string        `queryParam:"inline,name=extra_data"`
	Number              *float64       `queryParam:"inline,name=extra_data"`
	Boolean             *bool          `queryParam:"inline,name=extra_data"`
	ArrayOfCrmMetadata5 []CrmMetadata5 `queryParam:"inline,name=extra_data"`

	Type CrmMetadataExtraDataType
}

func CreateCrmMetadataExtraDataMapOfAny(mapOfAny map[string]any) CrmMetadataExtraData {
	typ := CrmMetadataExtraDataTypeMapOfAny

	return CrmMetadataExtraData{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCrmMetadataExtraDataStr(str string) CrmMetadataExtraData {
	typ := CrmMetadataExtraDataTypeStr

	return CrmMetadataExtraData{
		Str:  &str,
		Type: typ,
	}
}

func CreateCrmMetadataExtraDataNumber(number float64) CrmMetadataExtraData {
	typ := CrmMetadataExtraDataTypeNumber

	return CrmMetadataExtraData{
		Number: &number,
		Type:   typ,
	}
}

func CreateCrmMetadataExtraDataBoolean(boolean bool) CrmMetadataExtraData {
	typ := CrmMetadataExtraDataTypeBoolean

	return CrmMetadataExtraData{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateCrmMetadataExtraDataArrayOfCrmMetadata5(arrayOfCrmMetadata5 []CrmMetadata5) CrmMetadataExtraData {
	typ := CrmMetadataExtraDataTypeArrayOfCrmMetadata5

	return CrmMetadataExtraData{
		ArrayOfCrmMetadata5: arrayOfCrmMetadata5,
		Type:                typ,
	}
}

func (u *CrmMetadataExtraData) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CrmMetadataExtraDataTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CrmMetadataExtraDataTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = CrmMetadataExtraDataTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = CrmMetadataExtraDataTypeBoolean
		return nil
	}

	var arrayOfCrmMetadata5 []CrmMetadata5 = []CrmMetadata5{}
	if err := utils.UnmarshalJSON(data, &arrayOfCrmMetadata5, "", true, nil); err == nil {
		u.ArrayOfCrmMetadata5 = arrayOfCrmMetadata5
		u.Type = CrmMetadataExtraDataTypeArrayOfCrmMetadata5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CrmMetadataExtraData", string(data))
}

func (u CrmMetadataExtraData) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfCrmMetadata5 != nil {
		return utils.MarshalJSON(u.ArrayOfCrmMetadata5, "", true)
	}

	return nil, errors.New("could not marshal union type CrmMetadataExtraData: all fields are null")
}

type CrmMetadataSchemas1 struct {
}

func (c CrmMetadataSchemas1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CrmMetadataSchemas1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

type CrmMetadataSchemas5Type string

const (
	CrmMetadataSchemas5TypeCrmMetadataSchemas1 CrmMetadataSchemas5Type = "CrmMetadata_Schemas_1"
	CrmMetadataSchemas5TypeStr                 CrmMetadataSchemas5Type = "str"
	CrmMetadataSchemas5TypeNumber              CrmMetadataSchemas5Type = "number"
	CrmMetadataSchemas5TypeBoolean             CrmMetadataSchemas5Type = "boolean"
)

type CrmMetadataSchemas5 struct {
	CrmMetadataSchemas1 *CrmMetadataSchemas1 `queryParam:"inline,name=five"`
	Str                 *string              `queryParam:"inline,name=five"`
	Number              *float64             `queryParam:"inline,name=five"`
	Boolean             *bool                `queryParam:"inline,name=five"`

	Type CrmMetadataSchemas5Type
}

func CreateCrmMetadataSchemas5CrmMetadataSchemas1(crmMetadataSchemas1 CrmMetadataSchemas1) CrmMetadataSchemas5 {
	typ := CrmMetadataSchemas5TypeCrmMetadataSchemas1

	return CrmMetadataSchemas5{
		CrmMetadataSchemas1: &crmMetadataSchemas1,
		Type:                typ,
	}
}

func CreateCrmMetadataSchemas5Str(str string) CrmMetadataSchemas5 {
	typ := CrmMetadataSchemas5TypeStr

	return CrmMetadataSchemas5{
		Str:  &str,
		Type: typ,
	}
}

func CreateCrmMetadataSchemas5Number(number float64) CrmMetadataSchemas5 {
	typ := CrmMetadataSchemas5TypeNumber

	return CrmMetadataSchemas5{
		Number: &number,
		Type:   typ,
	}
}

func CreateCrmMetadataSchemas5Boolean(boolean bool) CrmMetadataSchemas5 {
	typ := CrmMetadataSchemas5TypeBoolean

	return CrmMetadataSchemas5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CrmMetadataSchemas5) UnmarshalJSON(data []byte) error {

	var crmMetadataSchemas1 CrmMetadataSchemas1 = CrmMetadataSchemas1{}
	if err := utils.UnmarshalJSON(data, &crmMetadataSchemas1, "", true, nil); err == nil {
		u.CrmMetadataSchemas1 = &crmMetadataSchemas1
		u.Type = CrmMetadataSchemas5TypeCrmMetadataSchemas1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CrmMetadataSchemas5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = CrmMetadataSchemas5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = CrmMetadataSchemas5TypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CrmMetadataSchemas5", string(data))
}

func (u CrmMetadataSchemas5) MarshalJSON() ([]byte, error) {
	if u.CrmMetadataSchemas1 != nil {
		return utils.MarshalJSON(u.CrmMetadataSchemas1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CrmMetadataSchemas5: all fields are null")
}

type CrmMetadataValueType string

const (
	CrmMetadataValueTypeMapOfAny                   CrmMetadataValueType = "mapOfAny"
	CrmMetadataValueTypeStr                        CrmMetadataValueType = "str"
	CrmMetadataValueTypeNumber                     CrmMetadataValueType = "number"
	CrmMetadataValueTypeBoolean                    CrmMetadataValueType = "boolean"
	CrmMetadataValueTypeArrayOfCrmMetadataSchemas5 CrmMetadataValueType = "arrayOfCrmMetadataSchemas5"
)

type CrmMetadataValue struct {
	MapOfAny                   map[string]any        `queryParam:"inline,name=value"`
	Str                        *string               `queryParam:"inline,name=value"`
	Number                     *float64              `queryParam:"inline,name=value"`
	Boolean                    *bool                 `queryParam:"inline,name=value"`
	ArrayOfCrmMetadataSchemas5 []CrmMetadataSchemas5 `queryParam:"inline,name=value"`

	Type CrmMetadataValueType
}

func CreateCrmMetadataValueMapOfAny(mapOfAny map[string]any) CrmMetadataValue {
	typ := CrmMetadataValueTypeMapOfAny

	return CrmMetadataValue{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCrmMetadataValueStr(str string) CrmMetadataValue {
	typ := CrmMetadataValueTypeStr

	return CrmMetadataValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateCrmMetadataValueNumber(number float64) CrmMetadataValue {
	typ := CrmMetadataValueTypeNumber

	return CrmMetadataValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateCrmMetadataValueBoolean(boolean bool) CrmMetadataValue {
	typ := CrmMetadataValueTypeBoolean

	return CrmMetadataValue{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateCrmMetadataValueArrayOfCrmMetadataSchemas5(arrayOfCrmMetadataSchemas5 []CrmMetadataSchemas5) CrmMetadataValue {
	typ := CrmMetadataValueTypeArrayOfCrmMetadataSchemas5

	return CrmMetadataValue{
		ArrayOfCrmMetadataSchemas5: arrayOfCrmMetadataSchemas5,
		Type:                       typ,
	}
}

func (u *CrmMetadataValue) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CrmMetadataValueTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CrmMetadataValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = CrmMetadataValueTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = CrmMetadataValueTypeBoolean
		return nil
	}

	var arrayOfCrmMetadataSchemas5 []CrmMetadataSchemas5 = []CrmMetadataSchemas5{}
	if err := utils.UnmarshalJSON(data, &arrayOfCrmMetadataSchemas5, "", true, nil); err == nil {
		u.ArrayOfCrmMetadataSchemas5 = arrayOfCrmMetadataSchemas5
		u.Type = CrmMetadataValueTypeArrayOfCrmMetadataSchemas5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CrmMetadataValue", string(data))
}

func (u CrmMetadataValue) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfCrmMetadataSchemas5 != nil {
		return utils.MarshalJSON(u.ArrayOfCrmMetadataSchemas5, "", true)
	}

	return nil, errors.New("could not marshal union type CrmMetadataValue: all fields are null")
}

type CrmMetadata struct {
	ExtraData *CrmMetadataExtraData `json:"extra_data,omitempty"`
	ID        *string               `json:"id,omitempty"`
	Key       *string               `json:"key,omitempty"`
	Namespace *string               `json:"namespace,omitempty"`
	Slug      *string               `json:"slug,omitempty"`
	Type      *string               `json:"type,omitempty"`
	Value     *CrmMetadataValue     `json:"value,omitempty"`
}

func (c *CrmMetadata) GetExtraData() *CrmMetadataExtraData {
	if c == nil {
		return nil
	}
	return c.ExtraData
}

func (c *CrmMetadata) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CrmMetadata) GetKey() *string {
	if c == nil {
		return nil
	}
	return c.Key
}

func (c *CrmMetadata) GetNamespace() *string {
	if c == nil {
		return nil
	}
	return c.Namespace
}

func (c *CrmMetadata) GetSlug() *string {
	if c == nil {
		return nil
	}
	return c.Slug
}

func (c *CrmMetadata) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *CrmMetadata) GetValue() *CrmMetadataValue {
	if c == nil {
		return nil
	}
	return c.Value
}
