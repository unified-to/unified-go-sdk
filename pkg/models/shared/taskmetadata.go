// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
)

type TaskMetadata1 struct {
}

func (t TaskMetadata1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskMetadata1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

type TaskMetadata5Type string

const (
	TaskMetadata5TypeTaskMetadata1 TaskMetadata5Type = "TaskMetadata_1"
	TaskMetadata5TypeStr           TaskMetadata5Type = "str"
	TaskMetadata5TypeNumber        TaskMetadata5Type = "number"
	TaskMetadata5TypeBoolean       TaskMetadata5Type = "boolean"
)

type TaskMetadata5 struct {
	TaskMetadata1 *TaskMetadata1 `queryParam:"inline" name:"five"`
	Str           *string        `queryParam:"inline" name:"five"`
	Number        *float64       `queryParam:"inline" name:"five"`
	Boolean       *bool          `queryParam:"inline" name:"five"`

	Type TaskMetadata5Type
}

func CreateTaskMetadata5TaskMetadata1(taskMetadata1 TaskMetadata1) TaskMetadata5 {
	typ := TaskMetadata5TypeTaskMetadata1

	return TaskMetadata5{
		TaskMetadata1: &taskMetadata1,
		Type:          typ,
	}
}

func CreateTaskMetadata5Str(str string) TaskMetadata5 {
	typ := TaskMetadata5TypeStr

	return TaskMetadata5{
		Str:  &str,
		Type: typ,
	}
}

func CreateTaskMetadata5Number(number float64) TaskMetadata5 {
	typ := TaskMetadata5TypeNumber

	return TaskMetadata5{
		Number: &number,
		Type:   typ,
	}
}

func CreateTaskMetadata5Boolean(boolean bool) TaskMetadata5 {
	typ := TaskMetadata5TypeBoolean

	return TaskMetadata5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *TaskMetadata5) UnmarshalJSON(data []byte) error {

	var taskMetadata1 TaskMetadata1 = TaskMetadata1{}
	if err := utils.UnmarshalJSON(data, &taskMetadata1, "", true, nil); err == nil {
		u.TaskMetadata1 = &taskMetadata1
		u.Type = TaskMetadata5TypeTaskMetadata1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = TaskMetadata5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = TaskMetadata5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = TaskMetadata5TypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadata5", string(data))
}

func (u TaskMetadata5) MarshalJSON() ([]byte, error) {
	if u.TaskMetadata1 != nil {
		return utils.MarshalJSON(u.TaskMetadata1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadata5: all fields are null")
}

type TaskMetadataExtraDataType string

const (
	TaskMetadataExtraDataTypeMapOfAny             TaskMetadataExtraDataType = "mapOfAny"
	TaskMetadataExtraDataTypeStr                  TaskMetadataExtraDataType = "str"
	TaskMetadataExtraDataTypeNumber               TaskMetadataExtraDataType = "number"
	TaskMetadataExtraDataTypeBoolean              TaskMetadataExtraDataType = "boolean"
	TaskMetadataExtraDataTypeArrayOfTaskMetadata5 TaskMetadataExtraDataType = "arrayOfTaskMetadata5"
)

type TaskMetadataExtraData struct {
	MapOfAny             map[string]any  `queryParam:"inline" name:"extra_data"`
	Str                  *string         `queryParam:"inline" name:"extra_data"`
	Number               *float64        `queryParam:"inline" name:"extra_data"`
	Boolean              *bool           `queryParam:"inline" name:"extra_data"`
	ArrayOfTaskMetadata5 []TaskMetadata5 `queryParam:"inline" name:"extra_data"`

	Type TaskMetadataExtraDataType
}

func CreateTaskMetadataExtraDataMapOfAny(mapOfAny map[string]any) TaskMetadataExtraData {
	typ := TaskMetadataExtraDataTypeMapOfAny

	return TaskMetadataExtraData{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateTaskMetadataExtraDataStr(str string) TaskMetadataExtraData {
	typ := TaskMetadataExtraDataTypeStr

	return TaskMetadataExtraData{
		Str:  &str,
		Type: typ,
	}
}

func CreateTaskMetadataExtraDataNumber(number float64) TaskMetadataExtraData {
	typ := TaskMetadataExtraDataTypeNumber

	return TaskMetadataExtraData{
		Number: &number,
		Type:   typ,
	}
}

func CreateTaskMetadataExtraDataBoolean(boolean bool) TaskMetadataExtraData {
	typ := TaskMetadataExtraDataTypeBoolean

	return TaskMetadataExtraData{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateTaskMetadataExtraDataArrayOfTaskMetadata5(arrayOfTaskMetadata5 []TaskMetadata5) TaskMetadataExtraData {
	typ := TaskMetadataExtraDataTypeArrayOfTaskMetadata5

	return TaskMetadataExtraData{
		ArrayOfTaskMetadata5: arrayOfTaskMetadata5,
		Type:                 typ,
	}
}

func (u *TaskMetadataExtraData) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = TaskMetadataExtraDataTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = TaskMetadataExtraDataTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = TaskMetadataExtraDataTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = TaskMetadataExtraDataTypeBoolean
		return nil
	}

	var arrayOfTaskMetadata5 []TaskMetadata5 = []TaskMetadata5{}
	if err := utils.UnmarshalJSON(data, &arrayOfTaskMetadata5, "", true, nil); err == nil {
		u.ArrayOfTaskMetadata5 = arrayOfTaskMetadata5
		u.Type = TaskMetadataExtraDataTypeArrayOfTaskMetadata5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadataExtraData", string(data))
}

func (u TaskMetadataExtraData) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfTaskMetadata5 != nil {
		return utils.MarshalJSON(u.ArrayOfTaskMetadata5, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadataExtraData: all fields are null")
}

type TaskMetadataFormat string

const (
	TaskMetadataFormatText           TaskMetadataFormat = "TEXT"
	TaskMetadataFormatNumber         TaskMetadataFormat = "NUMBER"
	TaskMetadataFormatDate           TaskMetadataFormat = "DATE"
	TaskMetadataFormatBoolean        TaskMetadataFormat = "BOOLEAN"
	TaskMetadataFormatFile           TaskMetadataFormat = "FILE"
	TaskMetadataFormatTextarea       TaskMetadataFormat = "TEXTAREA"
	TaskMetadataFormatSingleSelect   TaskMetadataFormat = "SINGLE_SELECT"
	TaskMetadataFormatMultipleSelect TaskMetadataFormat = "MULTIPLE_SELECT"
	TaskMetadataFormatMeasurement    TaskMetadataFormat = "MEASUREMENT"
	TaskMetadataFormatPrice          TaskMetadataFormat = "PRICE"
	TaskMetadataFormatYesNo          TaskMetadataFormat = "YES_NO"
	TaskMetadataFormatCurrency       TaskMetadataFormat = "CURRENCY"
	TaskMetadataFormatURL            TaskMetadataFormat = "URL"
)

func (e TaskMetadataFormat) ToPointer() *TaskMetadataFormat {
	return &e
}

type TaskMetadataSchemas1 struct {
}

func (t TaskMetadataSchemas1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskMetadataSchemas1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

type TaskMetadataSchemas5Type string

const (
	TaskMetadataSchemas5TypeTaskMetadataSchemas1 TaskMetadataSchemas5Type = "TaskMetadata_Schemas_1"
	TaskMetadataSchemas5TypeStr                  TaskMetadataSchemas5Type = "str"
	TaskMetadataSchemas5TypeNumber               TaskMetadataSchemas5Type = "number"
	TaskMetadataSchemas5TypeBoolean              TaskMetadataSchemas5Type = "boolean"
)

type TaskMetadataSchemas5 struct {
	TaskMetadataSchemas1 *TaskMetadataSchemas1 `queryParam:"inline" name:"five"`
	Str                  *string               `queryParam:"inline" name:"five"`
	Number               *float64              `queryParam:"inline" name:"five"`
	Boolean              *bool                 `queryParam:"inline" name:"five"`

	Type TaskMetadataSchemas5Type
}

func CreateTaskMetadataSchemas5TaskMetadataSchemas1(taskMetadataSchemas1 TaskMetadataSchemas1) TaskMetadataSchemas5 {
	typ := TaskMetadataSchemas5TypeTaskMetadataSchemas1

	return TaskMetadataSchemas5{
		TaskMetadataSchemas1: &taskMetadataSchemas1,
		Type:                 typ,
	}
}

func CreateTaskMetadataSchemas5Str(str string) TaskMetadataSchemas5 {
	typ := TaskMetadataSchemas5TypeStr

	return TaskMetadataSchemas5{
		Str:  &str,
		Type: typ,
	}
}

func CreateTaskMetadataSchemas5Number(number float64) TaskMetadataSchemas5 {
	typ := TaskMetadataSchemas5TypeNumber

	return TaskMetadataSchemas5{
		Number: &number,
		Type:   typ,
	}
}

func CreateTaskMetadataSchemas5Boolean(boolean bool) TaskMetadataSchemas5 {
	typ := TaskMetadataSchemas5TypeBoolean

	return TaskMetadataSchemas5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *TaskMetadataSchemas5) UnmarshalJSON(data []byte) error {

	var taskMetadataSchemas1 TaskMetadataSchemas1 = TaskMetadataSchemas1{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemas1, "", true, nil); err == nil {
		u.TaskMetadataSchemas1 = &taskMetadataSchemas1
		u.Type = TaskMetadataSchemas5TypeTaskMetadataSchemas1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = TaskMetadataSchemas5TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = TaskMetadataSchemas5TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = TaskMetadataSchemas5TypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadataSchemas5", string(data))
}

func (u TaskMetadataSchemas5) MarshalJSON() ([]byte, error) {
	if u.TaskMetadataSchemas1 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemas1, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadataSchemas5: all fields are null")
}

type TaskMetadataValueType string

const (
	TaskMetadataValueTypeMapOfAny                    TaskMetadataValueType = "mapOfAny"
	TaskMetadataValueTypeStr                         TaskMetadataValueType = "str"
	TaskMetadataValueTypeNumber                      TaskMetadataValueType = "number"
	TaskMetadataValueTypeBoolean                     TaskMetadataValueType = "boolean"
	TaskMetadataValueTypeArrayOfTaskMetadataSchemas5 TaskMetadataValueType = "arrayOfTaskMetadataSchemas5"
)

type TaskMetadataValue struct {
	MapOfAny                    map[string]any         `queryParam:"inline" name:"value"`
	Str                         *string                `queryParam:"inline" name:"value"`
	Number                      *float64               `queryParam:"inline" name:"value"`
	Boolean                     *bool                  `queryParam:"inline" name:"value"`
	ArrayOfTaskMetadataSchemas5 []TaskMetadataSchemas5 `queryParam:"inline" name:"value"`

	Type TaskMetadataValueType
}

func CreateTaskMetadataValueMapOfAny(mapOfAny map[string]any) TaskMetadataValue {
	typ := TaskMetadataValueTypeMapOfAny

	return TaskMetadataValue{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateTaskMetadataValueStr(str string) TaskMetadataValue {
	typ := TaskMetadataValueTypeStr

	return TaskMetadataValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateTaskMetadataValueNumber(number float64) TaskMetadataValue {
	typ := TaskMetadataValueTypeNumber

	return TaskMetadataValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateTaskMetadataValueBoolean(boolean bool) TaskMetadataValue {
	typ := TaskMetadataValueTypeBoolean

	return TaskMetadataValue{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateTaskMetadataValueArrayOfTaskMetadataSchemas5(arrayOfTaskMetadataSchemas5 []TaskMetadataSchemas5) TaskMetadataValue {
	typ := TaskMetadataValueTypeArrayOfTaskMetadataSchemas5

	return TaskMetadataValue{
		ArrayOfTaskMetadataSchemas5: arrayOfTaskMetadataSchemas5,
		Type:                        typ,
	}
}

func (u *TaskMetadataValue) UnmarshalJSON(data []byte) error {

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = TaskMetadataValueTypeMapOfAny
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = TaskMetadataValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = TaskMetadataValueTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = TaskMetadataValueTypeBoolean
		return nil
	}

	var arrayOfTaskMetadataSchemas5 []TaskMetadataSchemas5 = []TaskMetadataSchemas5{}
	if err := utils.UnmarshalJSON(data, &arrayOfTaskMetadataSchemas5, "", true, nil); err == nil {
		u.ArrayOfTaskMetadataSchemas5 = arrayOfTaskMetadataSchemas5
		u.Type = TaskMetadataValueTypeArrayOfTaskMetadataSchemas5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadataValue", string(data))
}

func (u TaskMetadataValue) MarshalJSON() ([]byte, error) {
	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfTaskMetadataSchemas5 != nil {
		return utils.MarshalJSON(u.ArrayOfTaskMetadataSchemas5, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadataValue: all fields are null")
}

type TaskMetadata struct {
	ExtraData *TaskMetadataExtraData `json:"extra_data,omitempty"`
	Format    *TaskMetadataFormat    `json:"format,omitempty"`
	ID        *string                `json:"id,omitempty"`
	Key       *string                `json:"key,omitempty"`
	Namespace *string                `json:"namespace,omitempty"`
	Slug      *string                `json:"slug,omitempty"`
	Type      *string                `json:"type,omitempty"`
	Value     *TaskMetadataValue     `json:"value,omitempty"`
}

func (t *TaskMetadata) GetExtraData() *TaskMetadataExtraData {
	if t == nil {
		return nil
	}
	return t.ExtraData
}

func (t *TaskMetadata) GetFormat() *TaskMetadataFormat {
	if t == nil {
		return nil
	}
	return t.Format
}

func (t *TaskMetadata) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TaskMetadata) GetKey() *string {
	if t == nil {
		return nil
	}
	return t.Key
}

func (t *TaskMetadata) GetNamespace() *string {
	if t == nil {
		return nil
	}
	return t.Namespace
}

func (t *TaskMetadata) GetSlug() *string {
	if t == nil {
		return nil
	}
	return t.Slug
}

func (t *TaskMetadata) GetType() *string {
	if t == nil {
		return nil
	}
	return t.Type
}

func (t *TaskMetadata) GetValue() *TaskMetadataValue {
	if t == nil {
		return nil
	}
	return t.Value
}
