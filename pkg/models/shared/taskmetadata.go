// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
)

type TaskMetadataSchemasExtraData52 struct {
}

type TaskMetadata5Type string

const (
	TaskMetadata5TypeArrayOfAny                     TaskMetadata5Type = "arrayOfAny"
	TaskMetadata5TypeTaskMetadataSchemasExtraData52 TaskMetadata5Type = "TaskMetadata_Schemas_extra_data_5_2"
)

type TaskMetadata5 struct {
	ArrayOfAny                     []any                           `queryParam:"inline"`
	TaskMetadataSchemasExtraData52 *TaskMetadataSchemasExtraData52 `queryParam:"inline"`

	Type TaskMetadata5Type
}

func CreateTaskMetadata5ArrayOfAny(arrayOfAny []any) TaskMetadata5 {
	typ := TaskMetadata5TypeArrayOfAny

	return TaskMetadata5{
		ArrayOfAny: arrayOfAny,
		Type:       typ,
	}
}

func CreateTaskMetadata5TaskMetadataSchemasExtraData52(taskMetadataSchemasExtraData52 TaskMetadataSchemasExtraData52) TaskMetadata5 {
	typ := TaskMetadata5TypeTaskMetadataSchemasExtraData52

	return TaskMetadata5{
		TaskMetadataSchemasExtraData52: &taskMetadataSchemasExtraData52,
		Type:                           typ,
	}
}

func (u *TaskMetadata5) UnmarshalJSON(data []byte) error {

	var taskMetadataSchemasExtraData52 TaskMetadataSchemasExtraData52 = TaskMetadataSchemasExtraData52{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemasExtraData52, "", true, true); err == nil {
		u.TaskMetadataSchemasExtraData52 = &taskMetadataSchemasExtraData52
		u.Type = TaskMetadata5TypeTaskMetadataSchemasExtraData52
		return nil
	}

	var arrayOfAny []any = []any{}
	if err := utils.UnmarshalJSON(data, &arrayOfAny, "", true, true); err == nil {
		u.ArrayOfAny = arrayOfAny
		u.Type = TaskMetadata5TypeArrayOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadata5", string(data))
}

func (u TaskMetadata5) MarshalJSON() ([]byte, error) {
	if u.ArrayOfAny != nil {
		return utils.MarshalJSON(u.ArrayOfAny, "", true)
	}

	if u.TaskMetadataSchemasExtraData52 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemasExtraData52, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadata5: all fields are null")
}

type TaskMetadataSchemasExtraData2 struct {
}

type TaskMetadata4Type string

const (
	TaskMetadata4TypeBoolean                       TaskMetadata4Type = "boolean"
	TaskMetadata4TypeTaskMetadataSchemasExtraData2 TaskMetadata4Type = "TaskMetadata_Schemas_extra_data_2"
)

type TaskMetadata4 struct {
	Boolean                       *bool                          `queryParam:"inline"`
	TaskMetadataSchemasExtraData2 *TaskMetadataSchemasExtraData2 `queryParam:"inline"`

	Type TaskMetadata4Type
}

func CreateTaskMetadata4Boolean(boolean bool) TaskMetadata4 {
	typ := TaskMetadata4TypeBoolean

	return TaskMetadata4{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateTaskMetadata4TaskMetadataSchemasExtraData2(taskMetadataSchemasExtraData2 TaskMetadataSchemasExtraData2) TaskMetadata4 {
	typ := TaskMetadata4TypeTaskMetadataSchemasExtraData2

	return TaskMetadata4{
		TaskMetadataSchemasExtraData2: &taskMetadataSchemasExtraData2,
		Type:                          typ,
	}
}

func (u *TaskMetadata4) UnmarshalJSON(data []byte) error {

	var taskMetadataSchemasExtraData2 TaskMetadataSchemasExtraData2 = TaskMetadataSchemasExtraData2{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemasExtraData2, "", true, true); err == nil {
		u.TaskMetadataSchemasExtraData2 = &taskMetadataSchemasExtraData2
		u.Type = TaskMetadata4TypeTaskMetadataSchemasExtraData2
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = TaskMetadata4TypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadata4", string(data))
}

func (u TaskMetadata4) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.TaskMetadataSchemasExtraData2 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemasExtraData2, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadata4: all fields are null")
}

type TaskMetadataSchemasExtraData32 struct {
}

type TaskMetadata3Type string

const (
	TaskMetadata3TypeNumber                         TaskMetadata3Type = "number"
	TaskMetadata3TypeTaskMetadataSchemasExtraData32 TaskMetadata3Type = "TaskMetadata_Schemas_extra_data_3_2"
)

type TaskMetadata3 struct {
	Number                         *float64                        `queryParam:"inline"`
	TaskMetadataSchemasExtraData32 *TaskMetadataSchemasExtraData32 `queryParam:"inline"`

	Type TaskMetadata3Type
}

func CreateTaskMetadata3Number(number float64) TaskMetadata3 {
	typ := TaskMetadata3TypeNumber

	return TaskMetadata3{
		Number: &number,
		Type:   typ,
	}
}

func CreateTaskMetadata3TaskMetadataSchemasExtraData32(taskMetadataSchemasExtraData32 TaskMetadataSchemasExtraData32) TaskMetadata3 {
	typ := TaskMetadata3TypeTaskMetadataSchemasExtraData32

	return TaskMetadata3{
		TaskMetadataSchemasExtraData32: &taskMetadataSchemasExtraData32,
		Type:                           typ,
	}
}

func (u *TaskMetadata3) UnmarshalJSON(data []byte) error {

	var taskMetadataSchemasExtraData32 TaskMetadataSchemasExtraData32 = TaskMetadataSchemasExtraData32{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemasExtraData32, "", true, true); err == nil {
		u.TaskMetadataSchemasExtraData32 = &taskMetadataSchemasExtraData32
		u.Type = TaskMetadata3TypeTaskMetadataSchemasExtraData32
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = TaskMetadata3TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadata3", string(data))
}

func (u TaskMetadata3) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.TaskMetadataSchemasExtraData32 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemasExtraData32, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadata3: all fields are null")
}

type TaskMetadataSchemasExtraData22 struct {
}

type TaskMetadata2Type string

const (
	TaskMetadata2TypeStr                            TaskMetadata2Type = "str"
	TaskMetadata2TypeTaskMetadataSchemasExtraData22 TaskMetadata2Type = "TaskMetadata_Schemas_extra_data_2_2"
)

type TaskMetadata2 struct {
	Str                            *string                         `queryParam:"inline"`
	TaskMetadataSchemasExtraData22 *TaskMetadataSchemasExtraData22 `queryParam:"inline"`

	Type TaskMetadata2Type
}

func CreateTaskMetadata2Str(str string) TaskMetadata2 {
	typ := TaskMetadata2TypeStr

	return TaskMetadata2{
		Str:  &str,
		Type: typ,
	}
}

func CreateTaskMetadata2TaskMetadataSchemasExtraData22(taskMetadataSchemasExtraData22 TaskMetadataSchemasExtraData22) TaskMetadata2 {
	typ := TaskMetadata2TypeTaskMetadataSchemasExtraData22

	return TaskMetadata2{
		TaskMetadataSchemasExtraData22: &taskMetadataSchemasExtraData22,
		Type:                           typ,
	}
}

func (u *TaskMetadata2) UnmarshalJSON(data []byte) error {

	var taskMetadataSchemasExtraData22 TaskMetadataSchemasExtraData22 = TaskMetadataSchemasExtraData22{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemasExtraData22, "", true, true); err == nil {
		u.TaskMetadataSchemasExtraData22 = &taskMetadataSchemasExtraData22
		u.Type = TaskMetadata2TypeTaskMetadataSchemasExtraData22
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TaskMetadata2TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadata2", string(data))
}

func (u TaskMetadata2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.TaskMetadataSchemasExtraData22 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemasExtraData22, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadata2: all fields are null")
}

type TaskMetadata1 struct {
}

type TaskMetadataExtraDataType string

const (
	TaskMetadataExtraDataTypeTaskMetadata1 TaskMetadataExtraDataType = "TaskMetadata_1"
	TaskMetadataExtraDataTypeTaskMetadata2 TaskMetadataExtraDataType = "TaskMetadata_2"
	TaskMetadataExtraDataTypeTaskMetadata3 TaskMetadataExtraDataType = "TaskMetadata_3"
	TaskMetadataExtraDataTypeTaskMetadata4 TaskMetadataExtraDataType = "TaskMetadata_4"
	TaskMetadataExtraDataTypeTaskMetadata5 TaskMetadataExtraDataType = "TaskMetadata_5"
)

type TaskMetadataExtraData struct {
	TaskMetadata1 *TaskMetadata1 `queryParam:"inline"`
	TaskMetadata2 *TaskMetadata2 `queryParam:"inline"`
	TaskMetadata3 *TaskMetadata3 `queryParam:"inline"`
	TaskMetadata4 *TaskMetadata4 `queryParam:"inline"`
	TaskMetadata5 *TaskMetadata5 `queryParam:"inline"`

	Type TaskMetadataExtraDataType
}

func CreateTaskMetadataExtraDataTaskMetadata1(taskMetadata1 TaskMetadata1) TaskMetadataExtraData {
	typ := TaskMetadataExtraDataTypeTaskMetadata1

	return TaskMetadataExtraData{
		TaskMetadata1: &taskMetadata1,
		Type:          typ,
	}
}

func CreateTaskMetadataExtraDataTaskMetadata2(taskMetadata2 TaskMetadata2) TaskMetadataExtraData {
	typ := TaskMetadataExtraDataTypeTaskMetadata2

	return TaskMetadataExtraData{
		TaskMetadata2: &taskMetadata2,
		Type:          typ,
	}
}

func CreateTaskMetadataExtraDataTaskMetadata3(taskMetadata3 TaskMetadata3) TaskMetadataExtraData {
	typ := TaskMetadataExtraDataTypeTaskMetadata3

	return TaskMetadataExtraData{
		TaskMetadata3: &taskMetadata3,
		Type:          typ,
	}
}

func CreateTaskMetadataExtraDataTaskMetadata4(taskMetadata4 TaskMetadata4) TaskMetadataExtraData {
	typ := TaskMetadataExtraDataTypeTaskMetadata4

	return TaskMetadataExtraData{
		TaskMetadata4: &taskMetadata4,
		Type:          typ,
	}
}

func CreateTaskMetadataExtraDataTaskMetadata5(taskMetadata5 TaskMetadata5) TaskMetadataExtraData {
	typ := TaskMetadataExtraDataTypeTaskMetadata5

	return TaskMetadataExtraData{
		TaskMetadata5: &taskMetadata5,
		Type:          typ,
	}
}

func (u *TaskMetadataExtraData) UnmarshalJSON(data []byte) error {

	var taskMetadata1 TaskMetadata1 = TaskMetadata1{}
	if err := utils.UnmarshalJSON(data, &taskMetadata1, "", true, true); err == nil {
		u.TaskMetadata1 = &taskMetadata1
		u.Type = TaskMetadataExtraDataTypeTaskMetadata1
		return nil
	}

	var taskMetadata2 TaskMetadata2 = TaskMetadata2{}
	if err := utils.UnmarshalJSON(data, &taskMetadata2, "", true, true); err == nil {
		u.TaskMetadata2 = &taskMetadata2
		u.Type = TaskMetadataExtraDataTypeTaskMetadata2
		return nil
	}

	var taskMetadata3 TaskMetadata3 = TaskMetadata3{}
	if err := utils.UnmarshalJSON(data, &taskMetadata3, "", true, true); err == nil {
		u.TaskMetadata3 = &taskMetadata3
		u.Type = TaskMetadataExtraDataTypeTaskMetadata3
		return nil
	}

	var taskMetadata4 TaskMetadata4 = TaskMetadata4{}
	if err := utils.UnmarshalJSON(data, &taskMetadata4, "", true, true); err == nil {
		u.TaskMetadata4 = &taskMetadata4
		u.Type = TaskMetadataExtraDataTypeTaskMetadata4
		return nil
	}

	var taskMetadata5 TaskMetadata5 = TaskMetadata5{}
	if err := utils.UnmarshalJSON(data, &taskMetadata5, "", true, true); err == nil {
		u.TaskMetadata5 = &taskMetadata5
		u.Type = TaskMetadataExtraDataTypeTaskMetadata5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadataExtraData", string(data))
}

func (u TaskMetadataExtraData) MarshalJSON() ([]byte, error) {
	if u.TaskMetadata1 != nil {
		return utils.MarshalJSON(u.TaskMetadata1, "", true)
	}

	if u.TaskMetadata2 != nil {
		return utils.MarshalJSON(u.TaskMetadata2, "", true)
	}

	if u.TaskMetadata3 != nil {
		return utils.MarshalJSON(u.TaskMetadata3, "", true)
	}

	if u.TaskMetadata4 != nil {
		return utils.MarshalJSON(u.TaskMetadata4, "", true)
	}

	if u.TaskMetadata5 != nil {
		return utils.MarshalJSON(u.TaskMetadata5, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadataExtraData: all fields are null")
}

type TaskMetadataFormat string

const (
	TaskMetadataFormatText           TaskMetadataFormat = "TEXT"
	TaskMetadataFormatNumber         TaskMetadataFormat = "NUMBER"
	TaskMetadataFormatDate           TaskMetadataFormat = "DATE"
	TaskMetadataFormatBoolean        TaskMetadataFormat = "BOOLEAN"
	TaskMetadataFormatFile           TaskMetadataFormat = "FILE"
	TaskMetadataFormatTextarea       TaskMetadataFormat = "TEXTAREA"
	TaskMetadataFormatSingleSelect   TaskMetadataFormat = "SINGLE_SELECT"
	TaskMetadataFormatMultipleSelect TaskMetadataFormat = "MULTIPLE_SELECT"
	TaskMetadataFormatMeasurement    TaskMetadataFormat = "MEASUREMENT"
	TaskMetadataFormatPrice          TaskMetadataFormat = "PRICE"
	TaskMetadataFormatYesNo          TaskMetadataFormat = "YES_NO"
	TaskMetadataFormatCurrency       TaskMetadataFormat = "CURRENCY"
	TaskMetadataFormatURL            TaskMetadataFormat = "URL"
)

func (e TaskMetadataFormat) ToPointer() *TaskMetadataFormat {
	return &e
}

type TaskMetadataSchemasValue52 struct {
}

type TaskMetadataSchemas5Type string

const (
	TaskMetadataSchemas5TypeArrayOfAny                 TaskMetadataSchemas5Type = "arrayOfAny"
	TaskMetadataSchemas5TypeTaskMetadataSchemasValue52 TaskMetadataSchemas5Type = "TaskMetadata_Schemas_value_5_2"
)

type TaskMetadataSchemas5 struct {
	ArrayOfAny                 []any                       `queryParam:"inline"`
	TaskMetadataSchemasValue52 *TaskMetadataSchemasValue52 `queryParam:"inline"`

	Type TaskMetadataSchemas5Type
}

func CreateTaskMetadataSchemas5ArrayOfAny(arrayOfAny []any) TaskMetadataSchemas5 {
	typ := TaskMetadataSchemas5TypeArrayOfAny

	return TaskMetadataSchemas5{
		ArrayOfAny: arrayOfAny,
		Type:       typ,
	}
}

func CreateTaskMetadataSchemas5TaskMetadataSchemasValue52(taskMetadataSchemasValue52 TaskMetadataSchemasValue52) TaskMetadataSchemas5 {
	typ := TaskMetadataSchemas5TypeTaskMetadataSchemasValue52

	return TaskMetadataSchemas5{
		TaskMetadataSchemasValue52: &taskMetadataSchemasValue52,
		Type:                       typ,
	}
}

func (u *TaskMetadataSchemas5) UnmarshalJSON(data []byte) error {

	var taskMetadataSchemasValue52 TaskMetadataSchemasValue52 = TaskMetadataSchemasValue52{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemasValue52, "", true, true); err == nil {
		u.TaskMetadataSchemasValue52 = &taskMetadataSchemasValue52
		u.Type = TaskMetadataSchemas5TypeTaskMetadataSchemasValue52
		return nil
	}

	var arrayOfAny []any = []any{}
	if err := utils.UnmarshalJSON(data, &arrayOfAny, "", true, true); err == nil {
		u.ArrayOfAny = arrayOfAny
		u.Type = TaskMetadataSchemas5TypeArrayOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadataSchemas5", string(data))
}

func (u TaskMetadataSchemas5) MarshalJSON() ([]byte, error) {
	if u.ArrayOfAny != nil {
		return utils.MarshalJSON(u.ArrayOfAny, "", true)
	}

	if u.TaskMetadataSchemasValue52 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemasValue52, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadataSchemas5: all fields are null")
}

type TaskMetadataSchemasValue42 struct {
}

type TaskMetadataSchemas4Type string

const (
	TaskMetadataSchemas4TypeBoolean                    TaskMetadataSchemas4Type = "boolean"
	TaskMetadataSchemas4TypeTaskMetadataSchemasValue42 TaskMetadataSchemas4Type = "TaskMetadata_Schemas_value_4_2"
)

type TaskMetadataSchemas4 struct {
	Boolean                    *bool                       `queryParam:"inline"`
	TaskMetadataSchemasValue42 *TaskMetadataSchemasValue42 `queryParam:"inline"`

	Type TaskMetadataSchemas4Type
}

func CreateTaskMetadataSchemas4Boolean(boolean bool) TaskMetadataSchemas4 {
	typ := TaskMetadataSchemas4TypeBoolean

	return TaskMetadataSchemas4{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateTaskMetadataSchemas4TaskMetadataSchemasValue42(taskMetadataSchemasValue42 TaskMetadataSchemasValue42) TaskMetadataSchemas4 {
	typ := TaskMetadataSchemas4TypeTaskMetadataSchemasValue42

	return TaskMetadataSchemas4{
		TaskMetadataSchemasValue42: &taskMetadataSchemasValue42,
		Type:                       typ,
	}
}

func (u *TaskMetadataSchemas4) UnmarshalJSON(data []byte) error {

	var taskMetadataSchemasValue42 TaskMetadataSchemasValue42 = TaskMetadataSchemasValue42{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemasValue42, "", true, true); err == nil {
		u.TaskMetadataSchemasValue42 = &taskMetadataSchemasValue42
		u.Type = TaskMetadataSchemas4TypeTaskMetadataSchemasValue42
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = TaskMetadataSchemas4TypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadataSchemas4", string(data))
}

func (u TaskMetadataSchemas4) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.TaskMetadataSchemasValue42 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemasValue42, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadataSchemas4: all fields are null")
}

type TaskMetadataSchemasValue32 struct {
}

type TaskMetadataSchemas3Type string

const (
	TaskMetadataSchemas3TypeNumber                     TaskMetadataSchemas3Type = "number"
	TaskMetadataSchemas3TypeTaskMetadataSchemasValue32 TaskMetadataSchemas3Type = "TaskMetadata_Schemas_value_3_2"
)

type TaskMetadataSchemas3 struct {
	Number                     *float64                    `queryParam:"inline"`
	TaskMetadataSchemasValue32 *TaskMetadataSchemasValue32 `queryParam:"inline"`

	Type TaskMetadataSchemas3Type
}

func CreateTaskMetadataSchemas3Number(number float64) TaskMetadataSchemas3 {
	typ := TaskMetadataSchemas3TypeNumber

	return TaskMetadataSchemas3{
		Number: &number,
		Type:   typ,
	}
}

func CreateTaskMetadataSchemas3TaskMetadataSchemasValue32(taskMetadataSchemasValue32 TaskMetadataSchemasValue32) TaskMetadataSchemas3 {
	typ := TaskMetadataSchemas3TypeTaskMetadataSchemasValue32

	return TaskMetadataSchemas3{
		TaskMetadataSchemasValue32: &taskMetadataSchemasValue32,
		Type:                       typ,
	}
}

func (u *TaskMetadataSchemas3) UnmarshalJSON(data []byte) error {

	var taskMetadataSchemasValue32 TaskMetadataSchemasValue32 = TaskMetadataSchemasValue32{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemasValue32, "", true, true); err == nil {
		u.TaskMetadataSchemasValue32 = &taskMetadataSchemasValue32
		u.Type = TaskMetadataSchemas3TypeTaskMetadataSchemasValue32
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = TaskMetadataSchemas3TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadataSchemas3", string(data))
}

func (u TaskMetadataSchemas3) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.TaskMetadataSchemasValue32 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemasValue32, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadataSchemas3: all fields are null")
}

type TaskMetadataSchemasValue2 struct {
}

type TaskMetadataSchemas2Type string

const (
	TaskMetadataSchemas2TypeStr                       TaskMetadataSchemas2Type = "str"
	TaskMetadataSchemas2TypeTaskMetadataSchemasValue2 TaskMetadataSchemas2Type = "TaskMetadata_Schemas_value_2"
)

type TaskMetadataSchemas2 struct {
	Str                       *string                    `queryParam:"inline"`
	TaskMetadataSchemasValue2 *TaskMetadataSchemasValue2 `queryParam:"inline"`

	Type TaskMetadataSchemas2Type
}

func CreateTaskMetadataSchemas2Str(str string) TaskMetadataSchemas2 {
	typ := TaskMetadataSchemas2TypeStr

	return TaskMetadataSchemas2{
		Str:  &str,
		Type: typ,
	}
}

func CreateTaskMetadataSchemas2TaskMetadataSchemasValue2(taskMetadataSchemasValue2 TaskMetadataSchemasValue2) TaskMetadataSchemas2 {
	typ := TaskMetadataSchemas2TypeTaskMetadataSchemasValue2

	return TaskMetadataSchemas2{
		TaskMetadataSchemasValue2: &taskMetadataSchemasValue2,
		Type:                      typ,
	}
}

func (u *TaskMetadataSchemas2) UnmarshalJSON(data []byte) error {

	var taskMetadataSchemasValue2 TaskMetadataSchemasValue2 = TaskMetadataSchemasValue2{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemasValue2, "", true, true); err == nil {
		u.TaskMetadataSchemasValue2 = &taskMetadataSchemasValue2
		u.Type = TaskMetadataSchemas2TypeTaskMetadataSchemasValue2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TaskMetadataSchemas2TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadataSchemas2", string(data))
}

func (u TaskMetadataSchemas2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.TaskMetadataSchemasValue2 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemasValue2, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadataSchemas2: all fields are null")
}

type TaskMetadataSchemas1 struct {
}

type TaskMetadataValueType string

const (
	TaskMetadataValueTypeTaskMetadataSchemas1 TaskMetadataValueType = "TaskMetadata_Schemas_1"
	TaskMetadataValueTypeTaskMetadataSchemas2 TaskMetadataValueType = "TaskMetadata_Schemas_2"
	TaskMetadataValueTypeTaskMetadataSchemas3 TaskMetadataValueType = "TaskMetadata_Schemas_3"
	TaskMetadataValueTypeTaskMetadataSchemas4 TaskMetadataValueType = "TaskMetadata_Schemas_4"
	TaskMetadataValueTypeTaskMetadataSchemas5 TaskMetadataValueType = "TaskMetadata_Schemas_5"
)

type TaskMetadataValue struct {
	TaskMetadataSchemas1 *TaskMetadataSchemas1 `queryParam:"inline"`
	TaskMetadataSchemas2 *TaskMetadataSchemas2 `queryParam:"inline"`
	TaskMetadataSchemas3 *TaskMetadataSchemas3 `queryParam:"inline"`
	TaskMetadataSchemas4 *TaskMetadataSchemas4 `queryParam:"inline"`
	TaskMetadataSchemas5 *TaskMetadataSchemas5 `queryParam:"inline"`

	Type TaskMetadataValueType
}

func CreateTaskMetadataValueTaskMetadataSchemas1(taskMetadataSchemas1 TaskMetadataSchemas1) TaskMetadataValue {
	typ := TaskMetadataValueTypeTaskMetadataSchemas1

	return TaskMetadataValue{
		TaskMetadataSchemas1: &taskMetadataSchemas1,
		Type:                 typ,
	}
}

func CreateTaskMetadataValueTaskMetadataSchemas2(taskMetadataSchemas2 TaskMetadataSchemas2) TaskMetadataValue {
	typ := TaskMetadataValueTypeTaskMetadataSchemas2

	return TaskMetadataValue{
		TaskMetadataSchemas2: &taskMetadataSchemas2,
		Type:                 typ,
	}
}

func CreateTaskMetadataValueTaskMetadataSchemas3(taskMetadataSchemas3 TaskMetadataSchemas3) TaskMetadataValue {
	typ := TaskMetadataValueTypeTaskMetadataSchemas3

	return TaskMetadataValue{
		TaskMetadataSchemas3: &taskMetadataSchemas3,
		Type:                 typ,
	}
}

func CreateTaskMetadataValueTaskMetadataSchemas4(taskMetadataSchemas4 TaskMetadataSchemas4) TaskMetadataValue {
	typ := TaskMetadataValueTypeTaskMetadataSchemas4

	return TaskMetadataValue{
		TaskMetadataSchemas4: &taskMetadataSchemas4,
		Type:                 typ,
	}
}

func CreateTaskMetadataValueTaskMetadataSchemas5(taskMetadataSchemas5 TaskMetadataSchemas5) TaskMetadataValue {
	typ := TaskMetadataValueTypeTaskMetadataSchemas5

	return TaskMetadataValue{
		TaskMetadataSchemas5: &taskMetadataSchemas5,
		Type:                 typ,
	}
}

func (u *TaskMetadataValue) UnmarshalJSON(data []byte) error {

	var taskMetadataSchemas1 TaskMetadataSchemas1 = TaskMetadataSchemas1{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemas1, "", true, true); err == nil {
		u.TaskMetadataSchemas1 = &taskMetadataSchemas1
		u.Type = TaskMetadataValueTypeTaskMetadataSchemas1
		return nil
	}

	var taskMetadataSchemas2 TaskMetadataSchemas2 = TaskMetadataSchemas2{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemas2, "", true, true); err == nil {
		u.TaskMetadataSchemas2 = &taskMetadataSchemas2
		u.Type = TaskMetadataValueTypeTaskMetadataSchemas2
		return nil
	}

	var taskMetadataSchemas3 TaskMetadataSchemas3 = TaskMetadataSchemas3{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemas3, "", true, true); err == nil {
		u.TaskMetadataSchemas3 = &taskMetadataSchemas3
		u.Type = TaskMetadataValueTypeTaskMetadataSchemas3
		return nil
	}

	var taskMetadataSchemas4 TaskMetadataSchemas4 = TaskMetadataSchemas4{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemas4, "", true, true); err == nil {
		u.TaskMetadataSchemas4 = &taskMetadataSchemas4
		u.Type = TaskMetadataValueTypeTaskMetadataSchemas4
		return nil
	}

	var taskMetadataSchemas5 TaskMetadataSchemas5 = TaskMetadataSchemas5{}
	if err := utils.UnmarshalJSON(data, &taskMetadataSchemas5, "", true, true); err == nil {
		u.TaskMetadataSchemas5 = &taskMetadataSchemas5
		u.Type = TaskMetadataValueTypeTaskMetadataSchemas5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TaskMetadataValue", string(data))
}

func (u TaskMetadataValue) MarshalJSON() ([]byte, error) {
	if u.TaskMetadataSchemas1 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemas1, "", true)
	}

	if u.TaskMetadataSchemas2 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemas2, "", true)
	}

	if u.TaskMetadataSchemas3 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemas3, "", true)
	}

	if u.TaskMetadataSchemas4 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemas4, "", true)
	}

	if u.TaskMetadataSchemas5 != nil {
		return utils.MarshalJSON(u.TaskMetadataSchemas5, "", true)
	}

	return nil, errors.New("could not marshal union type TaskMetadataValue: all fields are null")
}

type TaskMetadata struct {
	ExtraData *TaskMetadataExtraData `json:"extra_data,omitempty"`
	Format    *TaskMetadataFormat    `json:"format,omitempty"`
	ID        *string                `json:"id,omitempty"`
	Key       *string                `json:"key,omitempty"`
	Namespace *string                `json:"namespace,omitempty"`
	Slug      *string                `json:"slug,omitempty"`
	Type      *string                `json:"type,omitempty"`
	Value     *TaskMetadataValue     `json:"value,omitempty"`
}

func (o *TaskMetadata) GetExtraData() *TaskMetadataExtraData {
	if o == nil {
		return nil
	}
	return o.ExtraData
}

func (o *TaskMetadata) GetFormat() *TaskMetadataFormat {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *TaskMetadata) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TaskMetadata) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *TaskMetadata) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *TaskMetadata) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *TaskMetadata) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *TaskMetadata) GetValue() *TaskMetadataValue {
	if o == nil {
		return nil
	}
	return o.Value
}
