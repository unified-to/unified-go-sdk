// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AccountingPayoutStatus string

const (
	AccountingPayoutStatusSucceeded AccountingPayoutStatus = "SUCCEEDED"
	AccountingPayoutStatusPending   AccountingPayoutStatus = "PENDING"
	AccountingPayoutStatusFailed    AccountingPayoutStatus = "FAILED"
	AccountingPayoutStatusCanceled  AccountingPayoutStatus = "CANCELED"
)

func (e AccountingPayoutStatus) ToPointer() *AccountingPayoutStatus {
	return &e
}

func (e *AccountingPayoutStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUCCEEDED":
		fallthrough
	case "PENDING":
		fallthrough
	case "FAILED":
		fallthrough
	case "CANCELED":
		*e = AccountingPayoutStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountingPayoutStatus: %v", v)
	}
}

type AccountingPayout struct {
	CreatedAt   *string                 `json:"created_at,omitempty"`
	Currency    *string                 `json:"currency,omitempty"`
	ID          *string                 `json:"id,omitempty"`
	Notes       *string                 `json:"notes,omitempty"`
	Raw         map[string]interface{}  `json:"raw,omitempty"`
	Status      *AccountingPayoutStatus `json:"status,omitempty"`
	TotalAmount float64                 `json:"total_amount"`
	UpdatedAt   *string                 `json:"updated_at,omitempty"`
}

func (o *AccountingPayout) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AccountingPayout) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *AccountingPayout) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccountingPayout) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *AccountingPayout) GetRaw() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *AccountingPayout) GetStatus() *AccountingPayoutStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *AccountingPayout) GetTotalAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalAmount
}

func (o *AccountingPayout) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
