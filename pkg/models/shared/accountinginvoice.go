// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type AccountingInvoicePaymentCollectionMethod string

const (
	AccountingInvoicePaymentCollectionMethodSendInvoice         AccountingInvoicePaymentCollectionMethod = "send_invoice"
	AccountingInvoicePaymentCollectionMethodChargeAutomatically AccountingInvoicePaymentCollectionMethod = "charge_automatically"
)

func (e AccountingInvoicePaymentCollectionMethod) ToPointer() *AccountingInvoicePaymentCollectionMethod {
	return &e
}

type AccountingInvoiceStatus string

const (
	AccountingInvoiceStatusDraft             AccountingInvoiceStatus = "DRAFT"
	AccountingInvoiceStatusVoided            AccountingInvoiceStatus = "VOIDED"
	AccountingInvoiceStatusAuthorized        AccountingInvoiceStatus = "AUTHORIZED"
	AccountingInvoiceStatusPaid              AccountingInvoiceStatus = "PAID"
	AccountingInvoiceStatusPartiallyPaid     AccountingInvoiceStatus = "PARTIALLY_PAID"
	AccountingInvoiceStatusPartiallyRefunded AccountingInvoiceStatus = "PARTIALLY_REFUNDED"
	AccountingInvoiceStatusRefunded          AccountingInvoiceStatus = "REFUNDED"
)

func (e AccountingInvoiceStatus) ToPointer() *AccountingInvoiceStatus {
	return &e
}

type AccountingInvoiceType string

const (
	AccountingInvoiceTypeBill       AccountingInvoiceType = "BILL"
	AccountingInvoiceTypeInvoice    AccountingInvoiceType = "INVOICE"
	AccountingInvoiceTypeCreditmemo AccountingInvoiceType = "CREDITMEMO"
)

func (e AccountingInvoiceType) ToPointer() *AccountingInvoiceType {
	return &e
}

type AccountingInvoice struct {
	Attachments             []AccountingAttachment                    `json:"attachments,omitempty"`
	BalanceAmount           *float64                                  `json:"balance_amount,omitempty"`
	CancelledAt             *time.Time                                `json:"cancelled_at,omitempty"`
	ContactID               *string                                   `json:"contact_id,omitempty"`
	CreatedAt               *time.Time                                `json:"created_at,omitempty"`
	Currency                *string                                   `json:"currency,omitempty"`
	DiscountAmount          *float64                                  `json:"discount_amount,omitempty"`
	DueAt                   *time.Time                                `json:"due_at,omitempty"`
	ID                      *string                                   `json:"id,omitempty"`
	InvoiceAt               *time.Time                                `json:"invoice_at,omitempty"`
	InvoiceNumber           *string                                   `json:"invoice_number,omitempty"`
	Lineitems               []AccountingLineitem                      `json:"lineitems,omitempty"`
	Notes                   *string                                   `json:"notes,omitempty"`
	PaidAmount              *float64                                  `json:"paid_amount,omitempty"`
	PaidAt                  *time.Time                                `json:"paid_at,omitempty"`
	PaymentCollectionMethod *AccountingInvoicePaymentCollectionMethod `json:"payment_collection_method,omitempty"`
	PostedAt                *time.Time                                `json:"posted_at,omitempty"`
	Raw                     map[string]any                            `json:"raw,omitempty"`
	RefundAmount            *float64                                  `json:"refund_amount,omitempty"`
	RefundReason            *string                                   `json:"refund_reason,omitempty"`
	RefundedAt              *time.Time                                `json:"refunded_at,omitempty"`
	Send                    *bool                                     `json:"send,omitempty"`
	Status                  *AccountingInvoiceStatus                  `json:"status,omitempty"`
	TaxAmount               *float64                                  `json:"tax_amount,omitempty"`
	TotalAmount             *float64                                  `json:"total_amount,omitempty"`
	Type                    *AccountingInvoiceType                    `json:"type,omitempty"`
	UpdatedAt               *time.Time                                `json:"updated_at,omitempty"`
	URL                     *string                                   `json:"url,omitempty"`
}

func (a AccountingInvoice) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccountingInvoice) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AccountingInvoice) GetAttachments() []AccountingAttachment {
	if a == nil {
		return nil
	}
	return a.Attachments
}

func (a *AccountingInvoice) GetBalanceAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.BalanceAmount
}

func (a *AccountingInvoice) GetCancelledAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CancelledAt
}

func (a *AccountingInvoice) GetContactID() *string {
	if a == nil {
		return nil
	}
	return a.ContactID
}

func (a *AccountingInvoice) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AccountingInvoice) GetCurrency() *string {
	if a == nil {
		return nil
	}
	return a.Currency
}

func (a *AccountingInvoice) GetDiscountAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.DiscountAmount
}

func (a *AccountingInvoice) GetDueAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.DueAt
}

func (a *AccountingInvoice) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AccountingInvoice) GetInvoiceAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.InvoiceAt
}

func (a *AccountingInvoice) GetInvoiceNumber() *string {
	if a == nil {
		return nil
	}
	return a.InvoiceNumber
}

func (a *AccountingInvoice) GetLineitems() []AccountingLineitem {
	if a == nil {
		return nil
	}
	return a.Lineitems
}

func (a *AccountingInvoice) GetNotes() *string {
	if a == nil {
		return nil
	}
	return a.Notes
}

func (a *AccountingInvoice) GetPaidAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.PaidAmount
}

func (a *AccountingInvoice) GetPaidAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.PaidAt
}

func (a *AccountingInvoice) GetPaymentCollectionMethod() *AccountingInvoicePaymentCollectionMethod {
	if a == nil {
		return nil
	}
	return a.PaymentCollectionMethod
}

func (a *AccountingInvoice) GetPostedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.PostedAt
}

func (a *AccountingInvoice) GetRaw() map[string]any {
	if a == nil {
		return nil
	}
	return a.Raw
}

func (a *AccountingInvoice) GetRefundAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.RefundAmount
}

func (a *AccountingInvoice) GetRefundReason() *string {
	if a == nil {
		return nil
	}
	return a.RefundReason
}

func (a *AccountingInvoice) GetRefundedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.RefundedAt
}

func (a *AccountingInvoice) GetSend() *bool {
	if a == nil {
		return nil
	}
	return a.Send
}

func (a *AccountingInvoice) GetStatus() *AccountingInvoiceStatus {
	if a == nil {
		return nil
	}
	return a.Status
}

func (a *AccountingInvoice) GetTaxAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.TaxAmount
}

func (a *AccountingInvoice) GetTotalAmount() *float64 {
	if a == nil {
		return nil
	}
	return a.TotalAmount
}

func (a *AccountingInvoice) GetType() *AccountingInvoiceType {
	if a == nil {
		return nil
	}
	return a.Type
}

func (a *AccountingInvoice) GetUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AccountingInvoice) GetURL() *string {
	if a == nil {
		return nil
	}
	return a.URL
}
