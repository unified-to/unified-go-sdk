// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type AccountingInvoiceStatus string

const (
	AccountingInvoiceStatusDraft      AccountingInvoiceStatus = "DRAFT"
	AccountingInvoiceStatusVoided     AccountingInvoiceStatus = "VOIDED"
	AccountingInvoiceStatusAuthorized AccountingInvoiceStatus = "AUTHORIZED"
)

func (e AccountingInvoiceStatus) ToPointer() *AccountingInvoiceStatus {
	return &e
}

func (e *AccountingInvoiceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "VOIDED":
		fallthrough
	case "AUTHORIZED":
		*e = AccountingInvoiceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountingInvoiceStatus: %v", v)
	}
}

type AccountingInvoice struct {
	BalanceAmount  *float64                 `json:"balance_amount,omitempty"`
	CancelledAt    *time.Time               `json:"cancelled_at,omitempty"`
	ContactID      *string                  `json:"contact_id,omitempty"`
	CreatedAt      *time.Time               `json:"created_at,omitempty"`
	Currency       *string                  `json:"currency,omitempty"`
	DiscountAmount *float64                 `json:"discount_amount,omitempty"`
	DueAt          *time.Time               `json:"due_at,omitempty"`
	ID             *string                  `json:"id,omitempty"`
	InvoiceNumber  *string                  `json:"invoice_number,omitempty"`
	Lineitems      []AccountingLineitem     `json:"lineitems,omitempty"`
	Notes          *string                  `json:"notes,omitempty"`
	PaidAmount     *float64                 `json:"paid_amount,omitempty"`
	PaidAt         *time.Time               `json:"paid_at,omitempty"`
	Raw            map[string]interface{}   `json:"raw,omitempty"`
	RefundAmount   *float64                 `json:"refund_amount,omitempty"`
	RefundReason   *string                  `json:"refund_reason,omitempty"`
	RefundedAt     *time.Time               `json:"refunded_at,omitempty"`
	Status         *AccountingInvoiceStatus `json:"status,omitempty"`
	TaxAmount      *float64                 `json:"tax_amount,omitempty"`
	TotalAmount    *float64                 `json:"total_amount,omitempty"`
	UpdatedAt      *time.Time               `json:"updated_at,omitempty"`
}

func (a AccountingInvoice) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccountingInvoice) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AccountingInvoice) GetBalanceAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.BalanceAmount
}

func (o *AccountingInvoice) GetCancelledAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CancelledAt
}

func (o *AccountingInvoice) GetContactID() *string {
	if o == nil {
		return nil
	}
	return o.ContactID
}

func (o *AccountingInvoice) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AccountingInvoice) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *AccountingInvoice) GetDiscountAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *AccountingInvoice) GetDueAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DueAt
}

func (o *AccountingInvoice) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccountingInvoice) GetInvoiceNumber() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceNumber
}

func (o *AccountingInvoice) GetLineitems() []AccountingLineitem {
	if o == nil {
		return nil
	}
	return o.Lineitems
}

func (o *AccountingInvoice) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *AccountingInvoice) GetPaidAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAmount
}

func (o *AccountingInvoice) GetPaidAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *AccountingInvoice) GetRaw() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *AccountingInvoice) GetRefundAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.RefundAmount
}

func (o *AccountingInvoice) GetRefundReason() *string {
	if o == nil {
		return nil
	}
	return o.RefundReason
}

func (o *AccountingInvoice) GetRefundedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RefundedAt
}

func (o *AccountingInvoice) GetStatus() *AccountingInvoiceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *AccountingInvoice) GetTaxAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TaxAmount
}

func (o *AccountingInvoice) GetTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *AccountingInvoice) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
