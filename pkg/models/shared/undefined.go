// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Operation string

const (
	OperationAdd    Operation = "add"
	OperationDelete Operation = "delete"
)

func (e Operation) ToPointer() *Operation {
	return &e
}
func (e *Operation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add":
		fallthrough
	case "delete":
		*e = Operation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Operation: %v", v)
	}
}

type UndefinedType string

const (
	UndefinedTypeUser  UndefinedType = "User"
	UndefinedTypeGroup UndefinedType = "Group"
)

func (e UndefinedType) ToPointer() *UndefinedType {
	return &e
}
func (e *UndefinedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User":
		fallthrough
	case "Group":
		*e = UndefinedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UndefinedType: %v", v)
	}
}

type Undefined struct {
	DollarRef *string        `json:"$ref,omitempty"`
	Display   *string        `json:"display,omitempty"`
	Operation *Operation     `json:"operation,omitempty"`
	Type      *UndefinedType `json:"type,omitempty"`
	Value     *string        `json:"value,omitempty"`
}

func (o *Undefined) GetDollarRef() *string {
	if o == nil {
		return nil
	}
	return o.DollarRef
}

func (o *Undefined) GetDisplay() *string {
	if o == nil {
		return nil
	}
	return o.Display
}

func (o *Undefined) GetOperation() *Operation {
	if o == nil {
		return nil
	}
	return o.Operation
}

func (o *Undefined) GetType() *UndefinedType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Undefined) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}
