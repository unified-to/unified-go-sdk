// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type HrisTimeoffStatus string

const (
	HrisTimeoffStatusApproved HrisTimeoffStatus = "APPROVED"
	HrisTimeoffStatusPending  HrisTimeoffStatus = "PENDING"
	HrisTimeoffStatusDenied   HrisTimeoffStatus = "DENIED"
)

func (e HrisTimeoffStatus) ToPointer() *HrisTimeoffStatus {
	return &e
}

func (e *HrisTimeoffStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APPROVED":
		fallthrough
	case "PENDING":
		fallthrough
	case "DENIED":
		*e = HrisTimeoffStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HrisTimeoffStatus: %v", v)
	}
}

type HrisTimeoffType string

const (
	HrisTimeoffTypePaid   HrisTimeoffType = "PAID"
	HrisTimeoffTypeUnpaid HrisTimeoffType = "UNPAID"
)

func (e HrisTimeoffType) ToPointer() *HrisTimeoffType {
	return &e
}

func (e *HrisTimeoffType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PAID":
		fallthrough
	case "UNPAID":
		*e = HrisTimeoffType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HrisTimeoffType: %v", v)
	}
}

type HrisTimeoff struct {
	ApprovedAt     *time.Time         `json:"approved_at,omitempty"`
	ApproverUserID *string            `json:"approver_user_id,omitempty"`
	Comments       *string            `json:"comments,omitempty"`
	CreatedAt      *time.Time         `json:"created_at,omitempty"`
	EndAt          *time.Time         `json:"end_at,omitempty"`
	ID             *string            `json:"id,omitempty"`
	Raw            map[string]any     `json:"raw,omitempty"`
	StartAt        time.Time          `json:"start_at"`
	Status         *HrisTimeoffStatus `json:"status,omitempty"`
	Type           *HrisTimeoffType   `json:"type,omitempty"`
	UpdatedAt      *time.Time         `json:"updated_at,omitempty"`
	UserID         string             `json:"user_id"`
}

func (h HrisTimeoff) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HrisTimeoff) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *HrisTimeoff) GetApprovedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ApprovedAt
}

func (o *HrisTimeoff) GetApproverUserID() *string {
	if o == nil {
		return nil
	}
	return o.ApproverUserID
}

func (o *HrisTimeoff) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *HrisTimeoff) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *HrisTimeoff) GetEndAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndAt
}

func (o *HrisTimeoff) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *HrisTimeoff) GetRaw() map[string]any {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *HrisTimeoff) GetStartAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartAt
}

func (o *HrisTimeoff) GetStatus() *HrisTimeoffStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *HrisTimeoff) GetType() *HrisTimeoffType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *HrisTimeoff) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *HrisTimeoff) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}
