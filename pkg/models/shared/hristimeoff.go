// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"time"
)

type HrisTimeoffStatus string

const (
	HrisTimeoffStatusApproved HrisTimeoffStatus = "APPROVED"
	HrisTimeoffStatusPending  HrisTimeoffStatus = "PENDING"
	HrisTimeoffStatusDenied   HrisTimeoffStatus = "DENIED"
)

func (e HrisTimeoffStatus) ToPointer() *HrisTimeoffStatus {
	return &e
}

type HrisTimeoff struct {
	ApprovedAt     *time.Time         `json:"approved_at,omitempty"`
	ApproverUserID *string            `json:"approver_user_id,omitempty"`
	Comments       *string            `json:"comments,omitempty"`
	CompanyID      *string            `json:"company_id,omitempty"`
	CreatedAt      *time.Time         `json:"created_at,omitempty"`
	EndAt          *time.Time         `json:"end_at,omitempty"`
	ID             *string            `json:"id,omitempty"`
	IsPaid         *bool              `json:"is_paid,omitempty"`
	Raw            map[string]any     `json:"raw,omitempty"`
	Reason         *string            `json:"reason,omitempty"`
	StartAt        time.Time          `json:"start_at"`
	Status         *HrisTimeoffStatus `json:"status,omitempty"`
	UpdatedAt      *time.Time         `json:"updated_at,omitempty"`
	UserID         *string            `json:"user_id,omitempty"`
}

func (h HrisTimeoff) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HrisTimeoff) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, []string{"start_at"}); err != nil {
		return err
	}
	return nil
}

func (h *HrisTimeoff) GetApprovedAt() *time.Time {
	if h == nil {
		return nil
	}
	return h.ApprovedAt
}

func (h *HrisTimeoff) GetApproverUserID() *string {
	if h == nil {
		return nil
	}
	return h.ApproverUserID
}

func (h *HrisTimeoff) GetComments() *string {
	if h == nil {
		return nil
	}
	return h.Comments
}

func (h *HrisTimeoff) GetCompanyID() *string {
	if h == nil {
		return nil
	}
	return h.CompanyID
}

func (h *HrisTimeoff) GetCreatedAt() *time.Time {
	if h == nil {
		return nil
	}
	return h.CreatedAt
}

func (h *HrisTimeoff) GetEndAt() *time.Time {
	if h == nil {
		return nil
	}
	return h.EndAt
}

func (h *HrisTimeoff) GetID() *string {
	if h == nil {
		return nil
	}
	return h.ID
}

func (h *HrisTimeoff) GetIsPaid() *bool {
	if h == nil {
		return nil
	}
	return h.IsPaid
}

func (h *HrisTimeoff) GetRaw() map[string]any {
	if h == nil {
		return nil
	}
	return h.Raw
}

func (h *HrisTimeoff) GetReason() *string {
	if h == nil {
		return nil
	}
	return h.Reason
}

func (h *HrisTimeoff) GetStartAt() time.Time {
	if h == nil {
		return time.Time{}
	}
	return h.StartAt
}

func (h *HrisTimeoff) GetStatus() *HrisTimeoffStatus {
	if h == nil {
		return nil
	}
	return h.Status
}

func (h *HrisTimeoff) GetUpdatedAt() *time.Time {
	if h == nil {
		return nil
	}
	return h.UpdatedAt
}

func (h *HrisTimeoff) GetUserID() *string {
	if h == nil {
		return nil
	}
	return h.UserID
}
