// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CalendarEventStatus string

const (
	CalendarEventStatusCanceled  CalendarEventStatus = "CANCELED"
	CalendarEventStatusConfirmed CalendarEventStatus = "CONFIRMED"
	CalendarEventStatusTentative CalendarEventStatus = "TENTATIVE"
)

func (e CalendarEventStatus) ToPointer() *CalendarEventStatus {
	return &e
}
func (e *CalendarEventStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CANCELED":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "TENTATIVE":
		*e = CalendarEventStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CalendarEventStatus: %v", v)
	}
}

type CalendarEvent struct {
	Attendees        []CalendarAttendee              `json:"attendees,omitempty"`
	CalendarID       *string                         `json:"calendar_id,omitempty"`
	CreatedAt        *string                         `json:"created_at,omitempty"`
	EndAt            *string                         `json:"end_at,omitempty"`
	ID               *string                         `json:"id,omitempty"`
	IsAllDay         *bool                           `json:"is_all_day,omitempty"`
	IsFree           *bool                           `json:"is_free,omitempty"`
	IsPrivate        *bool                           `json:"is_private,omitempty"`
	Location         *string                         `json:"location,omitempty"`
	Notes            *string                         `json:"notes,omitempty"`
	Organizer        *PropertyCalendarEventOrganizer `json:"organizer,omitempty"`
	Raw              map[string]any                  `json:"raw,omitempty"`
	Recurrence       []CalendarEventRecurrence       `json:"recurrence,omitempty"`
	RecurringEventID *string                         `json:"recurring_event_id,omitempty"`
	StartAt          *string                         `json:"start_at,omitempty"`
	Status           *CalendarEventStatus            `json:"status,omitempty"`
	Subject          *string                         `json:"subject,omitempty"`
	Timezone         *string                         `json:"timezone,omitempty"`
	UpdatedAt        *string                         `json:"updated_at,omitempty"`
	WebURL           *string                         `json:"web_url,omitempty"`
}

func (o *CalendarEvent) GetAttendees() []CalendarAttendee {
	if o == nil {
		return nil
	}
	return o.Attendees
}

func (o *CalendarEvent) GetCalendarID() *string {
	if o == nil {
		return nil
	}
	return o.CalendarID
}

func (o *CalendarEvent) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CalendarEvent) GetEndAt() *string {
	if o == nil {
		return nil
	}
	return o.EndAt
}

func (o *CalendarEvent) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CalendarEvent) GetIsAllDay() *bool {
	if o == nil {
		return nil
	}
	return o.IsAllDay
}

func (o *CalendarEvent) GetIsFree() *bool {
	if o == nil {
		return nil
	}
	return o.IsFree
}

func (o *CalendarEvent) GetIsPrivate() *bool {
	if o == nil {
		return nil
	}
	return o.IsPrivate
}

func (o *CalendarEvent) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *CalendarEvent) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *CalendarEvent) GetOrganizer() *PropertyCalendarEventOrganizer {
	if o == nil {
		return nil
	}
	return o.Organizer
}

func (o *CalendarEvent) GetRaw() map[string]any {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *CalendarEvent) GetRecurrence() []CalendarEventRecurrence {
	if o == nil {
		return nil
	}
	return o.Recurrence
}

func (o *CalendarEvent) GetRecurringEventID() *string {
	if o == nil {
		return nil
	}
	return o.RecurringEventID
}

func (o *CalendarEvent) GetStartAt() *string {
	if o == nil {
		return nil
	}
	return o.StartAt
}

func (o *CalendarEvent) GetStatus() *CalendarEventStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CalendarEvent) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *CalendarEvent) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *CalendarEvent) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CalendarEvent) GetWebURL() *string {
	if o == nil {
		return nil
	}
	return o.WebURL
}
