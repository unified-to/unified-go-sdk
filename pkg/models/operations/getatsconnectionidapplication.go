// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/unified-to/unified-go-sdk/pkg/models/shared"
	"github.com/unified-to/unified-go-sdk/pkg/types"
	"net/http"
)

type GetAtsConnectionIDApplicationSecurity struct {
	Jwt string `security:"scheme,type=apiKey,subtype=header,name=authorization"`
}

func (o *GetAtsConnectionIDApplicationSecurity) GetJwt() string {
	if o == nil {
		return ""
	}
	return o.Jwt
}

type GetAtsConnectionIDApplicationRequest struct {
	// The candidate ID to filter results
	CandidateID *string `queryParam:"style=form,explode=true,name=candidate_id"`
	// ID of the connection
	ConnectionID string `pathParam:"style=simple,explode=false,name=connection_id"`
	// The job ID to filter results
	JobID  *string  `queryParam:"style=form,explode=true,name=job_id"`
	Limit  *float64 `queryParam:"style=form,explode=true,name=limit"`
	Offset *float64 `queryParam:"style=form,explode=true,name=offset"`
	Order  *string  `queryParam:"style=form,explode=true,name=order"`
	// Query string to search. eg. email address or name
	Query *string `queryParam:"style=form,explode=true,name=query"`
	Sort  *string `queryParam:"style=form,explode=true,name=sort"`
	// Return only results whose updated date is equal or greater to this value
	UpdatedGte *types.Date `queryParam:"style=form,explode=true,name=updated_gte"`
}

func (o *GetAtsConnectionIDApplicationRequest) GetCandidateID() *string {
	if o == nil {
		return nil
	}
	return o.CandidateID
}

func (o *GetAtsConnectionIDApplicationRequest) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *GetAtsConnectionIDApplicationRequest) GetJobID() *string {
	if o == nil {
		return nil
	}
	return o.JobID
}

func (o *GetAtsConnectionIDApplicationRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetAtsConnectionIDApplicationRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetAtsConnectionIDApplicationRequest) GetOrder() *string {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *GetAtsConnectionIDApplicationRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *GetAtsConnectionIDApplicationRequest) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *GetAtsConnectionIDApplicationRequest) GetUpdatedGte() *types.Date {
	if o == nil {
		return nil
	}
	return o.UpdatedGte
}

type GetAtsConnectionIDApplicationResponse struct {
	// Successful
	AtsApplications []shared.AtsApplication
	ContentType     string
	StatusCode      int
	RawResponse     *http.Response
}

func (o *GetAtsConnectionIDApplicationResponse) GetAtsApplications() []shared.AtsApplication {
	if o == nil {
		return nil
	}
	return o.AtsApplications
}

func (o *GetAtsConnectionIDApplicationResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAtsConnectionIDApplicationResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAtsConnectionIDApplicationResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
