// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetUnifiedIntegrationAuthRequest struct {
	Env *string `queryParam:"style=form,explode=true,name=env"`
	// Your user identifier to associate with the new Integration
	ExternalXref *string `queryParam:"style=form,explode=true,name=external_xref"`
	// The URL where you want the user to be redirect to after an unsuccessful authentication. An "error" variable will be appended.
	FailureRedirect *string `queryParam:"style=form,explode=true,name=failure_redirect"`
	// Type of the supported integration
	IntegrationType string `pathParam:"style=simple,explode=false,name=integration_type"`
	// Language: en, fr, es, it, pt, zh, hi
	Lang     *string  `queryParam:"style=form,explode=true,name=lang"`
	Redirect *bool    `queryParam:"style=form,explode=true,name=redirect"`
	Scopes   []string `queryParam:"style=form,explode=true,name=scopes"`
	// Extra state to send back to your success URL
	State     *string `queryParam:"style=form,explode=true,name=state"`
	Subdomain *string `queryParam:"style=form,explode=true,name=subdomain"`
	// The URL where you want the user to be redirect to after a successful authorization.  The connection ID will be appended with (id=<connectionId>) to this URL, as will the state that was provided.
	SuccessRedirect *string `queryParam:"style=form,explode=true,name=success_redirect"`
	// The ID of the workspace
	WorkspaceID string `pathParam:"style=simple,explode=false,name=workspace_id"`
}

func (g *GetUnifiedIntegrationAuthRequest) GetEnv() *string {
	if g == nil {
		return nil
	}
	return g.Env
}

func (g *GetUnifiedIntegrationAuthRequest) GetExternalXref() *string {
	if g == nil {
		return nil
	}
	return g.ExternalXref
}

func (g *GetUnifiedIntegrationAuthRequest) GetFailureRedirect() *string {
	if g == nil {
		return nil
	}
	return g.FailureRedirect
}

func (g *GetUnifiedIntegrationAuthRequest) GetIntegrationType() string {
	if g == nil {
		return ""
	}
	return g.IntegrationType
}

func (g *GetUnifiedIntegrationAuthRequest) GetLang() *string {
	if g == nil {
		return nil
	}
	return g.Lang
}

func (g *GetUnifiedIntegrationAuthRequest) GetRedirect() *bool {
	if g == nil {
		return nil
	}
	return g.Redirect
}

func (g *GetUnifiedIntegrationAuthRequest) GetScopes() []string {
	if g == nil {
		return nil
	}
	return g.Scopes
}

func (g *GetUnifiedIntegrationAuthRequest) GetState() *string {
	if g == nil {
		return nil
	}
	return g.State
}

func (g *GetUnifiedIntegrationAuthRequest) GetSubdomain() *string {
	if g == nil {
		return nil
	}
	return g.Subdomain
}

func (g *GetUnifiedIntegrationAuthRequest) GetSuccessRedirect() *string {
	if g == nil {
		return nil
	}
	return g.SuccessRedirect
}

func (g *GetUnifiedIntegrationAuthRequest) GetWorkspaceID() string {
	if g == nil {
		return ""
	}
	return g.WorkspaceID
}

type GetUnifiedIntegrationAuthResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful
	Res *string
}

func (g *GetUnifiedIntegrationAuthResponse) GetContentType() string {
	if g == nil {
		return ""
	}
	return g.ContentType
}

func (g *GetUnifiedIntegrationAuthResponse) GetStatusCode() int {
	if g == nil {
		return 0
	}
	return g.StatusCode
}

func (g *GetUnifiedIntegrationAuthResponse) GetRawResponse() *http.Response {
	if g == nil {
		return nil
	}
	return g.RawResponse
}

func (g *GetUnifiedIntegrationAuthResponse) GetRes() *string {
	if g == nil {
		return nil
	}
	return g.Res
}
