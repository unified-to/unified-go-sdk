// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetUnifiedIntegrationAuthScopes string

const (
	GetUnifiedIntegrationAuthScopesAtsScorecardRead       GetUnifiedIntegrationAuthScopes = "ats_scorecard_read"
	GetUnifiedIntegrationAuthScopesAtsScorecardWrite      GetUnifiedIntegrationAuthScopes = "ats_scorecard_write"
	GetUnifiedIntegrationAuthScopesAtsApplicationRead     GetUnifiedIntegrationAuthScopes = "ats_application_read"
	GetUnifiedIntegrationAuthScopesAtsApplicationWrite    GetUnifiedIntegrationAuthScopes = "ats_application_write"
	GetUnifiedIntegrationAuthScopesAuthLogin              GetUnifiedIntegrationAuthScopes = "auth_login"
	GetUnifiedIntegrationAuthScopesCrmCompanyRead         GetUnifiedIntegrationAuthScopes = "crm_company_read"
	GetUnifiedIntegrationAuthScopesCrmCompanyWrite        GetUnifiedIntegrationAuthScopes = "crm_company_write"
	GetUnifiedIntegrationAuthScopesCrmContactRead         GetUnifiedIntegrationAuthScopes = "crm_contact_read"
	GetUnifiedIntegrationAuthScopesCrmContactWrite        GetUnifiedIntegrationAuthScopes = "crm_contact_write"
	GetUnifiedIntegrationAuthScopesCrmDealRead            GetUnifiedIntegrationAuthScopes = "crm_deal_read"
	GetUnifiedIntegrationAuthScopesCrmDealWrite           GetUnifiedIntegrationAuthScopes = "crm_deal_write"
	GetUnifiedIntegrationAuthScopesCrmEventRead           GetUnifiedIntegrationAuthScopes = "crm_event_read"
	GetUnifiedIntegrationAuthScopesCrmEventWrite          GetUnifiedIntegrationAuthScopes = "crm_event_write"
	GetUnifiedIntegrationAuthScopesCrmUserRead            GetUnifiedIntegrationAuthScopes = "crm_user_read"
	GetUnifiedIntegrationAuthScopesCrmUserWrite           GetUnifiedIntegrationAuthScopes = "crm_user_write"
	GetUnifiedIntegrationAuthScopesCrmLeadRead            GetUnifiedIntegrationAuthScopes = "crm_lead_read"
	GetUnifiedIntegrationAuthScopesCrmLeadWrite           GetUnifiedIntegrationAuthScopes = "crm_lead_write"
	GetUnifiedIntegrationAuthScopesCrmFileRead            GetUnifiedIntegrationAuthScopes = "crm_file_read"
	GetUnifiedIntegrationAuthScopesCrmFileWrite           GetUnifiedIntegrationAuthScopes = "crm_file_write"
	GetUnifiedIntegrationAuthScopesCrmPipelineRead        GetUnifiedIntegrationAuthScopes = "crm_pipeline_read"
	GetUnifiedIntegrationAuthScopesCrmPipelineWrite       GetUnifiedIntegrationAuthScopes = "crm_pipeline_write"
	GetUnifiedIntegrationAuthScopesCrmTeamRead            GetUnifiedIntegrationAuthScopes = "crm_team_read"
	GetUnifiedIntegrationAuthScopesCrmTeamWrite           GetUnifiedIntegrationAuthScopes = "crm_team_write"
	GetUnifiedIntegrationAuthScopesMartechListRead        GetUnifiedIntegrationAuthScopes = "martech_list_read"
	GetUnifiedIntegrationAuthScopesMartechListWrite       GetUnifiedIntegrationAuthScopes = "martech_list_write"
	GetUnifiedIntegrationAuthScopesMartechMemberRead      GetUnifiedIntegrationAuthScopes = "martech_member_read"
	GetUnifiedIntegrationAuthScopesMartechMemberWrite     GetUnifiedIntegrationAuthScopes = "martech_member_write"
	GetUnifiedIntegrationAuthScopesTicketingAgentRead     GetUnifiedIntegrationAuthScopes = "ticketing_agent_read"
	GetUnifiedIntegrationAuthScopesTicketingAgentWrite    GetUnifiedIntegrationAuthScopes = "ticketing_agent_write"
	GetUnifiedIntegrationAuthScopesTicketingCustomerRead  GetUnifiedIntegrationAuthScopes = "ticketing_customer_read"
	GetUnifiedIntegrationAuthScopesTicketingCustomerWrite GetUnifiedIntegrationAuthScopes = "ticketing_customer_write"
	GetUnifiedIntegrationAuthScopesTicketingTicketRead    GetUnifiedIntegrationAuthScopes = "ticketing_ticket_read"
	GetUnifiedIntegrationAuthScopesTicketingTicketWrite   GetUnifiedIntegrationAuthScopes = "ticketing_ticket_write"
	GetUnifiedIntegrationAuthScopesTicketingNoteRead      GetUnifiedIntegrationAuthScopes = "ticketing_note_read"
	GetUnifiedIntegrationAuthScopesTicketingNoteWrite     GetUnifiedIntegrationAuthScopes = "ticketing_note_write"
	GetUnifiedIntegrationAuthScopesHrisEmployeeRead       GetUnifiedIntegrationAuthScopes = "hris_employee_read"
	GetUnifiedIntegrationAuthScopesHrisEmployeeWrite      GetUnifiedIntegrationAuthScopes = "hris_employee_write"
	GetUnifiedIntegrationAuthScopesHrisGroupRead          GetUnifiedIntegrationAuthScopes = "hris_group_read"
	GetUnifiedIntegrationAuthScopesHrisGroupWrite         GetUnifiedIntegrationAuthScopes = "hris_group_write"
	GetUnifiedIntegrationAuthScopesAtsCandidateRead       GetUnifiedIntegrationAuthScopes = "ats_candidate_read"
	GetUnifiedIntegrationAuthScopesAtsCandidateWrite      GetUnifiedIntegrationAuthScopes = "ats_candidate_write"
	GetUnifiedIntegrationAuthScopesAtsInterviewRead       GetUnifiedIntegrationAuthScopes = "ats_interview_read"
	GetUnifiedIntegrationAuthScopesAtsInterviewWrite      GetUnifiedIntegrationAuthScopes = "ats_interview_write"
	GetUnifiedIntegrationAuthScopesAtsJobRead             GetUnifiedIntegrationAuthScopes = "ats_job_read"
	GetUnifiedIntegrationAuthScopesAtsJobWrite            GetUnifiedIntegrationAuthScopes = "ats_job_write"
	GetUnifiedIntegrationAuthScopesWebhook                GetUnifiedIntegrationAuthScopes = "webhook"
)

func (e GetUnifiedIntegrationAuthScopes) ToPointer() *GetUnifiedIntegrationAuthScopes {
	return &e
}

func (e *GetUnifiedIntegrationAuthScopes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ats_scorecard_read":
		fallthrough
	case "ats_scorecard_write":
		fallthrough
	case "ats_application_read":
		fallthrough
	case "ats_application_write":
		fallthrough
	case "auth_login":
		fallthrough
	case "crm_company_read":
		fallthrough
	case "crm_company_write":
		fallthrough
	case "crm_contact_read":
		fallthrough
	case "crm_contact_write":
		fallthrough
	case "crm_deal_read":
		fallthrough
	case "crm_deal_write":
		fallthrough
	case "crm_event_read":
		fallthrough
	case "crm_event_write":
		fallthrough
	case "crm_user_read":
		fallthrough
	case "crm_user_write":
		fallthrough
	case "crm_lead_read":
		fallthrough
	case "crm_lead_write":
		fallthrough
	case "crm_file_read":
		fallthrough
	case "crm_file_write":
		fallthrough
	case "crm_pipeline_read":
		fallthrough
	case "crm_pipeline_write":
		fallthrough
	case "crm_team_read":
		fallthrough
	case "crm_team_write":
		fallthrough
	case "martech_list_read":
		fallthrough
	case "martech_list_write":
		fallthrough
	case "martech_member_read":
		fallthrough
	case "martech_member_write":
		fallthrough
	case "ticketing_agent_read":
		fallthrough
	case "ticketing_agent_write":
		fallthrough
	case "ticketing_customer_read":
		fallthrough
	case "ticketing_customer_write":
		fallthrough
	case "ticketing_ticket_read":
		fallthrough
	case "ticketing_ticket_write":
		fallthrough
	case "ticketing_note_read":
		fallthrough
	case "ticketing_note_write":
		fallthrough
	case "hris_employee_read":
		fallthrough
	case "hris_employee_write":
		fallthrough
	case "hris_group_read":
		fallthrough
	case "hris_group_write":
		fallthrough
	case "ats_candidate_read":
		fallthrough
	case "ats_candidate_write":
		fallthrough
	case "ats_interview_read":
		fallthrough
	case "ats_interview_write":
		fallthrough
	case "ats_job_read":
		fallthrough
	case "ats_job_write":
		fallthrough
	case "webhook":
		*e = GetUnifiedIntegrationAuthScopes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUnifiedIntegrationAuthScopes: %v", v)
	}
}

type GetUnifiedIntegrationAuthRequest struct {
	Env *string `queryParam:"style=form,explode=true,name=env"`
	// Your user identifier to associate with the new Integration
	ExternalXref *string `queryParam:"style=form,explode=true,name=external_xref"`
	// The URL where you want the user to be redirect to after an unsuccessful authentication. An "error" variable will be appended.
	FailureRedirect *string `queryParam:"style=form,explode=true,name=failure_redirect"`
	// Type of the supported integration
	IntegrationType string `pathParam:"style=simple,explode=false,name=integration_type"`
	// Language: en, fr, es, it, pt, zh, hi
	Lang     *string                           `queryParam:"style=form,explode=true,name=lang"`
	Redirect *bool                             `queryParam:"style=form,explode=true,name=redirect"`
	Scopes   []GetUnifiedIntegrationAuthScopes `queryParam:"style=form,explode=true,name=scopes"`
	// Extra state to send back to your success URL
	State     *string `queryParam:"style=form,explode=true,name=state"`
	Subdomain *string `queryParam:"style=form,explode=true,name=subdomain"`
	// The URL where you want the user to be redirect to after a successful authentication.  The connection ID will be appended with (id=<connectionId>) to this URL, as will the state that was provided.
	SuccessRedirect *string `queryParam:"style=form,explode=true,name=success_redirect"`
	// The ID of the workspace
	WorkspaceID string `pathParam:"style=simple,explode=false,name=workspace_id"`
}

func (o *GetUnifiedIntegrationAuthRequest) GetEnv() *string {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *GetUnifiedIntegrationAuthRequest) GetExternalXref() *string {
	if o == nil {
		return nil
	}
	return o.ExternalXref
}

func (o *GetUnifiedIntegrationAuthRequest) GetFailureRedirect() *string {
	if o == nil {
		return nil
	}
	return o.FailureRedirect
}

func (o *GetUnifiedIntegrationAuthRequest) GetIntegrationType() string {
	if o == nil {
		return ""
	}
	return o.IntegrationType
}

func (o *GetUnifiedIntegrationAuthRequest) GetLang() *string {
	if o == nil {
		return nil
	}
	return o.Lang
}

func (o *GetUnifiedIntegrationAuthRequest) GetRedirect() *bool {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetUnifiedIntegrationAuthRequest) GetScopes() []GetUnifiedIntegrationAuthScopes {
	if o == nil {
		return nil
	}
	return o.Scopes
}

func (o *GetUnifiedIntegrationAuthRequest) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *GetUnifiedIntegrationAuthRequest) GetSubdomain() *string {
	if o == nil {
		return nil
	}
	return o.Subdomain
}

func (o *GetUnifiedIntegrationAuthRequest) GetSuccessRedirect() *string {
	if o == nil {
		return nil
	}
	return o.SuccessRedirect
}

func (o *GetUnifiedIntegrationAuthRequest) GetWorkspaceID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceID
}

type GetUnifiedIntegrationAuthResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful
	GetUnifiedIntegrationAuth200ApplicationJSONString *string
}

func (o *GetUnifiedIntegrationAuthResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetUnifiedIntegrationAuthResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetUnifiedIntegrationAuthResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetUnifiedIntegrationAuthResponse) GetGetUnifiedIntegrationAuth200ApplicationJSONString() *string {
	if o == nil {
		return nil
	}
	return o.GetUnifiedIntegrationAuth200ApplicationJSONString
}
