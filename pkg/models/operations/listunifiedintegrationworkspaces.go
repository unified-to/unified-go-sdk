// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/models/shared"
	"net/http"
)

type ListUnifiedIntegrationWorkspacesCategories string

const (
	ListUnifiedIntegrationWorkspacesCategoriesPassthrough ListUnifiedIntegrationWorkspacesCategories = "passthrough"
	ListUnifiedIntegrationWorkspacesCategoriesHris        ListUnifiedIntegrationWorkspacesCategories = "hris"
	ListUnifiedIntegrationWorkspacesCategoriesAts         ListUnifiedIntegrationWorkspacesCategories = "ats"
	ListUnifiedIntegrationWorkspacesCategoriesAuth        ListUnifiedIntegrationWorkspacesCategories = "auth"
	ListUnifiedIntegrationWorkspacesCategoriesCrm         ListUnifiedIntegrationWorkspacesCategories = "crm"
	ListUnifiedIntegrationWorkspacesCategoriesEnrich      ListUnifiedIntegrationWorkspacesCategories = "enrich"
	ListUnifiedIntegrationWorkspacesCategoriesMartech     ListUnifiedIntegrationWorkspacesCategories = "martech"
	ListUnifiedIntegrationWorkspacesCategoriesTicketing   ListUnifiedIntegrationWorkspacesCategories = "ticketing"
	ListUnifiedIntegrationWorkspacesCategoriesUc          ListUnifiedIntegrationWorkspacesCategories = "uc"
)

func (e ListUnifiedIntegrationWorkspacesCategories) ToPointer() *ListUnifiedIntegrationWorkspacesCategories {
	return &e
}

func (e *ListUnifiedIntegrationWorkspacesCategories) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "passthrough":
		fallthrough
	case "hris":
		fallthrough
	case "ats":
		fallthrough
	case "auth":
		fallthrough
	case "crm":
		fallthrough
	case "enrich":
		fallthrough
	case "martech":
		fallthrough
	case "ticketing":
		fallthrough
	case "uc":
		*e = ListUnifiedIntegrationWorkspacesCategories(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListUnifiedIntegrationWorkspacesCategories: %v", v)
	}
}

type ListUnifiedIntegrationWorkspacesRequest struct {
	Active *bool `queryParam:"style=form,explode=true,name=active"`
	// Filter the results on these categories
	Categories []ListUnifiedIntegrationWorkspacesCategories `queryParam:"style=form,explode=true,name=categories"`
	Env        *string                                      `queryParam:"style=form,explode=true,name=env"`
	Summary    *bool                                        `queryParam:"style=form,explode=true,name=summary"`
	// The ID of the workspace
	WorkspaceID string `pathParam:"style=simple,explode=false,name=workspace_id"`
}

func (o *ListUnifiedIntegrationWorkspacesRequest) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ListUnifiedIntegrationWorkspacesRequest) GetCategories() []ListUnifiedIntegrationWorkspacesCategories {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *ListUnifiedIntegrationWorkspacesRequest) GetEnv() *string {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *ListUnifiedIntegrationWorkspacesRequest) GetSummary() *bool {
	if o == nil {
		return nil
	}
	return o.Summary
}

func (o *ListUnifiedIntegrationWorkspacesRequest) GetWorkspaceID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceID
}

type ListUnifiedIntegrationWorkspacesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Successful
	Integrations []shared.Integration
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListUnifiedIntegrationWorkspacesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListUnifiedIntegrationWorkspacesResponse) GetIntegrations() []shared.Integration {
	if o == nil {
		return nil
	}
	return o.Integrations
}

func (o *ListUnifiedIntegrationWorkspacesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListUnifiedIntegrationWorkspacesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
