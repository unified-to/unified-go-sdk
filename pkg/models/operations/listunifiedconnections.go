// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/models/shared"
	"net/http"
)

type Categories string

const (
	CategoriesPassthrough  Categories = "passthrough"
	CategoriesHris         Categories = "hris"
	CategoriesAts          Categories = "ats"
	CategoriesAuth         Categories = "auth"
	CategoriesCrm          Categories = "crm"
	CategoriesEnrich       Categories = "enrich"
	CategoriesMartech      Categories = "martech"
	CategoriesTicketing    Categories = "ticketing"
	CategoriesUc           Categories = "uc"
	CategoriesAccounting   Categories = "accounting"
	CategoriesStorage      Categories = "storage"
	CategoriesCommerce     Categories = "commerce"
	CategoriesPayment      Categories = "payment"
	CategoriesGenai        Categories = "genai"
	CategoriesMessaging    Categories = "messaging"
	CategoriesKms          Categories = "kms"
	CategoriesTask         Categories = "task"
	CategoriesScim         Categories = "scim"
	CategoriesLms          Categories = "lms"
	CategoriesRepo         Categories = "repo"
	CategoriesMetadata     Categories = "metadata"
	CategoriesCalendar     Categories = "calendar"
	CategoriesVerification Categories = "verification"
)

func (e Categories) ToPointer() *Categories {
	return &e
}
func (e *Categories) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "passthrough":
		fallthrough
	case "hris":
		fallthrough
	case "ats":
		fallthrough
	case "auth":
		fallthrough
	case "crm":
		fallthrough
	case "enrich":
		fallthrough
	case "martech":
		fallthrough
	case "ticketing":
		fallthrough
	case "uc":
		fallthrough
	case "accounting":
		fallthrough
	case "storage":
		fallthrough
	case "commerce":
		fallthrough
	case "payment":
		fallthrough
	case "genai":
		fallthrough
	case "messaging":
		fallthrough
	case "kms":
		fallthrough
	case "task":
		fallthrough
	case "scim":
		fallthrough
	case "lms":
		fallthrough
	case "repo":
		fallthrough
	case "metadata":
		fallthrough
	case "calendar":
		fallthrough
	case "verification":
		*e = Categories(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Categories: %v", v)
	}
}

type ListUnifiedConnectionsRequest struct {
	// Filter the results on these categories
	Categories []Categories `queryParam:"style=form,explode=true,name=categories"`
	Env        *string      `queryParam:"style=form,explode=true,name=env"`
	// Filter the results to only those integrations for your user referenced by this value
	ExternalXref *string  `queryParam:"style=form,explode=true,name=external_xref"`
	Limit        *float64 `queryParam:"style=form,explode=true,name=limit"`
	Offset       *float64 `queryParam:"style=form,explode=true,name=offset"`
	Order        *string  `queryParam:"style=form,explode=true,name=order"`
	Sort         *string  `queryParam:"style=form,explode=true,name=sort"`
	// Return only results whose updated date is equal or greater to this value
	UpdatedGte *string `queryParam:"style=form,explode=true,name=updated_gte"`
}

func (l *ListUnifiedConnectionsRequest) GetCategories() []Categories {
	if l == nil {
		return nil
	}
	return l.Categories
}

func (l *ListUnifiedConnectionsRequest) GetEnv() *string {
	if l == nil {
		return nil
	}
	return l.Env
}

func (l *ListUnifiedConnectionsRequest) GetExternalXref() *string {
	if l == nil {
		return nil
	}
	return l.ExternalXref
}

func (l *ListUnifiedConnectionsRequest) GetLimit() *float64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListUnifiedConnectionsRequest) GetOffset() *float64 {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListUnifiedConnectionsRequest) GetOrder() *string {
	if l == nil {
		return nil
	}
	return l.Order
}

func (l *ListUnifiedConnectionsRequest) GetSort() *string {
	if l == nil {
		return nil
	}
	return l.Sort
}

func (l *ListUnifiedConnectionsRequest) GetUpdatedGte() *string {
	if l == nil {
		return nil
	}
	return l.UpdatedGte
}

type ListUnifiedConnectionsResponse struct {
	// Successful
	Connections []shared.Connection
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (l *ListUnifiedConnectionsResponse) GetConnections() []shared.Connection {
	if l == nil {
		return nil
	}
	return l.Connections
}

func (l *ListUnifiedConnectionsResponse) GetContentType() string {
	if l == nil {
		return ""
	}
	return l.ContentType
}

func (l *ListUnifiedConnectionsResponse) GetStatusCode() int {
	if l == nil {
		return 0
	}
	return l.StatusCode
}

func (l *ListUnifiedConnectionsResponse) GetRawResponse() *http.Response {
	if l == nil {
		return nil
	}
	return l.RawResponse
}
