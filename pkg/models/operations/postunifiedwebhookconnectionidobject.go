// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/unified-to/unified-go-sdk/pkg/models/shared"
	"net/http"
)

type PostUnifiedWebhookConnectionIDObjectSecurity struct {
	Jwt string `security:"scheme,type=apiKey,subtype=header,name=authorization"`
}

func (o *PostUnifiedWebhookConnectionIDObjectSecurity) GetJwt() string {
	if o == nil {
		return ""
	}
	return o.Jwt
}

type PostUnifiedWebhookConnectionIDObjectEvents string

const (
	PostUnifiedWebhookConnectionIDObjectEventsUpdated PostUnifiedWebhookConnectionIDObjectEvents = "updated"
	PostUnifiedWebhookConnectionIDObjectEventsCreated PostUnifiedWebhookConnectionIDObjectEvents = "created"
)

func (e PostUnifiedWebhookConnectionIDObjectEvents) ToPointer() *PostUnifiedWebhookConnectionIDObjectEvents {
	return &e
}

func (e *PostUnifiedWebhookConnectionIDObjectEvents) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "updated":
		fallthrough
	case "created":
		*e = PostUnifiedWebhookConnectionIDObjectEvents(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostUnifiedWebhookConnectionIDObjectEvents: %v", v)
	}
}

type PostUnifiedWebhookConnectionIDObjectRequest struct {
	// A webhook is used to POST new/updated information to your server.
	Webhook *shared.Webhook `request:"mediaType=application/json"`
	// ID of the connection
	ConnectionID string `pathParam:"style=simple,explode=false,name=connection_id"`
	// Which events to subscribe to.
	Events []PostUnifiedWebhookConnectionIDObjectEvents `queryParam:"style=form,explode=true,name=events"`
	// The object to subscribe to
	Object string `pathParam:"style=simple,explode=false,name=object"`
}

func (o *PostUnifiedWebhookConnectionIDObjectRequest) GetWebhook() *shared.Webhook {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *PostUnifiedWebhookConnectionIDObjectRequest) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *PostUnifiedWebhookConnectionIDObjectRequest) GetEvents() []PostUnifiedWebhookConnectionIDObjectEvents {
	if o == nil {
		return nil
	}
	return o.Events
}

func (o *PostUnifiedWebhookConnectionIDObjectRequest) GetObject() string {
	if o == nil {
		return ""
	}
	return o.Object
}

type PostUnifiedWebhookConnectionIDObjectResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful
	Webhook *shared.Webhook
}

func (o *PostUnifiedWebhookConnectionIDObjectResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *PostUnifiedWebhookConnectionIDObjectResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *PostUnifiedWebhookConnectionIDObjectResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *PostUnifiedWebhookConnectionIDObjectResponse) GetWebhook() *shared.Webhook {
	if o == nil {
		return nil
	}
	return o.Webhook
}
