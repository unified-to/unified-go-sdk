// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package unifiedgosdk

// Generated from OpenAPI doc version 1.0 and generator version 2.701.8

import (
	"context"
	"fmt"
	"github.com/unified-to/unified-go-sdk/internal/config"
	"github.com/unified-to/unified-go-sdk/internal/hooks"
	"github.com/unified-to/unified-go-sdk/pkg/models/shared"
	"github.com/unified-to/unified-go-sdk/pkg/retry"
	"github.com/unified-to/unified-go-sdk/pkg/utils"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	// North American data region
	"https://api.unified.to",
	// European data region
	"https://api-eu.unified.to",
	// Australian data region
	"https://api-au.unified.to",
}

// HTTPClient provides an interface for supplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

// UnifiedTo - Unified.to API: One API to Rule Them All
type UnifiedTo struct {
	SDKVersion        string
	Accounting        *Accounting
	Account           *Account
	Balancesheet      *Balancesheet
	Bill              *Bill
	Category          *Category
	Contact           *Contact
	Creditmemo        *Creditmemo
	Invoice           *Invoice
	Journal           *Journal
	Order             *Order
	Organization      *Organization
	Profitloss        *Profitloss
	Purchaseorder     *Purchaseorder
	Report            *Report
	Salesorder        *Salesorder
	Taxrate           *Taxrate
	Transaction       *Transaction
	Trialbalance      *Trialbalance
	Ats               *Ats
	Activity          *Activity
	Application       *Application
	Applicationstatus *Applicationstatus
	Candidate         *Candidate
	Company           *Company
	Document          *Document
	Interview         *Interview
	Job               *Job
	Scorecard         *Scorecard
	Calendar          *Calendar
	Busy              *Busy
	Event             *Event
	Link              *Link
	Recording         *Recording
	Commerce          *Commerce
	Collection        *Collection
	Inventory         *Inventory
	Item              *Item
	Location          *Location
	Review            *Review
	Crm               *Crm
	Deal              *Deal
	Lead              *Lead
	Pipeline          *Pipeline
	Enrich            *Enrich
	Person            *Person
	Genai             *Genai
	Embedding         *Embedding
	Model             *Model
	Prompt            *Prompt
	Hris              *Hris
	Device            *Device
	Employee          *Employee
	Group             *Group
	Payslip           *Payslip
	Timeoff           *Timeoff
	Timeshift         *Timeshift
	Kms               *Kms
	Comment           *Comment
	Page              *Page
	Space             *Space
	Lms               *Lms
	Class             *Class
	Course            *Course
	Instructor        *Instructor
	Student           *Student
	Martech           *Martech
	List              *List
	Member            *Member
	Messaging         *Messaging
	Channel           *Channel
	Message           *Message
	Metadata          *Metadata
	Passthrough       *Passthrough
	Payment           *Payment
	Payout            *Payout
	Refund            *Refund
	Subscription      *Subscription
	Repo              *Repo
	Branch            *Branch
	Commit            *Commit
	Pullrequest       *Pullrequest
	Repository        *Repository
	Scim              *Scim
	User              *User
	Storage           *Storage
	File              *File
	Task              *Task
	Change            *Change
	Project           *Project
	Ticketing         *Ticketing
	Customer          *Customer
	Note              *Note
	Ticket            *Ticket
	Uc                *Uc
	Call              *Call
	Unified           *Unified
	Apicall           *Apicall
	Connection        *Connection
	Integration       *Integration
	Auth              *Auth
	Login             *Login
	Issue             *Issue
	Webhook           *Webhook
	Verification      *Verification
	Package           *Package
	Request           *Request

	sdkConfiguration config.SDKConfiguration
	hooks            *hooks.Hooks
}

type SDKOption func(*UnifiedTo)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *UnifiedTo) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *UnifiedTo) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *UnifiedTo) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *UnifiedTo) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(jwt string) SDKOption {
	return func(sdk *UnifiedTo) {
		security := shared.Security{Jwt: jwt}
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(&security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (shared.Security, error)) SDKOption {
	return func(sdk *UnifiedTo) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *UnifiedTo) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *UnifiedTo) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *UnifiedTo {
	sdk := &UnifiedTo{
		SDKVersion: "0.29.0",
		sdkConfiguration: config.SDKConfiguration{
			UserAgent:  "speakeasy-sdk/go 0.29.0 2.701.8 1.0 github.com/unified-to/unified-go-sdk",
			ServerList: ServerList,
		},
		hooks: hooks.New(),
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if currentServerURL != serverURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.Accounting = newAccounting(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Account = newAccount(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Balancesheet = newBalancesheet(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Bill = newBill(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Category = newCategory(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Contact = newContact(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Creditmemo = newCreditmemo(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Invoice = newInvoice(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Journal = newJournal(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Order = newOrder(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Organization = newOrganization(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Profitloss = newProfitloss(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Purchaseorder = newPurchaseorder(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Report = newReport(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Salesorder = newSalesorder(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Taxrate = newTaxrate(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Transaction = newTransaction(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Trialbalance = newTrialbalance(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Ats = newAts(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Activity = newActivity(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Application = newApplication(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Applicationstatus = newApplicationstatus(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Candidate = newCandidate(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Company = newCompany(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Document = newDocument(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Interview = newInterview(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Job = newJob(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Scorecard = newScorecard(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Calendar = newCalendar(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Busy = newBusy(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Event = newEvent(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Link = newLink(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Recording = newRecording(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Commerce = newCommerce(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Collection = newCollection(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Inventory = newInventory(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Item = newItem(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Location = newLocation(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Review = newReview(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Crm = newCrm(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Deal = newDeal(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Lead = newLead(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Pipeline = newPipeline(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Enrich = newEnrich(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Person = newPerson(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Genai = newGenai(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Embedding = newEmbedding(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Model = newModel(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Prompt = newPrompt(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Hris = newHris(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Device = newDevice(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Employee = newEmployee(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Group = newGroup(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Payslip = newPayslip(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Timeoff = newTimeoff(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Timeshift = newTimeshift(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Kms = newKms(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Comment = newComment(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Page = newPage(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Space = newSpace(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Lms = newLms(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Class = newClass(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Course = newCourse(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Instructor = newInstructor(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Student = newStudent(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Martech = newMartech(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.List = newList(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Member = newMember(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Messaging = newMessaging(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Channel = newChannel(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Message = newMessage(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Metadata = newMetadata(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Passthrough = newPassthrough(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Payment = newPayment(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Payout = newPayout(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Refund = newRefund(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Subscription = newSubscription(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Repo = newRepo(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Branch = newBranch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Commit = newCommit(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Pullrequest = newPullrequest(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Repository = newRepository(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Scim = newScim(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.User = newUser(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Storage = newStorage(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.File = newFile(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Task = newTask(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Change = newChange(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Project = newProject(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Ticketing = newTicketing(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Customer = newCustomer(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Note = newNote(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Ticket = newTicket(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Uc = newUc(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Call = newCall(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Unified = newUnified(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Apicall = newApicall(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Connection = newConnection(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Integration = newIntegration(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Auth = newAuth(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Login = newLogin(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Issue = newIssue(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Webhook = newWebhook(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Verification = newVerification(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Package = newPackage(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Request = newRequest(sdk, sdk.sdkConfiguration, sdk.hooks)

	return sdk
}
